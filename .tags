!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT	src/utility/abort.h	45;"	d
ALIGN_CENTER	src/utility/fmt/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_DEFAULT	src/utility/fmt/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_LEFT	src/utility/fmt/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_NUMERIC	src/utility/fmt/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_RIGHT	src/utility/fmt/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ASSERT_ALLWAYS	src/utility/abort.h	47;"	d
Abort	diagram/logger.py	/^def Abort(info):$/;"	f
AcceptChange	src/weight.cpp	/^void weight::AcceptChange(group &Group) {$/;"	f	class:weight
Accepted	src/markov.h	/^  double Accepted[MCUpdates][MaxGroupNum];$/;"	m	class:mc::markov
Accu	polar_lam.py	/^    Accu = {}$/;"	v
Accu	polar_lam_order.py	/^    Accu = {}$/;"	v
Accu	tool/plt_polar_diag.py	/^    Accu = {}$/;"	v
Accu	tool/plt_polar_lam.py	/^    Accu = {}$/;"	v
AdjustGroupReWeight	src/markov.cpp	/^void markov::AdjustGroupReWeight() {$/;"	f	class:markov
Angle2D	src/vertex.cpp	/^double verfunc::Angle2D(const momentum &K1, const momentum &K2) {$/;"	f	class:verfunc
Angle2Index	src/vertex.cpp	/^int verfunc::Angle2Index(const double &Angle, const int &AngleNum) {$/;"	f	class:verfunc
Assert	diagram/logger.py	/^def Assert(condition, info):$/;"	f
AssignFromTo	src/utility/utility.h	/^template <typename T> void AssignFromTo(T *source, T *target, int size) {$/;"	f
AssignMomentums	diagram/diagram.py	/^def AssignMomentums(permutation, reference, InteractionPairs):$/;"	f
AttachExtVer	diagram/polar.py	/^    def AttachExtVer(self, FreeEnergyDiag):$/;"	m	class:polar
BACKGROUND_COLOR	src/utility/fmt/format-inl.h	/^template <typename T> const char basic_data<T>::BACKGROUND_COLOR[] = "\\x1b[48;2;";$/;"	m	class:internal::basic_data
BARE	src/global.h	/^enum selfenergy { BARE, FOCK, DRESSED }; \/\/ self energy type$/;"	e	enum:selfenergy
BUFFER_SIZE	src/utility/fmt/format.h	/^  enum {BUFFER_SIZE = std::numeric_limits<unsigned long long>::digits10 + 3};$/;"	e	enum:format_int::__anon12
Beta	src/global.h	/^  double Beta;       \/\/ inverse temperature$/;"	m	struct:parameter
Bose	src/weight.h	/^  bose Bose;$/;"	m	class:diag::weight
Bubble	bubble.py	/^def Bubble(Dim, Beta, Spin, Kf, Mom):$/;"	f
Bubble	polar_eqTime.py	/^    Bubble = bubble.Bubble(D, Para.Beta, Spin, Para.kF, 0.0)$/;"	v
Bubble	polar_lam_order.py	/^    Bubble = bubble.Bubble(D, Para.Beta, Spin, Para.kF, 0.0)$/;"	v
Bubble	tool/plt_polar_diag.py	/^    Bubble = bubble.Bubble(D, Para.Beta, Spin, Para.kF, 0.0)$/;"	v
Bubble	tool/plt_polar_lam.py	/^    Bubble = bubble.Bubble(D, Para.Beta, Spin, Para.kF, 0.0)$/;"	v
BubbleQ	polar_lam_order.py	/^    BubbleQ = np.zeros(len(KGrid))$/;"	v
BubbleQ	polar_lam_order.py	/^BubbleQ = np.zeros((len(KGrid),2))$/;"	v
BubbleQ	tool/plt_polar_diag.py	/^    BubbleQ = np.zeros((len(KGrid),2))$/;"	v
BubbleQ	tool/plt_polar_lam.py	/^    BubbleQ = np.zeros((len(KGrid),2))$/;"	v
BuildADiagram	diagram/free_energy.py	/^    def BuildADiagram(self):$/;"	m	class:free_energy
BuildADiagram	diagram/polar.py	/^    def BuildADiagram(self):$/;"	m	class:polar
BuildFockSigma	src/vertex.cpp	/^void fermi::BuildFockSigma() {$/;"	f	class:fermi
CHANGE_GROUP	src/markov.h	/^    CHANGE_GROUP,$/;"	e	enum:mc::markov::Updates
CHANGE_MOM	src/markov.h	/^    CHANGE_MOM,$/;"	e	enum:mc::markov::Updates
CHANGE_TAU	src/markov.h	/^    CHANGE_TAU,$/;"	e	enum:mc::markov::Updates
CHECKNULL	src/utility/utility.h	83;"	d
Center	src/utility/utility.cpp	/^std::string Center(const string s, const int w) {$/;"	f
ChangeGroup	src/markov.cpp	/^void markov::ChangeGroup() {$/;"	f	class:markov
ChangeGroup	src/weight.cpp	/^void weight::ChangeGroup(group &Group, bool Forced) {$/;"	f	class:weight
ChangeMom	src/weight.cpp	/^void weight::ChangeMom(group &Group, int MomIndex) {$/;"	f	class:weight
ChangeMomentum	src/markov.cpp	/^void markov::ChangeMomentum() {$/;"	f	class:markov
ChangeTau	src/markov.cpp	/^void markov::ChangeTau() {$/;"	f	class:markov
ChangeTau	src/weight.cpp	/^void weight::ChangeTau(group &Group, int TauIndex) {$/;"	f	class:weight
Char	src/utility/fmt/printf.h	/^  typedef typename Context::char_type Char;$/;"	t	class:internal::arg_converter
CheckConservation	diagram/diagram.py	/^def CheckConservation(permutation, MomentumBases, InteractionPairs, LoopNum=None):$/;"	f
CleanFile	src/utility/utility.cpp	/^bool CleanFile(const string &FileName) {$/;"	f
Cluster	send.py	/^Cluster = "local"$/;"	v
Cluster	send.py	/^Cluster="PBS"$/;"	v
ColorList	IO.py	/^ColorList = ColorList*40$/;"	v
ColorList	IO.py	/^ColorList = ['k', 'r', 'b', 'g', 'm', 'c', 'navy',$/;"	v
CopyToArray	src/utility/vector.h	/^  void CopyToArray(T *target) const {$/;"	f	class:Vec
Counter	src/global.h	/^  long long int Counter; \/\/ counter to save the current MC step$/;"	m	struct:parameter
Counter	src/markov.h	/^  long long Counter;$/;"	m	class:mc::markov
CurrExtMomBin	src/weight.h	/^  int CurrExtMomBin;                   \/\/ current bin of the external momentum$/;"	m	struct:diag::variable
CurrGroup	src/weight.h	/^  group *CurrGroup;$/;"	m	struct:diag::variable
CurrTau	src/weight.h	/^  double CurrTau;                      \/\/ current external tau$/;"	m	struct:diag::variable
CurrVersion	src/weight.h	/^  long int CurrVersion;$/;"	m	struct:diag::variable
D	polar_eqTime.py	/^D = 3$/;"	v
D	polar_lam.py	/^D = 3$/;"	v
D	polar_lam_order.py	/^D = 3$/;"	v
D	reweight.py	/^D = 3$/;"	v
D	src/global.h	/^const int D = 3;$/;"	v
D	tool/plt_lambda.py	/^D = 3$/;"	v
D	tool/plt_polar_diag.py	/^D = 3$/;"	v
D	tool/plt_polar_lam.py	/^D = 3$/;"	v
DEBUGMODE	src/global.h	/^const bool DEBUGMODE = false;$/;"	v
DECREASE_ORDER	src/markov.h	/^    DECREASE_ORDER,$/;"	e	enum:mc::markov::Updates
DIGITS	src/utility/fmt/format-inl.h	/^const char basic_data<T>::DIGITS[] =$/;"	m	class:internal::basic_data
DIRECT	src/global.h	/^const int DIRECT = 0, EXCHANGE = 1;$/;"	v
DOWN	src/global.h	/^enum spin { DOWN, UP };$/;"	e	enum:spin
DRESSED	src/global.h	/^enum selfenergy { BARE, FOCK, DRESSED }; \/\/ self energy type$/;"	e	enum:selfenergy
DebugInfo	src/weight_test.cpp	/^string weight::DebugInfo(group &Group) {$/;"	f	class:weight
Delay	src/utility/abort.cpp	/^void InterruptHandler::Delay()$/;"	f	class:InterruptHandler
DelayedInterrupt	diagram/logger.py	/^class DelayedInterrupt(object):$/;"	c
DeltaK	src/vertex.h	/^  double DeltaK;$/;"	m	class:diag::fermi
DeltaK2	src/vertex.h	/^  double DeltaK2;$/;"	m	class:diag::fermi
Diag	src/diagram.h	/^  vector<diagram> Diag; \/\/ diagrams$/;"	m	struct:diag::group
DiagFileFormat	src/global.h	/^  std::string DiagFileFormat; \/\/ the diagram file needs to be loaded$/;"	m	struct:parameter
Direct2Exchange	diagram/diagram.py	/^def Direct2Exchange(permutation, i, j):$/;"	f
Dismiss	src/utility/scopeguard.h	/^    void Dismiss()$/;"	f	class:ScopeGuard
DoesFileExist	src/utility/utility.cpp	/^bool DoesFileExist(const string &FileName) {$/;"	f
DynamicTest	src/markov.cpp	/^int markov::DynamicTest() { return Weight.DynamicTest(); }$/;"	f	class:markov
DynamicTest	src/weight_test.cpp	/^int weight::DynamicTest() {$/;"	f	class:weight
EF	forkE.py	/^    EF = kF**2$/;"	v
EF	tool/fock.py	/^EF=1.91$/;"	v
END	src/markov.h	/^    END$/;"	e	enum:mc::markov::Updates
EPS	src/global.h	/^const double EPS = 1.0e-11;$/;"	v
EQUALTIME	src/global.h	/^enum obstype { FREQ, EQUALTIME };$/;"	e	enum:obstype
ERR	src/weight_test.cpp	/^std::string weight::ERR(std::string format, TS... args) {$/;"	f	class:weight
ERROR	src/utility/logger.h	/^                ERROR,$/;"	e	enum:LogLevel
EXCHANGE	src/global.h	/^const int DIRECT = 0, EXCHANGE = 1;$/;"	v
Each	polar_lam.py	/^    Each = {}$/;"	v
Each	polar_lam_order.py	/^    Each = {}$/;"	v
Each	tool/plt_polar_diag.py	/^    Each = {}$/;"	v
Each	tool/plt_polar_lam.py	/^    Each = {}$/;"	v
Ef	src/global.h	/^  double Rs, Ef, Kf,$/;"	m	struct:parameter
Equal	src/utility/utility.cpp	/^bool Equal(double x1, double x2, double eps) { return (fabs(x1 - x2) < eps); }$/;"	f
Equal	src/utility/utility.cpp	/^bool Equal(int x1, int x2, double eps) { return x1 == x2; }$/;"	f
Equal	src/utility/utility.cpp	/^bool Equal(uint x1, uint x2, double eps) { return x1 == x2; }$/;"	f
Equal	src/utility/utility.h	/^bool Equal(const T *x1, const T *x2, uint num, double eps = eps0) {$/;"	f
ErrorPlot	IO.py	/^def ErrorPlot(p, x, d, color='k', marker='s', label=None, size=4, shift=False):$/;"	f
EsData	polar_eqTime.py	/^    EsData = reduce.Reduce(EsDataDict, Map)$/;"	v
EsData	polar_lam.py	/^    EsData = reduce.Reduce(EsDataDict, Map)$/;"	v
EsData	polar_lam_order.py	/^    EsData = reduce.Reduce(EsDataDict, Map)$/;"	v
EsData	tool/plt_polar_diag.py	/^    EsData = reduce.Reduce(EsDataDict, Map)$/;"	v
EsData	tool/plt_polar_lam.py	/^    EsData = reduce.Reduce(EsDataDict, Map)$/;"	v
EsDataDict	polar_eqTime.py	/^    EsDataDict = {}$/;"	v
EsDataDict	polar_lam.py	/^    EsDataDict = {}$/;"	v
EsDataDict	polar_lam_order.py	/^    EsDataDict = {}$/;"	v
EsDataDict	tool/plt_polar_diag.py	/^    EsDataDict = {}$/;"	v
EsDataDict	tool/plt_polar_lam.py	/^    EsDataDict = {}$/;"	v
Estimate	reduce.py	/^def Estimate(Data, Weights, axis=0):$/;"	f
EstimateGroup	reduce.py	/^def EstimateGroup(DataDict, Steps, Phys, group):$/;"	f
Excited	src/diagram.h	/^  array<bool, 2> Excited;$/;"	m	struct:diag::vertex4
Excited	src/diagram.h	/^  bool Excited;$/;"	m	struct:diag::green
ExtLoopNum	src/diagram.h	/^  int ExtLoopNum;      \/\/ dimension of external loop basis$/;"	m	struct:diag::group
ExtMomBin	tool/plt_lambda.py	/^ExtMomBin = 5       #0,1,2,...n-1$/;"	v
ExtMomMax	tool/plt_lambda.py	/^ExtMomMax = 10       #*kF$/;"	v
ExtMomMin	tool/plt_lambda.py	/^ExtMomMin = 5$/;"	v
ExtMomTable	src/weight.h	/^  array<momentum, ExtMomBinSize> ExtMomTable;$/;"	m	struct:diag::variable
ExtTauNum	src/diagram.h	/^  int ExtTauNum;       \/\/ dimension of external tau basis$/;"	m	struct:diag::group
FLIP	src/global.h	106;"	d
FLIPSPIN	src/global.h	93;"	d
FMT_ALWAYS_INLINE	src/utility/fmt/format.h	/^inline char *lg(uint32_t n, Handler h) FMT_ALWAYS_INLINE;$/;"	m	namespace:internal
FMT_ALWAYS_INLINE	src/utility/fmt/format.h	822;"	d
FMT_ALWAYS_INLINE	src/utility/fmt/format.h	824;"	d
FMT_API	src/utility/fmt/core.h	160;"	d
FMT_API	src/utility/fmt/core.h	162;"	d
FMT_API	src/utility/fmt/core.h	166;"	d
FMT_ASSERT	src/utility/fmt/core.h	170;"	d
FMT_BEGIN_NAMESPACE	src/utility/fmt/core.h	155;"	d
FMT_BUILTIN_CLZ	src/utility/fmt/format.h	173;"	d
FMT_BUILTIN_CLZ	src/utility/fmt/format.h	204;"	d
FMT_BUILTIN_CLZLL	src/utility/fmt/format.h	177;"	d
FMT_BUILTIN_CLZLL	src/utility/fmt/format.h	230;"	d
FMT_CATCH	src/utility/fmt/format-inl.h	41;"	d
FMT_CATCH	src/utility/fmt/format-inl.h	44;"	d
FMT_CHAR	src/utility/fmt/core.h	1315;"	d
FMT_CHRONO_H_	src/utility/fmt/chrono.h	9;"	d
FMT_CLANG_VERSION	src/utility/fmt/format.h	41;"	d
FMT_CLANG_VERSION	src/utility/fmt/format.h	43;"	d
FMT_COLOR_H_	src/utility/fmt/color.h	9;"	d
FMT_CONSTEXPR	src/utility/fmt/core.h	66;"	d
FMT_CONSTEXPR	src/utility/fmt/core.h	69;"	d
FMT_CONSTEXPR11	src/utility/fmt/core.h	78;"	d
FMT_CONSTEXPR11	src/utility/fmt/core.h	80;"	d
FMT_CONSTEXPR_DECL	src/utility/fmt/core.h	67;"	d
FMT_CONSTEXPR_DECL	src/utility/fmt/core.h	70;"	d
FMT_CORE_H_	src/utility/fmt/core.h	9;"	d
FMT_CUDA_VERSION	src/utility/fmt/format.h	55;"	d
FMT_CUDA_VERSION	src/utility/fmt/format.h	57;"	d
FMT_DETECTED_NOEXCEPT	src/utility/fmt/core.h	131;"	d
FMT_DETECTED_NOEXCEPT	src/utility/fmt/core.h	134;"	d
FMT_ENABLE_IF_T	src/utility/fmt/core.h	1305;"	d
FMT_END_NAMESPACE	src/utility/fmt/core.h	150;"	d
FMT_END_NAMESPACE	src/utility/fmt/core.h	153;"	d
FMT_EXCEPTIONS	src/utility/fmt/core.h	118;"	d
FMT_EXCEPTIONS	src/utility/fmt/core.h	120;"	d
FMT_EXPLICIT	src/utility/fmt/core.h	95;"	d
FMT_EXPLICIT	src/utility/fmt/core.h	98;"	d
FMT_FALLTHROUGH	src/utility/fmt/format-inl.h	534;"	d
FMT_FALLTHROUGH	src/utility/fmt/format-inl.h	536;"	d
FMT_FALLTHROUGH	src/utility/fmt/format-inl.h	538;"	d
FMT_FORMAT_H_	src/utility/fmt/format.h	29;"	d
FMT_FORMAT_INL_H_	src/utility/fmt/format-inl.h	9;"	d
FMT_FUNC	src/utility/fmt/format.h	3544;"	d
FMT_GCC_VERSION	src/utility/fmt/core.h	41;"	d
FMT_GCC_VERSION	src/utility/fmt/core.h	43;"	d
FMT_GNUC_LIBSTD_VERSION	src/utility/fmt/format.h	95;"	d
FMT_HAS_BUILTIN	src/utility/fmt/format.h	89;"	d
FMT_HAS_BUILTIN	src/utility/fmt/format.h	91;"	d
FMT_HAS_CPP_ATTRIBUTE	src/utility/fmt/core.h	35;"	d
FMT_HAS_CPP_ATTRIBUTE	src/utility/fmt/core.h	37;"	d
FMT_HAS_CXX11_NOEXCEPT	src/utility/fmt/core.h	132;"	d
FMT_HAS_CXX11_NOEXCEPT	src/utility/fmt/core.h	135;"	d
FMT_HAS_FEATURE	src/utility/fmt/core.h	22;"	d
FMT_HAS_FEATURE	src/utility/fmt/core.h	24;"	d
FMT_HAS_GXX_CXX11	src/utility/fmt/core.h	47;"	d
FMT_HAS_GXX_CXX11	src/utility/fmt/core.h	49;"	d
FMT_HAS_INCLUDE	src/utility/fmt/core.h	29;"	d
FMT_HAS_INCLUDE	src/utility/fmt/core.h	31;"	d
FMT_HEADER_ONLY	src/global.h	113;"	d
FMT_HEADER_ONLY	src/weight_test.cpp	1;"	d	file:
FMT_ICC_VERSION	src/utility/fmt/format.h	47;"	d
FMT_ICC_VERSION	src/utility/fmt/format.h	49;"	d
FMT_ICC_VERSION	src/utility/fmt/format.h	51;"	d
FMT_INLINE_NAMESPACE	src/utility/fmt/core.h	149;"	d
FMT_INLINE_NAMESPACE	src/utility/fmt/core.h	152;"	d
FMT_LOCALE	src/utility/fmt/posix.h	271;"	d
FMT_LOCALE_H_	src/utility/fmt/locale.h	9;"	d
FMT_MAKE_VALUE	src/utility/fmt/core.h	642;"	d
FMT_MAKE_VALUE_SAME	src/utility/fmt/core.h	648;"	d
FMT_MSC_VER	src/utility/fmt/core.h	53;"	d
FMT_MSC_VER	src/utility/fmt/core.h	55;"	d
FMT_NOEXCEPT	src/utility/fmt/core.h	/^typename std::add_rvalue_reference<T>::type declval() FMT_NOEXCEPT;$/;"	m	namespace:internal
FMT_NOEXCEPT	src/utility/fmt/core.h	140;"	d
FMT_NOEXCEPT	src/utility/fmt/core.h	142;"	d
FMT_NOEXCEPT	src/utility/fmt/format.h	/^                                  fmt::string_view message) FMT_NOEXCEPT;$/;"	m	namespace:internal
FMT_NOEXCEPT	src/utility/fmt/posix.h	/^  FMT_API void dup2(int fd, error_code &ec) FMT_NOEXCEPT;$/;"	m	class:file
FMT_NOEXCEPT	src/utility/fmt/posix.h	/^  FMT_API ~buffered_file() FMT_NOEXCEPT;$/;"	m	class:buffered_file
FMT_NOEXCEPT	src/utility/fmt/posix.h	/^  FMT_API ~file() FMT_NOEXCEPT;$/;"	m	class:file
FMT_NOMACRO	src/utility/fmt/time.h	/^inline null<> localtime_r FMT_NOMACRO(...) { return null<>(); }$/;"	f	namespace:internal
FMT_NOMACRO	src/utility/fmt/time.h	19;"	d
FMT_NULL	src/utility/fmt/core.h	104;"	d
FMT_NULL	src/utility/fmt/core.h	107;"	d
FMT_OSTREAM_H_	src/utility/fmt/ostream.h	9;"	d
FMT_OVERRIDE	src/utility/fmt/core.h	86;"	d
FMT_OVERRIDE	src/utility/fmt/core.h	88;"	d
FMT_OVERRIDE	src/utility/fmt/format.h	/^  void grow(std::size_t size) FMT_OVERRIDE;$/;"	m	class:basic_memory_buffer
FMT_POSIX	src/utility/fmt/posix.h	33;"	d
FMT_POSIX	src/utility/fmt/posix.h	35;"	d
FMT_POSIX_CALL	src/utility/fmt/posix.h	41;"	d
FMT_POSIX_CALL	src/utility/fmt/posix.h	46;"	d
FMT_POSIX_CALL	src/utility/fmt/posix.h	48;"	d
FMT_POSIX_H_	src/utility/fmt/posix.h	9;"	d
FMT_POWERS_OF_10	src/utility/fmt/format-inl.h	269;"	d
FMT_PRINTF_H_	src/utility/fmt/printf.h	9;"	d
FMT_RANGES_H_	src/utility/fmt/ranges.h	13;"	d
FMT_RANGE_OUTPUT_LENGTH_LIMIT	src/utility/fmt/ranges.h	20;"	d
FMT_RETRY	src/utility/fmt/posix.h	63;"	d
FMT_RETRY_VAL	src/utility/fmt/posix.h	55;"	d
FMT_RETRY_VAL	src/utility/fmt/posix.h	60;"	d
FMT_SECURE_SCL	src/utility/fmt/format.h	79;"	d
FMT_SECURE_SCL	src/utility/fmt/format.h	81;"	d
FMT_SNPRINTF	src/utility/fmt/format-inl.h	70;"	d
FMT_STRING	src/utility/fmt/format.h	3513;"	d
FMT_STRING_VIEW	src/utility/fmt/core.h	178;"	d
FMT_STRING_VIEW	src/utility/fmt/core.h	181;"	d
FMT_SWPRINTF	src/utility/fmt/format-inl.h	83;"	d
FMT_SYSTEM	src/utility/fmt/posix.h	43;"	d
FMT_THROW	src/utility/fmt/format.h	113;"	d
FMT_TIME_H_	src/utility/fmt/time.h	9;"	d
FMT_TRY	src/utility/fmt/format-inl.h	40;"	d
FMT_TRY	src/utility/fmt/format-inl.h	43;"	d
FMT_UDL_TEMPLATE	src/utility/fmt/format.h	142;"	d
FMT_USE_ALIAS_TEMPLATES	src/utility/fmt/core.h	1308;"	d
FMT_USE_CONSTEXPR	src/utility/fmt/core.h	61;"	d
FMT_USE_CONSTEXPR11	src/utility/fmt/core.h	74;"	d
FMT_USE_EXPLICIT	src/utility/fmt/core.h	94;"	d
FMT_USE_EXPLICIT	src/utility/fmt/core.h	97;"	d
FMT_USE_EXTERN_TEMPLATES	src/utility/fmt/format.h	149;"	d
FMT_USE_GRISU	src/utility/fmt/format.h	165;"	d
FMT_USE_NOEXCEPT	src/utility/fmt/core.h	126;"	d
FMT_USE_NULLPTR	src/utility/fmt/core.h	105;"	d
FMT_USE_NULLPTR	src/utility/fmt/core.h	111;"	d
FMT_USE_TRAILING_RETURN	src/utility/fmt/format.h	159;"	d
FMT_USE_USER_DEFINED_LITERALS	src/utility/fmt/format.h	129;"	d
FMT_USE_WINDOWS_H	src/utility/fmt/format.h	1029;"	d
FMT_USE_WINDOWS_H	src/utility/fmt/format.h	1031;"	d
FMT_VERSION	src/utility/fmt/core.h	19;"	d
FOCK	src/global.h	/^enum selfenergy { BARE, FOCK, DRESSED }; \/\/ self energy type$/;"	e	enum:selfenergy
FOREGROUND_COLOR	src/utility/fmt/format-inl.h	/^template <typename T> const char basic_data<T>::FOREGROUND_COLOR[] = "\\x1b[38;2;";$/;"	m	class:internal::basic_data
FREQ	src/global.h	/^enum obstype { FREQ, EQUALTIME };$/;"	e	enum:obstype
Fermi	src/weight.h	/^  fermi Fermi;$/;"	m	class:diag::weight
FeynCalc_global_h	src/global.h	2;"	d
FeynCalc_random_h	src/utility/rng.h	10;"	d
Feynman_Simulator_scopeguard_h	src/utility/scopeguard.h	10;"	d
FindAllLoops	diagram/diagram.py	/^def FindAllLoops(permutation):$/;"	f
FindIndependentK	diagram/diagram.py	/^def FindIndependentK(permutation, reference, InteractionPairs):$/;"	f
Fock	src/vertex.cpp	/^double fermi::Fock(double k) {$/;"	f	class:fermi
FockSigma	src/vertex.cpp	/^double fermi::FockSigma(const momentum &Mom) {$/;"	f	class:fermi
FormatFunc	src/utility/fmt/format-inl.h	/^typedef void (*FormatFunc)(internal::buffer &, int, string_view);$/;"	t	namespace:__anon13
G	src/diagram.h	/^  array<green *, 2 * MaxOrder> G;         \/\/ the index of all indepdent G$/;"	m	struct:diag::diagram
G	tool/plt_polar_lam.py	/^    G = {}$/;"	v
GNum	src/diagram.h	/^  int GNum;            \/\/ number of G$/;"	m	struct:diag::group
GPool	src/diagram.h	/^  std::array<green, MaxGPoolSize> GPool; \/\/ array to store indepdent G$/;"	m	struct:diag::pool
GPoolSize	src/diagram.h	/^  int GPoolSize;$/;"	m	struct:diag::pool
G_Err	tool/plt_polar_lam.py	/^    G_Err = {} $/;"	v
G_PIMC	tool/plt_polar_lam.py	/^            G_PIMC= np.loadtxt(file)$/;"	v
G_lq	tool/plt_polar_lam.py	/^    G_lq = np.concatenate((KGrid[:,np.newaxis]\/Para.kF,G[Para.Order][:,np.newaxis], G_Err[Para.Order][:,np.newaxis]), axis=1)$/;"	v
Generate	diagram/main.py	/^def Generate(Order, VerOrder, SigmaOrder, QOrder, IsSelfEnergy, IsSpinPolar, IsSysPolar, SPIN):$/;"	f
GetData	reduce.py	/^def GetData(Data, Groups, Steps, Phys, Map):$/;"	f
GetHugen	diagram/free_energy.py	/^    def GetHugen(self, Permutation):$/;"	m	class:free_energy
GetInteractionPairs	diagram/free_energy.py	/^    def GetInteractionPairs(self):$/;"	m	class:free_energy
GetInteractionPairs	diagram/polar.py	/^    def GetInteractionPairs(self, WithMeasuring=False):$/;"	m	class:polar
GetLine	IO.py	/^def GetLine(file):$/;"	f
GetMom	src/weight.cpp	/^void weight::GetMom(const loop &LoopBasis, const int &LoopNum, momentum &Mom) {$/;"	f	class:weight
GetNewK	src/markov.cpp	/^double markov::GetNewK(momentum &NewMom) {$/;"	f	class:markov
GetNewTau	src/markov.cpp	/^double markov::GetNewTau(double &NewTau) {$/;"	f	class:markov
GetNewWeight	src/weight.cpp	/^double weight::GetNewWeight(group &Group) {$/;"	f	class:weight
GetPermu	diagram/diagram.py	/^    def GetPermu(self):$/;"	m	class:diagram
GetReference	diagram/free_energy.py	/^    def GetReference(self):$/;"	m	class:free_energy
GetReference	diagram/polar.py	/^    def GetReference(self):$/;"	m	class:polar
Gfactor	tool/plt_polar_lam.py	/^Gfactor = {}$/;"	v
Gfixq	tool/plt_polar_lam.py	/^Gfixq = {}$/;"	v
Green	src/vertex.cpp	/^double fermi::Green(double Tau, const momentum &Mom, spin Spin, int GType) {$/;"	f	class:fermi
Group	diagram/polar.py	/^    def Group(self, PermutationDict, TimeRotation=True):$/;"	m	class:polar
GroupName	src/global.h	/^  std::vector<std::string> GroupName; \/\/ ID for each group$/;"	m	struct:parameter
Groups	src/markov.h	/^  vector<diag::group> &Groups;$/;"	m	class:mc::markov
Groups	src/weight.h	/^  vector<group> Groups;$/;"	m	class:diag::weight
HASH_FLAG	src/utility/fmt/format.h	/^enum { SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8 };$/;"	e	enum:__anon6
HAVE_SPUT_H	src/utility/sput.h	47;"	d
HasFock	diagram/diagram.py	/^def HasFock(permutation, reference, vertype=None, gtype=None):$/;"	f
HasTadpole	diagram/diagram.py	/^def HasTadpole(permutation, reference):$/;"	f
HugenNum	src/diagram.h	/^  int HugenNum;        \/\/ Number of Hugenholz diagrams in each group$/;"	m	struct:diag::group
HugenToFeyn	diagram/polar.py	/^    def HugenToFeyn(self, HugenPermu):$/;"	m	class:polar
ID	src/diagram.h	/^  int ID;$/;"	m	struct:diag::diagram
ID	src/diagram.h	/^  int ID;$/;"	m	struct:diag::group
IFinp1	tool/plt_polar_lam.py	/^                IFinp1 = True$/;"	v
IFinp1	tool/plt_polar_lam.py	/^        IFinp1 = False$/;"	v
IFinp1	tool/plt_polar_lam.py	/^    IFinp1 = False$/;"	v
IN	src/global.h	/^const int IN = 0;$/;"	v
INCREASE_ORDER	src/markov.h	/^    INCREASE_ORDER = 0,$/;"	e	enum:mc::markov::Updates
INDEX	src/utility/fmt/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	e	enum:internal::arg_ref::Kind
INFO	src/utility/logger.h	/^                INFO,$/;"	e	enum:LogLevel
INF_SIZE	src/utility/fmt/format.h	/^  enum {INF_SIZE = 3}; \/\/ This is an enum to workaround a bug in MSVC.$/;"	e	enum:basic_writer::__anon11
INL	src/global.h	/^const int INL = 0, OUTL = 1, INR = 2, OUTR = 3;$/;"	v
INR	src/global.h	/^const int INL = 0, OUTL = 1, INR = 2, OUTR = 3;$/;"	v
InInAngBinSize	src/global.h	/^const int InInAngBinSize = 32;$/;"	v
InOutAngBinSize	src/global.h	/^const int InOutAngBinSize = 32;$/;"	v
Index	src/weight.h	/^    array<green *, MaxGNum> Index;$/;"	m	struct:diag::weight::__anon16
Index	src/weight.h	/^    array<vertex4 *, MaxVer4Num> Index;$/;"	m	struct:diag::weight::__anon17
Index2Angle	src/vertex.cpp	/^double verfunc::Index2Angle(const int &Index, const int &AngleNum) {$/;"	f	class:verfunc
InitPara	src/main.cpp	/^void InitPara() {$/;"	f
InitialArray	src/utility/utility.h	/^template <typename T> void InitialArray(T *target, T t, const int &size) {$/;"	f
Initialization	src/weight.cpp	/^void weight::Initialization() {$/;"	f	class:weight
IntLoopBasis	src/diagram.h	/^  array<loop, 2> IntLoopBasis; \/\/ interaction loop basis for momentum transfer$/;"	m	struct:diag::vertex4
Interaction	src/vertex.cpp	/^double bose::Interaction(double Tau, const momentum &Mom, int VerType) {$/;"	f	class:bose
InternalLoopNum	src/diagram.h	/^  int InternalLoopNum; \/\/ dimension of internal loop basis$/;"	m	struct:diag::group
InternalTauNum	src/diagram.h	/^  int InternalTauNum;  \/\/ dimension of internal tau basis$/;"	m	struct:diag::group
InterruptHandler	src/utility/abort.cpp	/^InterruptHandler::InterruptHandler()$/;"	f	class:InterruptHandler
InterruptHandler	src/utility/abort.h	/^class InterruptHandler {$/;"	c
IsConnected	diagram/diagram.py	/^def IsConnected(Permutation, Reference, InteractionPairs):$/;"	f
IsDelaying	src/utility/abort.h	/^  bool IsDelaying() { return __IsDelaying; }$/;"	f	class:InterruptHandler
IsExtLoop	src/diagram.h	/^  array<bool, MaxLoopNum> IsExtLoop;$/;"	m	struct:diag::group
IsExtTau	src/diagram.h	/^  array<bool, MaxTauNum> IsExtTau;$/;"	m	struct:diag::group
IsInPool	src/weight_test.cpp	/^template <typename T> bool IsInPool(const T *Pointer, const T *Pool, int Num) {$/;"	f
IsInteractionReducible	src/weight.cpp	/^bool weight::IsInteractionReducible(loop &LoopBasisG1, loop &LoopBasisG2,$/;"	f	class:weight
IsInteractionReducible	src/weight.cpp	/^bool weight::IsInteractionReducible(loop &LoopBasisVer, int LoopNum) {$/;"	f	class:weight
IsLockedLoop	src/diagram.h	/^  array<bool, MaxLoopNum> IsLockedLoop;$/;"	m	struct:diag::group
IsLockedTau	src/diagram.h	/^  array<bool, MaxTauNum> IsLockedTau;$/;"	m	struct:diag::group
IsSelfEnergy	diagram/main.py	/^    IsSelfEnergy = False$/;"	v
IsSpinPolar	diagram/main.py	/^    IsSpinPolar = False$/;"	v
IsSymPolar	diagram/main.py	/^    IsSymPolar = True$/;"	v
KGrid	polar_eqTime.py	/^    KGrid = Grids["KGrid"]$/;"	v
KGrid	polar_lam.py	/^    KGrid = Grids["KGrid"]$/;"	v
KGrid	polar_lam_order.py	/^    KGrid = Grids["KGrid"]$/;"	v
KGrid	tool/plt_polar_diag.py	/^    KGrid = Grids["KGrid"]$/;"	v
KGrid	tool/plt_polar_lam.py	/^    KGrid = Grids["KGrid"]$/;"	v
Kf	src/global.h	/^  double Rs, Ef, Kf,$/;"	m	struct:parameter
Kind	src/utility/fmt/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	g	struct:internal::arg_ref
LC_NUMERIC_MASK	src/utility/fmt/posix.h	/^  enum { LC_NUMERIC_MASK = LC_NUMERIC };$/;"	e	enum:Locale::__anon15
LEFT	src/global.h	/^const int LEFT = 0;$/;"	v
LOGGER	src/utility/logger.h	45;"	d
LOGGER_CONF	src/utility/logger.h	32;"	d
LOGGER_H	src/utility/logger.h	2;"	d
LOGSTR	src/utility/logger.h	/^const std::string LOGSTR[4] = { "[DEBUG]", "[INFO]", "[WARNING]", "[ERROR]" };$/;"	v
LOG_DEBUG	src/utility/logger.h	52;"	d
LOG_ERROR	src/utility/logger.h	55;"	d
LOG_INFO	src/utility/logger.h	53;"	d
LOG_WARNING	src/utility/logger.h	54;"	d
L_file_	src/utility/logger.h	/^                       L_file_ = 1 << 1,$/;"	e	enum:Logger::loggerConf_
L_nofile_	src/utility/logger.h	/^    enum loggerConf_ { L_nofile_ = 1 << 0,$/;"	e	enum:Logger::loggerConf_
L_noscreen_	src/utility/logger.h	/^                       L_noscreen_ = 1 << 2,$/;"	e	enum:Logger::loggerConf_
L_screen_	src/utility/logger.h	/^                       L_screen_ = 1 << 3 };$/;"	e	enum:Logger::loggerConf_
Lambda	src/global.h	/^  double Lambda;$/;"	m	struct:parameter
Left	src/utility/utility.cpp	/^string Left(const string s, const int w) {$/;"	f
LoadDiagrams	diagram/free_energy.py	/^    def LoadDiagrams(self, FileName):$/;"	m	class:free_energy
LoadFile	IO.py	/^def LoadFile(Folder, FileName):$/;"	f
LoadFile_Diag	IO.py	/^def LoadFile_Diag(Folder):$/;"	f
Locale	src/utility/fmt/posix.h	/^  Locale() : locale_(newlocale(LC_NUMERIC_MASK, "C", FMT_NULL)) {$/;"	f	class:Locale
Locale	src/utility/fmt/posix.h	/^class Locale {$/;"	c
LogLevel	src/utility/logger.h	/^enum LogLevel { MYDEBUG,$/;"	g
Logger	src/utility/logger.cpp	/^Logger::Logger()$/;"	f	class:Logger
Logger	src/utility/logger.h	/^class Logger {$/;"	c
LoopBasis	src/diagram.h	/^  array<loop, 4> LoopBasis;    \/\/ loop basis for momentum transfer$/;"	m	struct:diag::vertex4
LoopBasis	src/diagram.h	/^  loop LoopBasis;        \/\/ loop basis for momentum$/;"	m	struct:diag::green
LoopMom	src/weight.h	/^  array<momentum, MaxLoopNum> LoopMom; \/\/ all momentum loop variables$/;"	m	struct:diag::variable
LoopNum	src/diagram.h	/^  int LoopNum;         \/\/ dimension of loop basis$/;"	m	struct:diag::group
LoopSpin	src/weight.h	/^  array<int, MaxLoopNum> LoopSpin;     \/\/ all spin variables$/;"	m	struct:diag::variable
LowerBound	src/vertex.h	/^  double UpperBound, LowerBound;$/;"	m	class:diag::fermi
LowerBound2	src/vertex.h	/^  double UpperBound2, LowerBound2; \/\/ lower upbound for better sigma$/;"	m	class:diag::fermi
MACHEPS	src/global.h	/^const double MACHEPS = 2.22044604925031E-16; \/\/ Macheps + 1.0 > 1.0$/;"	v
MAXBIN	forkE.py	/^    MAXBIN = 2**14  # must be 2**N$/;"	v
MAXBIN	forkE.py	/^    MAXBIN = 2**15$/;"	v
MAXINT	src/global.h	/^const int MAXINT = 2147483647;$/;"	v
MAXREAL	src/global.h	/^const double MAXREAL = 1.0e30;$/;"	v
MCUpdates	src/markov.h	/^const int MCUpdates = 5;$/;"	m	namespace:mc
MININT	src/global.h	/^const int MININT = -2147483647;$/;"	v
MINREAL	src/global.h	/^const double MINREAL = -1.0e30;$/;"	v
MINUS_FLAG	src/utility/fmt/format.h	/^enum { SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8 };$/;"	e	enum:__anon6
MYDEBUG	src/utility/logger.h	/^enum LogLevel { MYDEBUG,$/;"	e	enum:LogLevel
M_RAN_INVM32	src/utility/rng.h	15;"	d
M_RAN_INVM52	src/utility/rng.h	16;"	d
Map	polar_eqTime.py	/^    Map = {}$/;"	v
Map	polar_lam.py	/^    Map = {}$/;"	v
Map	polar_lam_order.py	/^    Map = {}$/;"	v
Map	tool/plt_polar_diag.py	/^    Map = {}$/;"	v
Map	tool/plt_polar_lam.py	/^    Map = {}$/;"	v
Mass2	forkE.py	/^    Mass2 = 0$/;"	v
Mass2	src/global.h	/^  double Mass2;      \/\/ screening length^2$/;"	m	struct:parameter
MathUtils_H	src/utility/utility.h	8;"	d
MaxBranchNum	src/diagram.h	/^const size_t MaxBranchNum = 1 << (MaxOrder - 1); \/\/ 2**(MaxOrder-1)$/;"	m	namespace:diag
MaxDiagNum	src/global.h	/^const int MaxDiagNum = 1024;   \/\/ Max number of Hugenholtz diagrams in one group$/;"	v
MaxExtMom	src/global.h	/^  double MaxExtMom; \/\/ the maximum external momentum$/;"	m	struct:parameter
MaxGNum	src/global.h	/^const int MaxGNum = 2 * MaxOrder;   \/\/ Max G number in one group$/;"	v
MaxGPoolSize	src/global.h	/^const int MaxGPoolSize = 8192; \/\/ Max total indepdent G for all diagrams$/;"	v
MaxGroupNum	src/global.h	/^const int MaxGroupNum = 32;    \/\/ Max number of diagram groups$/;"	v
MaxLoopNum	src/global.h	/^const int MaxLoopNum = MaxOrder; \/\/ Max loop number in one group$/;"	v
MaxOrder	src/global.h	/^const int MaxOrder = 8;        \/\/ Max diagram order$/;"	v
MaxTauNum	src/global.h	/^const int MaxTauNum = 2 * MaxOrder; \/\/ Max tau number in one group$/;"	v
MaxVer4Num	src/global.h	/^const int MaxVer4Num = MaxOrder;    \/\/ Max Ver4 number in one group$/;"	v
MaxVerPoolSize	src/global.h	/^const int MaxVerPoolSize = 4096; \/\/ Max total indepdent vertex for all diagrams$/;"	v
Measure	src/markov.cpp	/^void markov::Measure() {$/;"	f	class:markov
MessageTimer	src/global.h	/^  int MessageTimer;  \/\/ how many secondes between two checking for message$/;"	m	struct:parameter
MinExtMom	src/global.h	/^  double MinExtMom; \/\/ the minimum external momentum$/;"	m	struct:parameter
Mirror	diagram/diagram.py	/^def Mirror(Index):$/;"	f
MonteCarlo	src/main.cpp	/^void MonteCarlo() {$/;"	f
Mu	src/global.h	/^      Mu;            \/\/ r_s, fermi energy, fermi momentum, chemical potential$/;"	m	struct:parameter
Mu_ideal	src/vertex.h	/^  double Mu_ideal;$/;"	m	class:diag::fermi
Mu_shift	src/vertex.h	/^  double Mu_shift;$/;"	m	class:diag::fermi
NAME	src/markov.cpp	19;"	d	file:
NAME	src/utility/fmt/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	e	enum:internal::arg_ref::Kind
NOMINMAX	src/utility/fmt/format-inl.h	33;"	d
NOMINMAX	src/utility/fmt/format-inl.h	35;"	d
NONE	src/utility/fmt/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	e	enum:internal::arg_ref::Kind
NUM_ARGS	src/utility/fmt/core.h	/^  static const size_t NUM_ARGS = sizeof...(Args);$/;"	m	class:format_arg_store
NUM_ARGS	src/utility/fmt/format.h	/^  enum { NUM_ARGS = sizeof...(Args) };$/;"	e	enum:internal::format_string_checker::__anon9
Name	src/diagram.h	/^  std::string Name;$/;"	m	struct:diag::group
NewG	src/weight.h	/^  } NewG;$/;"	m	class:diag::weight	typeref:struct:diag::weight::__anon16
NewVer4	src/weight.h	/^  } NewVer4;$/;"	m	class:diag::weight	typeref:struct:diag::weight::__anon17
NewWeight	src/diagram.h	/^  array<double, 2> NewWeight;$/;"	m	struct:diag::vertex4
NewWeight	src/diagram.h	/^  double NewWeight;      \/\/ weight of each green's function$/;"	m	struct:diag::green
NewWeight	src/diagram.h	/^  double NewWeight;$/;"	m	struct:diag::diagram
NewWeight	src/diagram.h	/^  double NewWeight;$/;"	m	struct:diag::group
Num	src/weight.h	/^    int Num;$/;"	m	struct:diag::weight::__anon16
Num	src/weight.h	/^    int Num;$/;"	m	struct:diag::weight::__anon17
ON_SCOPE_EXIT	src/utility/scopeguard.h	16;"	d
OUT	src/global.h	/^const int OUT = 1;$/;"	v
OUTL	src/global.h	/^const int INL = 0, OUTL = 1, INR = 2, OUTR = 3;$/;"	v
OUTR	src/global.h	/^const int INL = 0, OUTL = 1, INR = 2, OUTR = 3;$/;"	v
ObsType	src/global.h	/^  obstype ObsType;       \/\/ 0: static polarization, 1: equal-time polarization$/;"	m	struct:parameter
OptimizeLoopBasis	diagram/free_energy.py	/^    def OptimizeLoopBasis(self):$/;"	m	class:free_energy
Order	diagram/main.py	/^    Order = 6$/;"	v
Order	src/diagram.h	/^  int Order;           \/\/ diagram order of the group$/;"	m	struct:diag::group
Order	src/global.h	/^  int Order;$/;"	m	struct:parameter
PAIR	src/markov.cpp	26;"	d	file:
PI	src/global.h	/^const double PI = 3.1415926535897932384626433832795;$/;"	v
PID	src/global.h	/^  int PID;               \/\/ ID of the job$/;"	m	struct:parameter
PIDList	send.py	/^    PIDList=range(int(para[-2]))$/;"	v
PIMC_para	tool/plt_polar_lam.py	/^            PIMC_para = file.readline()$/;"	v
PIMCfile	tool/plt_polar_lam.py	/^    PIMCfile = '..\/PIMC_data\/PIMC_rs{0}_theta{1:3.1f}.txt'.format(rs,1\/beta)$/;"	v
PLUS_FLAG	src/utility/fmt/format.h	/^enum { SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8 };$/;"	e	enum:__anon6
POLAR	src/global.h	/^enum type { RG, POLAR };$/;"	e	enum:type
POW10_EXPONENTS	src/utility/fmt/format-inl.h	/^const int16_t basic_data<T>::POW10_EXPONENTS[] = {$/;"	m	class:internal::basic_data
POW10_SIGNIFICANDS	src/utility/fmt/format-inl.h	/^const uint64_t basic_data<T>::POW10_SIGNIFICANDS[] = {$/;"	m	class:internal::basic_data
POWERS_OF_10_32	src/utility/fmt/format-inl.h	/^const uint32_t basic_data<T>::POWERS_OF_10_32[] = {$/;"	m	class:internal::basic_data
Para	polar_eqTime.py	/^    Para = param(D, Spin)$/;"	v
Para	polar_lam.py	/^    Para = param(D, Spin)$/;"	v
Para	polar_lam_order.py	/^    Para = param(D, Spin)$/;"	v
Para	reweight.py	/^Para = param(D, Spin)$/;"	v
Para	src/main.cpp	/^parameter Para; \/\/ parameters as a global variable$/;"	v
Para	tool/plt_lambda.py	/^Para = param(D, Spin)$/;"	v
Para	tool/plt_polar_diag.py	/^    Para = param(D, Spin)$/;"	v
Para	tool/plt_polar_lam.py	/^    Para = param(D, Spin)$/;"	v
Permutation	src/diagram.h	/^  array<int, MaxGNum> Permutation;$/;"	m	struct:diag::diagram
PhyGreen	src/vertex.cpp	/^double fermi::PhyGreen(double Tau, const momentum &Mom, bool IsFock) {$/;"	f	class:fermi
Phys	polar_eqTime.py	/^    Phys = Bubble[0]*len(KGrid)$/;"	v
Phys	polar_lam_order.py	/^    Phys = Bubble[0]*len(KGrid)$/;"	v
Phys	tool/plt_polar_diag.py	/^    Phys = Bubble[0]*len(KGrid)$/;"	v
Phys	tool/plt_polar_lam.py	/^    Phys = Bubble[0]*len(KGrid)$/;"	v
Piq4	tool/plt_polar_lam.py	/^    Piq4 = {}$/;"	v
Piq4_Err	tool/plt_polar_lam.py	/^    Piq4_Err = {}$/;"	v
Piq4_all	tool/plt_polar_lam.py	/^Piq4_all = {}$/;"	v
Piq4_lq	tool/plt_polar_lam.py	/^    Piq4_lq = np.concatenate((KGrid[:,np.newaxis]\/Para.kF,Piq4[Para.Order][:,np.newaxis], Piq4_Err[Para.Order][:,np.newaxis]), axis=1)$/;"	v
Piq4fixq	tool/plt_polar_lam.py	/^Piq4fixq = {}$/;"	v
Polar	src/markov.h	/^  unordered_map<int, polar> Polar;$/;"	m	class:mc::markov
Polar	tool/plt_lambda.py	/^Polar = np.loadtxt(fname)$/;"	v
Polar0	tool/plt_lambda.py	/^Polar0 = np.loadtxt(fname)$/;"	v
PolarDict	tool/plt_polar_diag.py	/^    PolarDict = {}$/;"	v
PolarStatic	src/markov.h	/^  unordered_map<int, double> PolarStatic;$/;"	m	class:mc::markov
Polar_Diag	src/markov.h	/^  unordered_map<string, polar> Polar_Diag;$/;"	m	class:mc::markov
Polar_beta	tool/plt_polar_diag.py	/^Polar_beta = {}$/;"	v
Pool	src/weight.h	/^  pool Pool; \/\/ Pool to store indepdent G, Vertex, and 4-Vertex$/;"	m	class:diag::weight
PrintDeBugMCInfo	src/markov.cpp	/^void markov::PrintDeBugMCInfo() {$/;"	f	class:markov
PrintMCInfo	src/markov.cpp	/^void markov::PrintMCInfo() {$/;"	f	class:markov
PrinterTimer	src/global.h	/^  int PrinterTimer;  \/\/ how many seconds between to printing to screen$/;"	m	struct:parameter
ProgressBar	src/utility/utility.cpp	/^std::string ProgressBar(double progress) {$/;"	f
Proposed	src/markov.h	/^  double Proposed[MCUpdates][MaxGroupNum];$/;"	m	class:mc::markov
Quan	tool/plt_polar_diag.py	/^Quan = 'Polar'$/;"	v
Quan	tool/plt_polar_lam.py	/^Quan = 'LFC'$/;"	v
RANDBL_32	src/utility/rng.h	22;"	d
RANDBL_32_NO_ZERO	src/utility/rng.h	25;"	d
RANDBL_52_NO_ZERO	src/utility/rng.h	29;"	d
RDONLY	src/utility/fmt/posix.h	/^    RDONLY = FMT_POSIX(O_RDONLY), \/\/ Open for reading only.$/;"	e	enum:file::__anon14
RDWR	src/utility/fmt/posix.h	/^    RDWR   = FMT_POSIX(O_RDWR)    \/\/ Open for reading and writing.$/;"	e	enum:file::__anon14
RESET_COLOR	src/utility/fmt/format-inl.h	/^template <typename T> const char basic_data<T>::RESET_COLOR[] = "\\x1b[0m";$/;"	m	class:internal::basic_data
RG	src/global.h	/^enum type { RG, POLAR };$/;"	e	enum:type
RIGHT	src/global.h	/^const int RIGHT = 1;$/;"	v
RNG	src/utility/rng.cpp	/^RandomFactory RNG;$/;"	v
Random	src/main.cpp	/^RandomFactory Random;$/;"	v
RandomFactory	src/utility/rng.cpp	/^RandomFactory::RandomFactory()$/;"	f	class:RandomFactory
RandomFactory	src/utility/rng.cpp	/^RandomFactory::RandomFactory(const std::string& state)$/;"	f	class:RandomFactory
RandomFactory	src/utility/rng.cpp	/^RandomFactory::RandomFactory(int seed)$/;"	f	class:RandomFactory
RandomFactory	src/utility/rng.h	/^class RandomFactory$/;"	c
ReWeight	src/diagram.h	/^  double ReWeight;$/;"	m	struct:diag::group
ReWeight	src/global.h	/^  std::vector<double> ReWeight;       \/\/ reweight factor for each group$/;"	m	struct:parameter
ReWeight_ExtMom	src/diagram.h	/^  std::vector<double> ReWeight_ExtMom;    \/\/ reweight factor with ExtMom for each group$/;"	m	struct:diag::group
ReadDiagrams	src/weight.cpp	/^void weight::ReadDiagrams() {$/;"	f	class:weight
ReadOneDiagram	src/diagram.cpp	/^diagram ReadOneDiagram(istream &DiagFile, pool &Pool, int Order, int LoopNum,$/;"	f
ReadOneGroup	src/diagram.cpp	/^group diag::ReadOneGroup(istream &DiagFile, pool &Pool) {$/;"	f	class:diag
Reduce	reduce.py	/^def Reduce(Dict, Map):$/;"	f
RejectChange	src/weight.cpp	/^void weight::RejectChange(group &Group) {$/;"	f	class:weight
RemoveOldK	src/markov.cpp	/^double markov::RemoveOldK(momentum &OldMom) {$/;"	f	class:markov
RemoveOldTau	src/markov.cpp	/^double markov::RemoveOldTau(double &OldTau) { return 1.0 \/ Para.Beta; }$/;"	f	class:markov
Reset	src/utility/rng.cpp	/^void RandomFactory::Reset()$/;"	f	class:RandomFactory
Reset	src/utility/rng.cpp	/^void RandomFactory::Reset(const std::string& state)$/;"	f	class:RandomFactory
Reset	src/utility/rng.cpp	/^void RandomFactory::Reset(int seed)$/;"	f	class:RandomFactory
Resume	src/utility/abort.cpp	/^void InterruptHandler::Resume()$/;"	f	class:InterruptHandler
ReweightTimer	src/global.h	/^  int ReweightTimer; \/\/ how many secondes between two reweighting$/;"	m	struct:parameter
Right	src/utility/utility.cpp	/^string Right(const string s, const int w) {$/;"	f
Rs	src/global.h	/^  double Rs, Ef, Kf,$/;"	m	struct:parameter
SCOPEGUARD_LINENAME	src/utility/scopeguard.h	15;"	d
SCOPEGUARD_LINENAME_CAT	src/utility/scopeguard.h	14;"	d
SEP_SIZE	src/utility/fmt/format.h	/^    enum { SEP_SIZE = 1 };$/;"	e	enum:basic_writer::int_writer::__anon10
SIGN_FLAG	src/utility/fmt/format.h	/^enum { SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8 };$/;"	e	enum:__anon6
SPIN	diagram/main.py	/^    SPIN = 2$/;"	v
SPUT_DEFAULT_CHECK_NAME	src/utility/sput.h	68;"	d
SPUT_DEFAULT_SUITE_NAME	src/utility/sput.h	67;"	d
SPUT_INITIALIZED	src/utility/sput.h	70;"	d
SPUT_VERSION_MAJOR	src/utility/sput.h	62;"	d
SPUT_VERSION_MINOR	src/utility/sput.h	63;"	d
SPUT_VERSION_PATCH	src/utility/sput.h	64;"	d
SPUT_VERSION_STRING	src/utility/sput.h	65;"	d
SaveFileTimer	src/global.h	/^  int SaveFileTimer; \/\/ how many secondes between saving to file$/;"	m	struct:parameter
SaveToFile	src/markov.cpp	/^void markov::SaveToFile() {$/;"	f	class:markov
ScaleBinSize	src/global.h	/^const int ScaleBinSize = 32;$/;"	v
ScopeGuard	src/utility/scopeguard.h	/^    explicit ScopeGuard(std::function<void()> onExitScope)$/;"	f	class:ScopeGuard
ScopeGuard	src/utility/scopeguard.h	/^class ScopeGuard {$/;"	c
Seed	src/global.h	/^  int Seed;              \/\/ rng seed$/;"	m	struct:parameter
SelfEnergyType	src/global.h	/^  selfenergy SelfEnergyType;$/;"	m	struct:parameter
ShiftExtK	src/markov.cpp	/^double markov::ShiftExtK(const int &OldExtMomBin, int &NewExtMomBin) {$/;"	f	class:markov
ShiftK	src/markov.cpp	/^double markov::ShiftK(const momentum &OldMom, momentum &NewMom) {$/;"	f	class:markov
ShiftTau	src/markov.cpp	/^double markov::ShiftTau(const double &OldTau, double &NewTau) {$/;"	f	class:markov
Sigma	src/vertex.h	/^  double Sigma[MAXSIGMABIN];$/;"	m	class:diag::fermi
Sigma	tool/fock.py	/^Sigma=Sigma_x(EF, k, lam)$/;"	v
Sigma0T	forkE.py	/^def Sigma0T(k):$/;"	f
Sigma0T_integrand	forkE.py	/^def Sigma0T_integrand(q):$/;"	f
Sigma2	src/vertex.h	/^  double Sigma2[MAXSIGMABIN];$/;"	m	class:diag::fermi
Sigma_0T	forkE.py	/^    Sigma_0T=[]$/;"	v
Sigma_integrand	forkE.py	/^def Sigma_integrand(q, iter):$/;"	f
Sigma_x	forkE.py	/^def Sigma_x(k):$/;"	f
Sigma_x	tool/fock.py	/^def Sigma_x(EF, k, lam):$/;"	f
Spin	polar_eqTime.py	/^Spin = 2$/;"	v
Spin	polar_lam.py	/^Spin = 2$/;"	v
Spin	polar_lam_order.py	/^Spin = 2$/;"	v
Spin	reweight.py	/^Spin = 2$/;"	v
Spin	tool/plt_lambda.py	/^Spin = 2$/;"	v
Spin	tool/plt_polar_diag.py	/^Spin = 2$/;"	v
Spin	tool/plt_polar_lam.py	/^Spin = 2$/;"	v
SpinFactor	src/diagram.h	/^  array<double, MaxBranchNum> SpinFactor; \/\/ the spin factor of a diagram$/;"	m	struct:diag::diagram
StaticTest	src/weight_test.cpp	/^int weight::StaticTest() {$/;"	f	class:weight
Swap	diagram/diagram.py	/^def Swap(permutation, i, j):$/;"	f
SwapTwoInteraction	diagram/diagram.py	/^def SwapTwoInteraction(permutation, m, n, k, l):$/;"	f
SwapTwoVertex	diagram/diagram.py	/^def SwapTwoVertex(permutation, i, j):$/;"	f
Sweep	src/global.h	/^  int Sweep;             \/\/ how many MC steps between two measuring$/;"	m	struct:parameter
SymFactor	src/diagram.h	/^  double SymFactor;                       \/\/ the symmetry factor of a diagram$/;"	m	struct:diag::diagram
THROW	src/utility/abort.h	38;"	d
TM32	src/global.h	/^const double TM32 = 1.0 \/ (pow(2.0, 32));$/;"	v
Tau	src/weight.h	/^  array<double, MaxTauNum> Tau;        \/\/ all tau variables$/;"	m	struct:diag::variable
TauBasis	src/diagram.h	/^  tau TauBasis;          \/\/ tau basis$/;"	m	struct:diag::green
TauNum	src/diagram.h	/^  int TauNum;          \/\/ dimension of tau basis$/;"	m	struct:diag::group
Temp_Proposed	src/markov.h	/^  double Temp_Proposed[MaxGroupNum]; $/;"	m	class:mc::markov
Test	src/diagram.cpp	/^void diag::Test(group &Group) {$/;"	f	class:diag
TestRNG	src/utility/rng_test.cpp	/^int TestRNG()$/;"	f
TestTimer	src/utility/timer_test.cpp	/^int TestTimer()$/;"	f
Test_RNG_Bound_And_Efficiency	src/utility/rng_test.cpp	/^void Test_RNG_Bound_And_Efficiency()$/;"	f
Test_RNG_IO	src/utility/rng_test.cpp	/^void Test_RNG_IO()$/;"	f
ThreePhyGreen	src/vertex.cpp	/^double fermi::ThreePhyGreen(double Tau, const momentum &Mom, bool IsFock) {$/;"	f	class:fermi
ToString	diagram/polar.py	/^    def ToString(self, PolarHugenList, VerOrder, SigmaOrder, QOrder, IsSelfEnergy, IsSpinPolar, IsSysPolar, SPIN):$/;"	m	class:polar
ToString	src/diagram.cpp	/^std::string ToString(const diagram &Diag) {$/;"	f
ToString	src/diagram.cpp	/^std::string ToString(const green &G) {$/;"	f
ToString	src/diagram.cpp	/^std::string ToString(const group &Group) {$/;"	f
ToString	src/utility/rng.cpp	/^std::string ToString(const RandomFactory& rng)$/;"	f
ToString	src/utility/utility.cpp	/^std::string ToString(const double x, const int width, const int decDigits) {$/;"	f
ToString	src/utility/utility.h	/^template <typename T> std::string ToString(const T &value) {$/;"	f
ToString	src/utility/utility.h	/^template <typename T> std::string ToString(const T *array, size_t Num) {$/;"	f
ToString	src/utility/vector.h	/^template <typename T, int D> std::string ToString(Vec<T, D> value) {$/;"	f
TotalStep	src/global.h	/^  int TotalStep;         \/\/ total steps of the Monte Carlo$/;"	m	struct:parameter
TwoPhyGreen	src/vertex.cpp	/^double fermi::TwoPhyGreen(double Tau, const momentum &Mom, bool IsFock) {$/;"	f	class:fermi
Type	src/diagram.h	/^  array<int, 2> Type;    \/\/ type of each vertex function$/;"	m	struct:diag::vertex4
Type	src/diagram.h	/^  int Type;              \/\/ type of each green's function$/;"	m	struct:diag::green
Type	src/global.h	/^  type Type;             \/\/ polarization, RG$/;"	m	struct:parameter
Type	src/utility/fmt/posix.h	/^  typedef locale_t Type;$/;"	t	class:Locale
UP	src/global.h	/^enum spin { DOWN, UP };$/;"	e	enum:spin
UVCoupling	src/global.h	/^  double UVCoupling; \/\/ the coupling constant at the UV scale$/;"	m	struct:parameter
UVScale	src/global.h	/^  double UVScale;    \/\/ the UV bound of the energy scale$/;"	m	struct:parameter
UnionFind	diagram/unionfind.py	/^class UnionFind:$/;"	c
Updates	src/markov.h	/^  enum Updates {$/;"	g	class:mc::markov
UpdatesName	src/markov.h	/^  std::string UpdatesName[MCUpdates];$/;"	m	class:mc::markov
UpperBound	src/vertex.h	/^  double UpperBound, LowerBound;$/;"	m	class:diag::fermi
UpperBound2	src/vertex.h	/^  double UpperBound2, LowerBound2; \/\/ lower upbound for better sigma$/;"	m	class:diag::fermi
UseVer4	src/global.h	/^  bool UseVer4;          \/\/ use vertex4 to calculate weight or not$/;"	m	struct:parameter
Var	src/markov.h	/^  diag::variable &Var;$/;"	m	class:mc::markov
Var	src/weight.h	/^  variable Var; \/\/ The variable of the integral$/;"	m	class:diag::weight
Vec	src/utility/vector.h	/^  Vec() {}$/;"	f	class:Vec
Vec	src/utility/vector.h	/^  Vec(T *value) {$/;"	f	class:Vec
Vec	src/utility/vector.h	/^  Vec(T value) {$/;"	f	class:Vec
Vec	src/utility/vector.h	/^  Vec(std::initializer_list<T> list) {$/;"	f	class:Vec
Vec	src/utility/vector.h	/^template <typename T, int D> class Vec {$/;"	c
Ver4	src/diagram.h	/^  array<vertex4 *, 2 * MaxOrder> Ver4;    \/\/ the index of all indepdent 4-vertex$/;"	m	struct:diag::diagram
Ver4AtUV	src/vertex.h	/^  double Ver4AtUV[InInAngBinSize][InOutAngBinSize];$/;"	m	class:diag::verfunc
Ver4Legs	src/diagram.h	/^      Ver4Legs; \/\/ the GIndex of four legs of every indepdent 4-vertex$/;"	m	struct:diag::vertex4
Ver4Num	src/diagram.h	/^  int Ver4Num;         \/\/ number of 4-vertex$/;"	m	struct:diag::group
Ver4Pool	src/diagram.h	/^      Ver4Pool; \/\/ array to store indepdent vertex4$/;"	m	struct:diag::pool
Ver4PoolSize	src/diagram.h	/^  int Ver4PoolSize;$/;"	m	struct:diag::pool
VerFunc	src/weight.h	/^  verfunc VerFunc;$/;"	m	class:diag::weight
Version	src/diagram.h	/^  long long int Version; \/\/ keep track of the version$/;"	m	struct:diag::green
Version	src/diagram.h	/^  long long int Version; \/\/ keep track of the version$/;"	m	struct:diag::vertex4
Vertex4	src/vertex.cpp	/^void verfunc::Vertex4(const momentum &InL, const momentum &InR,$/;"	f	class:verfunc
WARNING	src/utility/logger.h	/^                WARNING,$/;"	e	enum:LogLevel
WIN32_LEAN_AND_MEAN	src/utility/fmt/format-inl.h	28;"	d
WRESET_COLOR	src/utility/fmt/format-inl.h	/^template <typename T> const wchar_t basic_data<T>::WRESET_COLOR[] = L"\\x1b[0m";$/;"	m	class:internal::basic_data
WRONLY	src/utility/fmt/posix.h	/^    WRONLY = FMT_POSIX(O_WRONLY), \/\/ Open for writing only.$/;"	e	enum:file::__anon14
Weight	src/diagram.h	/^  array<double, 2> Weight; \/\/ direct\/exchange weight of each 4-vertex function$/;"	m	struct:diag::vertex4
Weight	src/diagram.h	/^  double Weight;         \/\/ weight of each green's function$/;"	m	struct:diag::green
Weight	src/diagram.h	/^  double Weight;$/;"	m	struct:diag::diagram
Weight	src/diagram.h	/^  double Weight;$/;"	m	struct:diag::group
Weight	src/markov.h	/^  diag::weight Weight;$/;"	m	class:mc::markov
Weight	src/weight.h	/^    array<double, MaxGNum> Weight;$/;"	m	struct:diag::weight::__anon16
Weight	src/weight.h	/^    array<double, MaxVer4Num> Weight;$/;"	m	struct:diag::weight::__anon17
ZERO_OR_POWERS_OF_10_32	src/utility/fmt/format-inl.h	/^const uint32_t basic_data<T>::ZERO_OR_POWERS_OF_10_32[] = {$/;"	m	class:internal::basic_data
ZERO_OR_POWERS_OF_10_64	src/utility/fmt/format-inl.h	/^const uint64_t basic_data<T>::ZERO_OR_POWERS_OF_10_64[] = {$/;"	m	class:internal::basic_data
Zero	src/utility/utility.cpp	/^bool Zero(double x, double eps) { return (fabs(x) < eps); }$/;"	f
_AddAllGToPool	src/diagram.cpp	/^vector<green *> _AddAllGToPool(pool &Pool, vector<tau> &VerBasis,$/;"	f
_AddAllVer4ToPool	src/diagram.cpp	/^vector<vertex4 *> _AddAllVer4ToPool(pool &Pool, vector<tau> &VerBasis,$/;"	f
_AddOneGToPool	src/diagram.cpp	/^green *_AddOneGToPool(pool &Pool, green &Green) {$/;"	f
_AddOneInteractionToPool	src/diagram.cpp	/^vertex4 *_AddOneInteractionToPool(pool &Pool, vertex4 &Vertex4) {$/;"	f
_AddOneVer4ToPool	src/diagram.cpp	/^vertex4 *_AddOneVer4ToPool(pool &Pool, vertex4 &Vertex4) {$/;"	f
_Array	src/utility/vector.h	/^  T _Array[D];$/;"	m	class:Vec
_CheckKeyWord	src/diagram.cpp	/^string _CheckKeyWord(istream &file, string KeyWord) {$/;"	f
_DetailBalanceStr	src/markov.cpp	/^std::string markov::_DetailBalanceStr(Updates op) {$/;"	f	class:markov
_ErrMsg	src/weight_test.cpp	/^string weight::_ErrMsg(string message) {$/;"	f	class:weight
_ExtractNumbers	src/diagram.cpp	/^vector<T> _ExtractNumbers(istream &file, string KeyWord = "") {$/;"	f
_InL	src/weight.h	/^  momentum _InL;$/;"	m	class:diag::weight
_InR	src/weight.h	/^  momentum _InR;$/;"	m	class:diag::weight
_Mom	src/weight.h	/^  momentum _Mom;$/;"	m	class:diag::weight
_OutL	src/weight.h	/^  momentum _OutL;$/;"	m	class:diag::weight
_OutR	src/weight.h	/^  momentum _OutR;$/;"	m	class:diag::weight
_SpinCache	src/weight.h	/^  array<array<double, MaxBranchNum>, MaxVer4Num> _SpinCache;$/;"	m	class:diag::weight
_TestAngle2D	src/vertex.cpp	/^void verfunc::_TestAngle2D() {$/;"	f	class:verfunc
_TestAngleIndex	src/vertex.cpp	/^void verfunc::_TestAngleIndex() {$/;"	f	class:verfunc
_Transpose	src/diagram.cpp	/^vector<loop> _Transpose(vector<vector<double>> &Basis) {$/;"	f
_Tree	src/weight.h	/^  double _Tree[MaxOrder][MaxBranchNum];$/;"	m	class:diag::weight
_Unchecked_type	src/utility/fmt/format.h	/^  typedef counting_iterator _Unchecked_type;  \/\/ Mark iterator as checked.$/;"	t	class:internal::counting_iterator
_Unchecked_type	src/utility/fmt/format.h	/^  typedef truncating_iterator_base _Unchecked_type; \/\/ Mark iterator as checked.$/;"	t	class:internal::truncating_iterator_base
__ChainDiag	diagram/free_energy.py	/^    def __ChainDiag(self):$/;"	m	class:free_energy	file:
__DelayedSignalHandler	src/utility/abort.cpp	/^void InterruptHandler::__DelayedSignalHandler(int signum)$/;"	f	class:InterruptHandler
__FeynCalc__error_handler__	src/utility/abort.h	10;"	d
__FeynCalc__vector__	src/utility/vector.h	3;"	d
__FindDeformation	diagram/polar.py	/^    def __FindDeformation(self, permutation, PermutationDict, TimeRotation):$/;"	m	class:polar	file:
__GenerateMomentum	diagram/free_energy.py	/^    def __GenerateMomentum(self, permutation, OldMomentum, i, j):$/;"	m	class:free_energy	file:
__GetEqDiags	diagram/free_energy.py	/^    def __GetEqDiags(self, UnlabeledDiagram):$/;"	m	class:free_energy	file:
__GetInteractionMom	diagram/polar.py	/^    def __GetInteractionMom(self, Permutation, Mom):$/;"	m	class:polar	file:
__InterCounterTerms	diagram/polar.py	/^    def __InterCounterTerms(self, CounterTermOrder):$/;"	m	class:polar	file:
__IsDelaying	src/utility/abort.h	/^  bool __IsDelaying;$/;"	m	class:InterruptHandler
__IsReducibile	diagram/polar.py	/^    def __IsReducibile(self, Permutation, LoopBasis, vertype, gtype, IsSelfEnergy, IsSysPolar):$/;"	m	class:polar	file:
__ReNameDiag	diagram/free_energy.py	/^    def __ReNameDiag(self, DiagListInput, Initial=0):$/;"	m	class:free_energy	file:
__STRICT_ANSI__	src/utility/fmt/posix.h	13;"	d
__SigmaCounterTerms	diagram/polar.py	/^    def __SigmaCounterTerms(self, CounterTermOrder):$/;"	m	class:polar	file:
__Signal	src/utility/abort.cpp	/^int InterruptHandler::__Signal = -1;$/;"	m	class:InterruptHandler	file:
__Signal	src/utility/abort.h	/^  static int __Signal;$/;"	m	class:InterruptHandler
__SignalHandler	src/utility/abort.cpp	/^void InterruptHandler::__SignalHandler(int signum)$/;"	f	class:InterruptHandler
__VerBasis	diagram/polar.py	/^    def __VerBasis(self, index):$/;"	m	class:polar	file:
__bubble2D	bubble.py	/^def __bubble2D(k, q, Dim, Beta, Spin, Kf, mur):$/;"	f	file:
__bubble3D	bubble.py	/^def __bubble3D(k, q, Dim, Beta, Spin, Kf, mur):$/;"	f	file:
__enter__	diagram/logger.py	/^    def __enter__(self):$/;"	m	class:DelayedInterrupt	file:
__exit__	diagram/logger.py	/^    def __exit__(self, type, value, traceback):$/;"	m	class:DelayedInterrupt	file:
__init__	IO.py	/^    def __init__(self, D, Spin):$/;"	m	class:param
__init__	diagram/diagram.py	/^    def __init__(self, order):$/;"	m	class:diagram
__init__	diagram/free_energy.py	/^    def __init__(self, Order):$/;"	m	class:free_energy
__init__	diagram/polar.py	/^    def __init__(self, Order):$/;"	m	class:polar
__init__	diagram/unionfind.py	/^    def __init__(self, n):$/;"	m	class:UnionFind
__sput	src/utility/sput.h	/^} __sput;$/;"	v	typeref:struct:sput
__timer_H_	src/utility/timer.h	7;"	d
__uniformbubble	bubble.py	/^def __uniformbubble(e, Dim, Beta, Spin, Ef, mur):$/;"	f	file:
_a	src/utility/fmt/format.h	/^operator"" _a(const char *s, std::size_t) { return {s}; }$/;"	f	namespace:literals
_a	src/utility/fmt/format.h	/^operator"" _a(const wchar_t *s, std::size_t) { return {s}; }$/;"	f	namespace:literals
_eng	src/utility/rng.h	/^    std::mt19937 _eng;$/;"	m	class:RandomFactory
_findCaseInsensitive	src/diagram.cpp	/^size_t _findCaseInsensitive(std::string data, std::string toSearch,$/;"	f
_finite	src/utility/fmt/format.h	/^inline dummy_int _finite(...) { return dummy_int(); }$/;"	f	namespace:internal
_format	src/utility/fmt/format.h	/^FMT_CONSTEXPR internal::udl_formatter<Char, CHARS...> operator""_format() {$/;"	f	namespace:literals
_isnan	src/utility/fmt/format.h	/^inline dummy_int _isnan(...) { return dummy_int(); }$/;"	f	namespace:internal
_sput_check_failed	src/utility/sput.h	135;"	d
_sput_check_succeeded	src/utility/sput.h	143;"	d
_sput_die_unless_initialized	src/utility/sput.h	117;"	d
_sput_die_unless_suite_set	src/utility/sput.h	123;"	d
_sput_die_unless_test_set	src/utility/sput.h	129;"	d
_u	src/utility/fmt/format.h	/^inline u8string_view operator"" _u(const char *s, std::size_t n) {$/;"	f	namespace:literals
_wrap_with	color.py	/^def _wrap_with(code):$/;"	f
_wrap_with	diagram/color.py	/^def _wrap_with(code):$/;"	f
abs_value	src/utility/fmt/format.h	/^      unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer::bin_writer
abs_value	src/utility/fmt/format.h	/^      unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer::dec_writer
abs_value	src/utility/fmt/format.h	/^      unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer::num_writer
abs_value	src/utility/fmt/format.h	/^    unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer
acc_time	src/utility/timer.h	/^    double acc_time;$/;"	m	class:timer
add_delimiter_spaces	src/utility/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_range
add_delimiter_spaces	src/utility/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_tuple
add_prepostfix_space	src/utility/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_range
add_prepostfix_space	src/utility/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_tuple
add_thousands_sep	src/utility/fmt/format.h	/^  explicit add_thousands_sep(basic_string_view<Char> sep)$/;"	f	class:internal::add_thousands_sep
add_thousands_sep	src/utility/fmt/format.h	/^class add_thousands_sep {$/;"	c	namespace:internal
advance_to	src/utility/fmt/core.h	/^  FMT_CONSTEXPR void advance_to(iterator it) {$/;"	f	class:basic_parse_context
advance_to	src/utility/fmt/core.h	/^  void advance_to(iterator it) { out_ = it; }$/;"	f	class:internal::context_base
align	src/utility/fmt/format.h	/^  FMT_CONSTEXPR alignment align() const { return align_; }$/;"	f	struct:align_spec
align_	src/utility/fmt/format.h	/^  alignment align_;$/;"	m	struct:align_spec
align_spec	src/utility/fmt/format.h	/^  FMT_CONSTEXPR align_spec() : width_(0), fill_(' '), align_(ALIGN_DEFAULT) {}$/;"	f	struct:align_spec
align_spec	src/utility/fmt/format.h	/^struct align_spec {$/;"	s
alignment	src/utility/fmt/format.h	/^enum alignment {$/;"	g
allocate	src/utility/fmt/format.h	/^typename Allocator::value_type *allocate(Allocator& alloc, std::size_t n) {$/;"	f	namespace:internal
append	src/utility/fmt/format-inl.h	/^  void append(char c) { data[size++] = c; }$/;"	f	struct:internal::prettify_handler
append	src/utility/fmt/format-inl.h	/^  void append(char) { ++size; }$/;"	f	struct:internal::char_counter
append	src/utility/fmt/format-inl.h	/^  void append(ptrdiff_t n, char c) {$/;"	f	struct:internal::prettify_handler
append	src/utility/fmt/format-inl.h	/^  void append(ptrdiff_t n, char) { size += n; }$/;"	f	struct:internal::char_counter
append	src/utility/fmt/format.h	/^void basic_buffer<T>::append(const U *begin, const U *end) {$/;"	f	class:internal::basic_buffer
arg	src/utility/fmt/core.h	/^    basic_format_arg<Context> arg;$/;"	m	struct:internal::arg_map::entry
arg	src/utility/fmt/core.h	/^  basic_format_arg<Context> arg(unsigned id) const { return args_.get(id); }$/;"	f	class:internal::context_base
arg	src/utility/fmt/format.h	/^  basic_format_arg<Context> arg;$/;"	m	struct:format_handler
arg_	src/utility/fmt/printf.h	/^  basic_format_arg<Context> &arg_;$/;"	m	class:internal::arg_converter
arg_	src/utility/fmt/printf.h	/^  basic_format_arg<Context> &arg_;$/;"	m	class:internal::char_converter
arg_converter	src/utility/fmt/printf.h	/^  arg_converter(basic_format_arg<Context> &arg, Char type)$/;"	f	class:internal::arg_converter
arg_converter	src/utility/fmt/printf.h	/^class arg_converter: public function<void> {$/;"	c	namespace:internal
arg_formatter	src/utility/fmt/format.h	/^  arg_formatter(context_type &ctx, format_specs &spec)$/;"	f	class:arg_formatter
arg_formatter	src/utility/fmt/format.h	/^  explicit arg_formatter(context_type &ctx, format_specs *spec = FMT_NULL)$/;"	f	class:arg_formatter
arg_formatter	src/utility/fmt/format.h	/^class arg_formatter:$/;"	c
arg_formatter_base	src/utility/fmt/format.h	/^  arg_formatter_base(Range r, format_specs *s, locale_ref loc)$/;"	f	class:internal::arg_formatter_base
arg_formatter_base	src/utility/fmt/format.h	/^class arg_formatter_base {$/;"	c	namespace:internal
arg_id_	src/utility/fmt/format.h	/^  unsigned arg_id_;$/;"	m	class:internal::format_string_checker
arg_join	src/utility/fmt/format.h	/^  arg_join(It begin, It end, basic_string_view<Char> sep)$/;"	f	struct:arg_join
arg_join	src/utility/fmt/format.h	/^struct arg_join {$/;"	s
arg_map	src/utility/fmt/core.h	/^  arg_map() : map_(FMT_NULL), size_(0) {}$/;"	f	class:internal::arg_map
arg_map	src/utility/fmt/core.h	/^class arg_map {$/;"	c	namespace:internal
arg_ref	src/utility/fmt/format.h	/^  FMT_CONSTEXPR arg_ref() : kind(NONE), index(0) {}$/;"	f	struct:internal::arg_ref
arg_ref	src/utility/fmt/format.h	/^  FMT_CONSTEXPR explicit arg_ref(unsigned index) : kind(INDEX), index(index) {}$/;"	f	struct:internal::arg_ref
arg_ref	src/utility/fmt/format.h	/^  explicit arg_ref(basic_string_view<Char> nm) : kind(NAME) {$/;"	f	struct:internal::arg_ref
arg_ref	src/utility/fmt/format.h	/^struct arg_ref {$/;"	s	namespace:internal
arg_ref_type	src/utility/fmt/chrono.h	/^    typedef internal::arg_ref<Char> arg_ref_type;$/;"	t	struct:formatter::spec_handler
arg_ref_type	src/utility/fmt/format.h	/^  typedef arg_ref<char_type> arg_ref_type;$/;"	t	class:internal::dynamic_specs_handler
arg_type_	src/utility/fmt/format.h	/^  internal::type arg_type_;$/;"	m	class:internal::specs_checker
args	src/utility/fmt/core.h	/^  basic_format_args<Context> args() const { return args_; } \/\/ DEPRECATED!$/;"	f	class:internal::context_base
args_	src/utility/fmt/core.h	/^  basic_format_args<Context> args_;$/;"	m	class:internal::context_base
as_named_arg	src/utility/fmt/core.h	/^  const named_arg_base<char_type> &as_named_arg() {$/;"	f	class:internal::value
auto_id	src/utility/fmt/format.h	/^struct auto_id {};$/;"	s	namespace:internal
ax	tool/plt_lambda.py	/^ax = ax.reshape(-1)$/;"	v
ax1	tool/plt_lambda.py	/^    ax1 = ax[index]$/;"	v
back_insert_range	src/utility/fmt/format.h	/^  back_insert_range(Container &c): base(std::back_inserter(c)) {}$/;"	f	class:back_insert_range
back_insert_range	src/utility/fmt/format.h	/^  back_insert_range(typename base::iterator it): base(it) {}$/;"	f	class:back_insert_range
back_insert_range	src/utility/fmt/format.h	/^class back_insert_range:$/;"	c
base	src/utility/fmt/core.h	/^  typedef internal::context_base<OutputIt, basic_format_context, Char> base;$/;"	t	class:basic_format_context
base	src/utility/fmt/format.h	/^  OutputIt base() const { return out_; }$/;"	f	class:internal::truncating_iterator_base
base	src/utility/fmt/format.h	/^  typedef internal::arg_formatter_base<Range> base;$/;"	t	class:arg_formatter
base	src/utility/fmt/format.h	/^  typedef output_range<std::back_insert_iterator<Container>> base;$/;"	t	class:back_insert_range
base	src/utility/fmt/printf.h	/^  typedef internal::arg_formatter_base<Range> base;$/;"	t	class:printf_arg_formatter
base	src/utility/fmt/printf.h	/^  typedef internal::context_base<OutputIt, basic_printf_context, Char> base;$/;"	t	class:basic_printf_context
basic_buffer	src/utility/fmt/core.h	/^class basic_buffer {$/;"	c	namespace:internal
basic_cstring_view	src/utility/fmt/posix.h	/^  basic_cstring_view(const Char *s) : data_(s) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	src/utility/fmt/posix.h	/^  basic_cstring_view(const std::basic_string<Char> &s) : data_(s.c_str()) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	src/utility/fmt/posix.h	/^class basic_cstring_view {$/;"	c
basic_format_arg	src/utility/fmt/core.h	/^  FMT_CONSTEXPR basic_format_arg() : type_(internal::none_type) {}$/;"	f	class:basic_format_arg
basic_format_arg	src/utility/fmt/core.h	/^class basic_format_arg {$/;"	c
basic_format_context	src/utility/fmt/core.h	/^  basic_format_context(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:basic_format_context
basic_format_context	src/utility/fmt/core.h	/^class basic_format_context :$/;"	c
basic_format_specs	src/utility/fmt/format.h	/^  FMT_CONSTEXPR basic_format_specs() {}$/;"	f	struct:basic_format_specs
basic_format_specs	src/utility/fmt/format.h	/^struct basic_format_specs : align_spec, core_format_specs {$/;"	s
basic_memory_buffer	src/utility/fmt/format.h	/^  basic_memory_buffer(basic_memory_buffer &&other) {$/;"	f	class:basic_memory_buffer
basic_memory_buffer	src/utility/fmt/format.h	/^  explicit basic_memory_buffer(const Allocator &alloc = Allocator())$/;"	f	class:basic_memory_buffer
basic_memory_buffer	src/utility/fmt/format.h	/^class basic_memory_buffer: private Allocator, public internal::basic_buffer<T> {$/;"	c
basic_parse_context	src/utility/fmt/core.h	/^  explicit FMT_CONSTEXPR basic_parse_context($/;"	f	class:basic_parse_context
basic_parse_context	src/utility/fmt/core.h	/^class basic_parse_context : private ErrorHandler {$/;"	c
basic_printf_context	src/utility/fmt/printf.h	/^  basic_printf_context(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:basic_printf_context
basic_printf_context	src/utility/fmt/printf.h	/^class basic_printf_context :$/;"	c
basic_printf_context_t	src/utility/fmt/printf.h	/^struct basic_printf_context_t {$/;"	s
basic_string_view	src/utility/fmt/core.h	/^  basic_string_view(const Char *s)$/;"	f	class:basic_string_view
basic_string_view	src/utility/fmt/core.h	/^class basic_string_view {$/;"	c
basic_writer	src/utility/fmt/format.h	/^  explicit basic_writer($/;"	f	class:basic_writer
basic_writer	src/utility/fmt/format.h	/^class basic_writer {$/;"	c
begin	src/utility/fmt/core.h	/^  FMT_CONSTEXPR iterator begin() const { return data_; }$/;"	f	class:basic_string_view
begin	src/utility/fmt/core.h	/^  iterator begin() { return out_; }  \/\/ deprecated$/;"	f	class:internal::context_base
begin	src/utility/fmt/format.h	/^  It begin;$/;"	m	struct:arg_join
begin	src/utility/fmt/format.h	/^  OutputIt begin() const { return it_; }$/;"	f	class:output_range
begin	src/utility/vector.h	/^  const T *begin() const { return _Array; }$/;"	f	class:Vec
beta	forkE.py	/^    beta = beta0\/EF$/;"	v
beta	polar_eqTime.py	/^        beta = float(para[1])$/;"	v
beta	polar_lam.py	/^    beta = float(para[1])$/;"	v
beta	polar_lam_order.py	/^    beta = float(para[1])$/;"	v
beta	send.py	/^    beta = float(para[1])$/;"	v
beta	tool/plt_lambda.py	/^    beta = float(para[1])$/;"	v
beta	tool/plt_polar_diag.py	/^    beta = float(para[1])$/;"	v
beta	tool/plt_polar_lam.py	/^    beta = float(para[1])$/;"	v
beta0	forkE.py	/^    beta0 = float(beta0)$/;"	v
betas	tool/plt_polar_diag.py	/^betas = np.array(Polar_beta[(1,0,0,0)])[:,0]$/;"	v
bin_writer	src/utility/fmt/format.h	/^    struct bin_writer {$/;"	s	struct:basic_writer::int_writer
bit_cast	src/utility/fmt/format.h	/^inline Dest bit_cast(const Source& source) {$/;"	f	namespace:internal
black	src/utility/fmt/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
blackhole_	src/utility/fmt/format.h	/^  mutable T blackhole_;$/;"	m	class:internal::counting_iterator
blackhole_	src/utility/fmt/format.h	/^  mutable typename traits::value_type blackhole_;$/;"	m	class:internal::truncating_iterator
blue	color.py	/^blue = _wrap_with('34')$/;"	v
blue	diagram/color.py	/^blue = _wrap_with('34')$/;"	v
blue	src/utility/fmt/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
bool_type	src/utility/fmt/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
bose	src/vertex.h	/^class bose {$/;"	c	namespace:diag
buf	src/utility/fmt/format-inl.h	/^  buffer &buf;$/;"	m	struct:internal::prettify_handler
buffer	src/utility/fmt/core.h	/^typedef basic_buffer<char> buffer;$/;"	t	namespace:internal
buffer	src/utility/fmt/format.h	/^    internal::buffer &buffer;$/;"	m	struct:basic_writer::double_writer
buffer_	src/utility/fmt/format.h	/^  char *buffer_;$/;"	m	class:internal::decimal_formatter
buffer_	src/utility/fmt/format.h	/^  memory_buffer buffer_;$/;"	m	class:internal::utf16_to_utf8
buffer_	src/utility/fmt/format.h	/^  mutable char buffer_[BUFFER_SIZE];$/;"	m	class:format_int
buffer_	src/utility/fmt/format.h	/^  wmemory_buffer buffer_;$/;"	m	class:internal::utf8_to_utf16
buffer_	src/utility/fmt/ostream.h	/^  basic_buffer<Char> &buffer_;$/;"	m	class:internal::formatbuf
buffer_context	src/utility/fmt/core.h	/^struct buffer_context {$/;"	s
buffered_file	src/utility/fmt/posix.h	/^  explicit buffered_file(FILE *f) : file_(f) {}$/;"	f	class:buffered_file
buffered_file	src/utility/fmt/posix.h	/^class buffered_file {$/;"	c
c_str	src/utility/fmt/format.h	/^  const char *c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf16_to_utf8
c_str	src/utility/fmt/format.h	/^  const char *c_str() const {$/;"	f	class:format_int
c_str	src/utility/fmt/format.h	/^  const wchar_t *c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf8_to_utf16
c_str	src/utility/fmt/posix.h	/^  const Char *c_str() const { return data_; }$/;"	f	class:basic_cstring_view
capacity_	src/utility/fmt/core.h	/^    FMT_NOEXCEPT: ptr_(p), size_(sz), capacity_(cap) {}$/;"	f	class:internal::basic_buffer
capacity_	src/utility/fmt/core.h	/^  basic_buffer(std::size_t sz) FMT_NOEXCEPT: size_(sz), capacity_(sz) {}$/;"	f	class:internal::basic_buffer
capacity_	src/utility/fmt/core.h	/^  std::size_t capacity_;$/;"	m	class:internal::basic_buffer
ch	diagram/logger.py	/^ch = logging.StreamHandler(sys.stdout)$/;"	v
char_converter	src/utility/fmt/printf.h	/^  explicit char_converter(basic_format_arg<Context> &arg) : arg_(arg) {}$/;"	f	class:internal::char_converter
char_converter	src/utility/fmt/printf.h	/^class char_converter: public function<void> {$/;"	c	namespace:internal
char_counter	src/utility/fmt/format-inl.h	/^struct char_counter {$/;"	s	namespace:internal
char_size	src/utility/fmt/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int char_size =$/;"	m	class:internal::fp
char_spec_handler	src/utility/fmt/format.h	/^    char_spec_handler(arg_formatter_base& f, char_type val)$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
char_spec_handler	src/utility/fmt/format.h	/^  struct char_spec_handler : internal::error_handler {$/;"	s	class:internal::arg_formatter_base
char_specs_checker	src/utility/fmt/format.h	/^  FMT_CONSTEXPR char_specs_checker(char type, ErrorHandler eh)$/;"	f	class:internal::char_specs_checker
char_specs_checker	src/utility/fmt/format.h	/^class char_specs_checker : public ErrorHandler {$/;"	c	namespace:internal
char_t	src/utility/fmt/core.h	/^struct char_t {$/;"	s	namespace:internal
char_traits	src/utility/fmt/format.h	/^struct char_traits<char> {$/;"	s	namespace:internal
char_traits	src/utility/fmt/format.h	/^struct char_traits<wchar_t> {$/;"	s	namespace:internal
char_type	src/utility/fmt/chrono.h	/^  typedef typename FormatContext::char_type char_type;$/;"	t	struct:internal::chrono_formatter
char_type	src/utility/fmt/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
char_type	src/utility/fmt/core.h	/^  typedef Char char_type;$/;"	t	class:basic_format_context
char_type	src/utility/fmt/core.h	/^  typedef Char char_type;$/;"	t	class:basic_parse_context
char_type	src/utility/fmt/core.h	/^  typedef Char char_type;$/;"	t	class:basic_string_view
char_type	src/utility/fmt/core.h	/^  typedef Char char_type;$/;"	t	class:internal::context_base
char_type	src/utility/fmt/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:basic_format_arg
char_type	src/utility/fmt/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:internal::arg_map
char_type	src/utility/fmt/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:internal::value
char_type	src/utility/fmt/core.h	/^struct dummy_string_view { typedef void char_type; };$/;"	t	struct:internal::dummy_string_view
char_type	src/utility/fmt/format.h	/^  typedef Char char_type;$/;"	t	class:internal::add_thousands_sep
char_type	src/utility/fmt/format.h	/^  typedef char char_type;$/;"	t	struct:internal::no_thousands_sep
char_type	src/utility/fmt/format.h	/^  typedef char8_t char_type;$/;"	t	class:u8string_view
char_type	src/utility/fmt/format.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:internal::specs_handler
char_type	src/utility/fmt/format.h	/^  typedef typename ParseContext::char_type char_type;$/;"	t	class:internal::dynamic_specs_handler
char_type	src/utility/fmt/format.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:arg_formatter
char_type	src/utility/fmt/format.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:basic_writer
char_type	src/utility/fmt/format.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:internal::arg_formatter_base
char_type	src/utility/fmt/printf.h	/^  typedef Char char_type;$/;"	t	class:basic_printf_context
char_type	src/utility/fmt/printf.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:printf_arg_formatter
char_writer	src/utility/fmt/format.h	/^  struct char_writer {$/;"	s	class:internal::arg_formatter_base
check	src/utility/sput.h	/^    } check;$/;"	m	struct:sput	typeref:struct:sput::sput_check
check	src/utility/timer.cpp	/^bool timer::check(time_t Interval)$/;"	f	class:timer
check	src/utility/timer.cpp	/^void timer::check(const char* msg)$/;"	f	class:timer
check_arg_id	src/utility/fmt/core.h	/^  FMT_CONSTEXPR bool check_arg_id(unsigned) {$/;"	f	class:basic_parse_context
check_arg_id	src/utility/fmt/core.h	/^  void check_arg_id(basic_string_view<Char>) {}$/;"	f	class:basic_parse_context
check_arg_id	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void check_arg_id() {$/;"	f	class:internal::format_string_checker
check_format_string	src/utility/fmt/format.h	/^    check_format_string(S format_str) {$/;"	f	namespace:internal
check_pointer_type_spec	src/utility/fmt/format.h	/^FMT_CONSTEXPR void check_pointer_type_spec(Char spec, ErrorHandler &&eh) {$/;"	f	namespace:internal
check_sign	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void check_sign() {$/;"	f	class:internal::specs_checker
check_string_type_spec	src/utility/fmt/format.h	/^FMT_CONSTEXPR void check_string_type_spec(Char spec, ErrorHandler &&eh) {$/;"	f	namespace:internal
checked	src/utility/fmt/format.h	/^struct checked { typedef stdext::checked_array_iterator<T*> type; };$/;"	s	namespace:internal
checks	src/utility/sput.h	/^        unsigned long checks;$/;"	m	struct:sput::sput_overall
checks	src/utility/sput.h	/^        unsigned long checks;$/;"	m	struct:sput::sput_suite
chrono_format_checker	src/utility/fmt/chrono.h	/^struct chrono_format_checker {$/;"	s	namespace:internal
chrono_formatter	src/utility/fmt/chrono.h	/^  explicit chrono_formatter(FormatContext &ctx, OutputIt o)$/;"	f	struct:internal::chrono_formatter
chrono_formatter	src/utility/fmt/chrono.h	/^struct chrono_formatter {$/;"	s	namespace:internal
clear	src/utility/fmt/core.h	/^  void clear() { size_ = 0; }$/;"	f	class:internal::basic_buffer
clz	src/utility/fmt/format.h	/^inline uint32_t clz(uint32_t x) {$/;"	f	namespace:internal
clzll	src/utility/fmt/format.h	/^inline uint32_t clzll(uint64_t x) {$/;"	f	namespace:internal
color	src/utility/fmt/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	g
compare	src/utility/fmt/core.h	/^  int compare(basic_string_view other) const {$/;"	f	class:basic_string_view
compile_string	src/utility/fmt/core.h	/^struct compile_string {};$/;"	s
compute_boundaries	src/utility/fmt/format-inl.h	/^  void compute_boundaries(fp &lower, fp &upper) const {$/;"	f	class:internal::fp
cond	src/utility/sput.h	/^        const char *cond;$/;"	m	struct:sput::sput_check
conditional	src/utility/fmt/format.h	/^  typedef typename std::conditional<$/;"	t	class:internal::int_traits::std
conditional_helper	src/utility/fmt/ranges.h	/^struct conditional_helper {};$/;"	s	namespace:internal
configuration_	src/utility/logger.h	/^    loggerConf_ configuration_;$/;"	m	class:Logger
configure	src/utility/logger.cpp	/^void Logger::configure(const std::string& outputFile,$/;"	f	class:Logger
configured_	src/utility/logger.h	/^    bool configured_;$/;"	m	class:Logger
const_check	src/utility/fmt/format.h	/^inline T const_check(T value) { return value; }$/;"	f	namespace:internal
const_reference	src/utility/fmt/core.h	/^  typedef const T &const_reference;$/;"	t	class:internal::basic_buffer
const_reference	src/utility/fmt/format.h	/^  typedef const T &const_reference;$/;"	t	class:basic_memory_buffer
container_	src/utility/fmt/core.h	/^  Container &container_;$/;"	m	class:internal::container_buffer
container_buffer	src/utility/fmt/core.h	/^  explicit container_buffer(Container &c)$/;"	f	class:internal::container_buffer
container_buffer	src/utility/fmt/core.h	/^class container_buffer : public basic_buffer<typename Container::value_type> {$/;"	c	namespace:internal
context	src/utility/fmt/chrono.h	/^    basic_parse_context<Char> &context;$/;"	m	struct:formatter::spec_handler
context	src/utility/fmt/chrono.h	/^  FormatContext &context;$/;"	m	struct:internal::chrono_formatter
context	src/utility/fmt/format.h	/^  Context context;$/;"	m	struct:format_handler
context_	src/utility/fmt/format.h	/^  Context &context_;$/;"	m	class:internal::specs_handler
context_	src/utility/fmt/format.h	/^  ParseContext &context_;$/;"	m	class:internal::dynamic_specs_handler
context_	src/utility/fmt/format.h	/^  parse_context_type context_;$/;"	m	class:internal::format_string_checker
context_	src/utility/fmt/printf.h	/^  context_type &context_;$/;"	m	class:printf_arg_formatter
context_base	src/utility/fmt/core.h	/^  context_base(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:internal::context_base
context_base	src/utility/fmt/core.h	/^class context_base {$/;"	c	namespace:internal
context_type	src/utility/fmt/format.h	/^  typedef basic_format_context<typename base::iterator, char_type> context_type;$/;"	t	class:arg_formatter
context_type	src/utility/fmt/printf.h	/^  typedef basic_printf_context<iterator, char_type> context_type;$/;"	t	class:printf_arg_formatter
convert	src/utility/fmt/format-inl.h	/^FMT_FUNC int internal::utf16_to_utf8::convert(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8
convert_arg	src/utility/fmt/printf.h	/^void convert_arg(basic_format_arg<Context> &arg, Char type) {$/;"	f	namespace:internal
convert_to_int	src/utility/fmt/core.h	/^struct convert_to_int: std::integral_constant<$/;"	s
convert_to_int	src/utility/fmt/ostream.h	/^struct convert_to_int<T, Char, void> {$/;"	s
copy	src/utility/fmt/ranges.h	/^void copy(char ch, OutputIterator out) {$/;"	f	namespace:internal
copy	src/utility/fmt/ranges.h	/^void copy(const RangeT &range, OutputIterator out) {$/;"	f	namespace:internal
copy	src/utility/fmt/ranges.h	/^void copy(const char *str, OutputIterator out) {$/;"	f	namespace:internal
copy_str	src/utility/fmt/format.h	/^    copy_str(InputIt begin, InputIt end, OutputIt it) {$/;"	f	namespace:internal
core_format_specs	src/utility/fmt/format.h	/^  FMT_CONSTEXPR core_format_specs() : precision(-1), flags(0), type(0) {}$/;"	f	struct:core_format_specs
core_format_specs	src/utility/fmt/format.h	/^struct core_format_specs {$/;"	s
count	src/utility/fmt/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::counting_iterator
count	src/utility/fmt/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::truncating_iterator_base
count_	src/utility/fmt/format.h	/^  std::size_t count_;$/;"	m	class:internal::counting_iterator
count_	src/utility/fmt/format.h	/^  std::size_t count_;$/;"	m	class:internal::truncating_iterator_base
count_code_points	src/utility/fmt/format-inl.h	/^FMT_FUNC size_t internal::count_code_points(basic_string_view<char8_t> s) {$/;"	f	class:internal
count_code_points	src/utility/fmt/format.h	/^inline size_t count_code_points(basic_string_view<Char> s) { return s.size(); }$/;"	f	namespace:internal
count_digits	src/utility/fmt/format.h	/^    int count_digits() const {$/;"	f	struct:basic_writer::int_writer
count_digits	src/utility/fmt/format.h	/^inline int count_digits(uint32_t n) {$/;"	f	namespace:internal
counting_iterator	src/utility/fmt/format.h	/^  counting_iterator(): count_(0) {}$/;"	f	class:internal::counting_iterator
counting_iterator	src/utility/fmt/format.h	/^class counting_iterator {$/;"	c	namespace:internal
cstring_spec_handler	src/utility/fmt/format.h	/^    cstring_spec_handler(arg_formatter_base &f, const char_type *val)$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
cstring_spec_handler	src/utility/fmt/format.h	/^  struct cstring_spec_handler : internal::error_handler {$/;"	s	class:internal::arg_formatter_base
cstring_type	src/utility/fmt/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
cstring_type_checker	src/utility/fmt/format.h	/^  FMT_CONSTEXPR explicit cstring_type_checker(ErrorHandler eh)$/;"	f	class:internal::cstring_type_checker
cstring_type_checker	src/utility/fmt/format.h	/^class cstring_type_checker : public ErrorHandler {$/;"	c	namespace:internal
cstring_view	src/utility/fmt/posix.h	/^typedef basic_cstring_view<char> cstring_view;$/;"	t
ctx_	src/utility/fmt/format.h	/^  Context &ctx_;$/;"	m	class:internal::custom_formatter
ctx_	src/utility/fmt/format.h	/^  context_type &ctx_;$/;"	m	class:arg_formatter
currentdir	diagram/logger.py	/^currentdir = os.path.dirname(os.path.abspath($/;"	v
custom	src/utility/fmt/core.h	/^    custom_value<Context> custom;$/;"	m	union:internal::value::__anon1
custom_	src/utility/fmt/core.h	/^    internal::custom_value<Context> custom_;$/;"	m	class:basic_format_arg::handle
custom_formatter	src/utility/fmt/format.h	/^  explicit custom_formatter(Context &ctx): ctx_(ctx) {}$/;"	f	class:internal::custom_formatter
custom_formatter	src/utility/fmt/format.h	/^class custom_formatter: public function<bool> {$/;"	c	namespace:internal
custom_type	src/utility/fmt/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
custom_value	src/utility/fmt/core.h	/^struct custom_value {$/;"	s	namespace:internal
cyan	color.py	/^cyan = _wrap_with('36')$/;"	v
cyan	diagram/color.py	/^cyan = _wrap_with('36')$/;"	v
cyan	src/utility/fmt/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
dMu3	polar_eqTime.py	/^    dMu3 = -(s40+s21*dMu2)\/s11$/;"	v
dMu3Err	polar_eqTime.py	/^    dMu3Err = (abs((e40+e21*dMu2)\/(s40+s21*dMu2))+abs(e11\/s11))*abs(dMu3)*2.0$/;"	v
dMu4	polar_eqTime.py	/^    dMu4 = -(s50+s12*dMu2**2+s21*dMu3+s31*dMu2)\/s11$/;"	v
dMu4Err	polar_eqTime.py	/^    dMu4Err = (abs((e50+e12*dMu2**2+e21*dMu3+e31*dMu2) \/$/;"	v
dat	polar_lam.py	/^            dat = np.array([q, Accu[o][0, qi], Accu[o][1, qi], o, lam, beta, rs])$/;"	v
dat	polar_lam_order.py	/^            dat = np.array([q, Each[o][0, qi], Each[o][1, qi], o, lam, beta, rs])$/;"	v
dat	polar_lam_order.py	/^            dat = np.array([q, y[0][qi], y[1][qi], int(key[0]*100+key[1]*10+key[2])])$/;"	v
dat	polar_lam_order.py	/^    dat = np.array([q, BubbleQ[qi,0], BubbleQ[qi,1]])$/;"	v
data	src/utility/fmt/core.h	/^  FMT_CONSTEXPR const Char *data() const { return data_; }$/;"	f	class:basic_string_view
data	src/utility/fmt/format-inl.h	/^  char *data;$/;"	m	struct:internal::prettify_handler
data	src/utility/fmt/format.h	/^  const char *data() const { return str_; }$/;"	f	class:format_int
data	src/utility/fmt/format.h	/^  int data[2];$/;"	m	struct:internal::dummy_int
data	src/utility/vector.h	/^  T *data() { return _Array; }$/;"	f	class:Vec
data_	src/utility/fmt/core.h	/^  const Char *data_;$/;"	m	class:basic_string_view
data_	src/utility/fmt/posix.h	/^  const Char *data_;$/;"	m	class:basic_cstring_view
datefmt	diagram/logger.py	/^                              datefmt='%y\/%m\/%d %H:%M:%S')$/;"	v
deallocate	src/utility/fmt/format.h	/^  void deallocate() {$/;"	f	class:basic_memory_buffer
dec_writer	src/utility/fmt/format.h	/^    struct dec_writer {$/;"	s	struct:basic_writer::int_writer
decimal_formatter	src/utility/fmt/format.h	/^  explicit decimal_formatter(char *buf) : buffer_(buf) {}$/;"	f	class:internal::decimal_formatter
decimal_formatter	src/utility/fmt/format.h	/^class decimal_formatter {$/;"	c	namespace:internal
decimal_formatter_null	src/utility/fmt/format.h	/^  explicit decimal_formatter_null(char *buf) : decimal_formatter(buf) {}$/;"	f	class:internal::decimal_formatter_null
decimal_formatter_null	src/utility/fmt/format.h	/^class decimal_formatter_null : public decimal_formatter {$/;"	c	namespace:internal
decltype	src/utility/fmt/chrono.h	/^      -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	src/utility/fmt/chrono.h	/^      -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	src/utility/fmt/format.h	/^      -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	src/utility/fmt/format.h	/^  auto format(const T &val, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	class:dynamic_formatter
decltype	src/utility/fmt/format.h	/^  auto format(const T &val, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	src/utility/fmt/format.h	/^  auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	class:dynamic_formatter
decltype	src/utility/fmt/format.h	/^FMT_CONSTEXPR auto begin(const C &c) -> decltype(c.begin()) {$/;"	f	namespace:internal
decltype	src/utility/fmt/format.h	/^FMT_CONSTEXPR auto end(const C &c) -> decltype(c.end()) { return c.end(); }$/;"	f	namespace:internal
decltype	src/utility/fmt/ostream.h	/^  auto format(const T &value, Context &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	src/utility/fmt/printf.h	/^  auto format(const T &value, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:printf_formatter
decltype	src/utility/fmt/printf.h	/^  auto parse(ParseContext &ctx) -> decltype(ctx.begin()) { return ctx.begin(); }$/;"	f	struct:printf_formatter
decltype	src/utility/fmt/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	src/utility/fmt/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatting_base
decltype	src/utility/fmt/ranges.h	/^  auto format(const TupleT &values, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	src/utility/fmt/time.h	/^  auto format(const std::tm &tm, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	src/utility/fmt/time.h	/^  auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
delimiter	src/utility/fmt/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_range
delimiter	src/utility/fmt/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_tuple
density	tool/plt_polar_lam.py	/^    density = 3.0\/2\/np.pi\/Para.Rs**3.0$/;"	v
diag	src/diagram.h	/^namespace diag {$/;"	n
diag	src/vertex.h	/^namespace diag {$/;"	n
diag	src/weight.h	/^namespace diag {$/;"	n
diagram	diagram/diagram.py	/^class diagram:$/;"	c
diagram	src/diagram.h	/^struct diagram {$/;"	s	namespace:diag
diagram_H	src/diagram.h	2;"	d
difference_type	src/utility/fmt/format.h	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:internal::counting_iterator
difference_type	src/utility/fmt/format.h	/^  typedef void difference_type;$/;"	t	class:internal::truncating_iterator_base
difference_type	src/utility/fmt/printf.h	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:internal::null_terminating_iterator
digit_index_	src/utility/fmt/format.h	/^  unsigned digit_index_;$/;"	m	class:internal::add_thousands_sep
dismissed_	src/utility/scopeguard.h	/^    bool dismissed_;$/;"	m	class:ScopeGuard
do_check_format_string	src/utility/fmt/format.h	/^FMT_CONSTEXPR bool do_check_format_string($/;"	f	namespace:internal
do_get_arg	src/utility/fmt/core.h	/^  format_arg do_get_arg(unsigned arg_id) {$/;"	f	class:internal::context_base
do_throw	src/utility/fmt/format.h	/^inline void do_throw(const Exception &x) {$/;"	f	namespace:internal
dot	src/utility/vector.h	/^  double dot(const Vec &v2) const {$/;"	f	class:Vec
double_significand_size	src/utility/fmt/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int double_significand_size =$/;"	m	class:internal::fp
double_type	src/utility/fmt/core.h	/^  double_type, long_double_type, last_numeric_type = long_double_type,$/;"	e	enum:internal::type
double_value	src/utility/fmt/core.h	/^    double double_value;$/;"	m	union:internal::value::__anon1
double_writer	src/utility/fmt/format.h	/^  struct double_writer {$/;"	s	class:basic_writer
dummy_int	src/utility/fmt/format.h	/^struct dummy_int {$/;"	s	namespace:internal
dummy_string_view	src/utility/fmt/core.h	/^struct dummy_string_view { typedef void char_type; };$/;"	s	namespace:internal
duration	src/utility/fmt/chrono.h	/^  typedef std::chrono::duration<Rep, Period> duration;$/;"	t	struct:formatter
dynamic_format_specs	src/utility/fmt/format.h	/^struct dynamic_format_specs : basic_format_specs<Char> {$/;"	s	namespace:internal
dynamic_formatter	src/utility/fmt/format.h	/^class dynamic_formatter {$/;"	c
dynamic_specs_handler	src/utility/fmt/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler($/;"	f	class:internal::dynamic_specs_handler
dynamic_specs_handler	src/utility/fmt/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler(const dynamic_specs_handler &other)$/;"	f	class:internal::dynamic_specs_handler
dynamic_specs_handler	src/utility/fmt/format.h	/^class dynamic_specs_handler :$/;"	c	namespace:internal
e	src/utility/fmt/format-inl.h	/^  int e;$/;"	m	class:internal::fp
elapsed_time	src/utility/timer.cpp	/^double timer::elapsed_time()$/;"	f	class:timer
end	src/utility/fmt/core.h	/^  FMT_CONSTEXPR iterator end() const { return data_ + size_; }$/;"	f	class:basic_string_view
end	src/utility/fmt/format.h	/^  It end;$/;"	m	struct:arg_join
end	src/utility/sput.h	/^        time_t end;$/;"	m	struct:sput::sput_time
end	src/utility/vector.h	/^  const T *end() const { return _Array + D; }$/;"	f	class:Vec
end_	src/utility/fmt/printf.h	/^  const Char *end_;$/;"	m	class:internal::null_terminating_iterator
end_precision	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void end_precision() {$/;"	f	class:internal::specs_checker
end_precision	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void end_precision() {}$/;"	f	class:internal::specs_setter
entry	src/utility/fmt/core.h	/^  struct entry {$/;"	s	class:internal::arg_map
eps	forkE.py	/^    eps = 1.$/;"	v
eps0	src/utility/utility.h	/^const double eps0 = 1.0e-9;$/;"	v
error_code	src/utility/fmt/format.h	/^  int error_code() const { return error_code_; }$/;"	f	class:system_error
error_code	src/utility/fmt/posix.h	/^class error_code {$/;"	c
error_code_	src/utility/fmt/format.h	/^  int error_code_;$/;"	m	class:system_error
error_handler	src/utility/fmt/core.h	/^  FMT_CONSTEXPR ErrorHandler error_handler() const { return *this; }$/;"	f	class:basic_parse_context
error_handler	src/utility/fmt/core.h	/^  FMT_CONSTEXPR error_handler() {}$/;"	f	struct:internal::error_handler
error_handler	src/utility/fmt/core.h	/^  FMT_CONSTEXPR error_handler(const error_handler &) {}$/;"	f	struct:internal::error_handler
error_handler	src/utility/fmt/core.h	/^  internal::error_handler error_handler() {$/;"	f	class:internal::context_base
error_handler	src/utility/fmt/core.h	/^struct error_handler {$/;"	s	namespace:internal
execute	send.py	/^    execute = "feyncalc"+title+".exe"$/;"	v
f	src/utility/fmt/chrono.h	/^    formatter &f;$/;"	m	struct:formatter::spec_handler
f	src/utility/fmt/format-inl.h	/^  significand_type f;$/;"	m	class:internal::fp
f	src/utility/fmt/format.h	/^    F f;$/;"	m	struct:basic_writer::padded_int_writer
f2	forkE.py	/^        f2 = -4*q\/(q**2+l2)$/;"	v
f2	forkE.py	/^        f2 = -4*q\/(q**2+lam**2)$/;"	v
f2	forkE.py	/^        f2 = np.log(((k-q)**2+l2)\/((k+q)**2+l2))$/;"	v
f2	forkE.py	/^        f2 = np.log(((k-q)**2+lam**2)\/((k+q)**2+lam**2))$/;"	v
fabs	src/utility/utility.cpp	/^double fabs(double x) { return ((x >= 0.0) ? x : -x); }$/;"	f
fd_	src/utility/fmt/posix.h	/^  file(file &&other) FMT_NOEXCEPT : fd_(other.fd_) {$/;"	f	class:file
fd_	src/utility/fmt/posix.h	/^  int fd_;  \/\/ File descriptor.$/;"	m	class:file
ferm	forkE.py	/^def ferm(x,beta):$/;"	f
ferm_0T	forkE.py	/^def ferm_0T(x):$/;"	f
ferm_density	forkE.py	/^def ferm_density(x):$/;"	f
fermi	src/vertex.cpp	/^fermi::fermi() {$/;"	f	class:fermi
fermi	src/vertex.h	/^class fermi {$/;"	c	namespace:diag
fh	diagram/logger.py	/^fh = logging.FileHandler(os.path.join(workspace, 'diagram.log'))$/;"	v
file	src/utility/fmt/posix.h	/^  explicit file(int fd) : fd_(fd) {}$/;"	f	class:file
file	src/utility/fmt/posix.h	/^class file {$/;"	c
fileVerbosityLevel_	src/utility/logger.h	/^    unsigned int fileVerbosityLevel_;$/;"	m	class:Logger
file_	src/utility/fmt/posix.h	/^  FILE *file_;$/;"	m	class:buffered_file
file_	src/utility/fmt/posix.h	/^  buffered_file() FMT_NOEXCEPT : file_(FMT_NULL) {}$/;"	f	class:buffered_file
file_	src/utility/fmt/posix.h	/^  buffered_file(buffered_file &&other) FMT_NOEXCEPT : file_(other.file_) {$/;"	f	class:buffered_file
file_off	src/utility/logger.h	/^    static const loggerConf file_off = L_file_;$/;"	m	class:Logger
file_on	src/utility/logger.h	/^    static const loggerConf file_on = L_nofile_;$/;"	m	class:Logger
filename	forkE.py	/^    filename = 'data\/sigma3D_beta{0}_rs{1}_lam{2}.txt'.format(beta0,rs,lam)$/;"	v
filename	forkE.py	/^    filename = 'data\/sigma_beta{0}_rs{1}.txt'.format(beta0,rs)$/;"	v
filename	forkE.py	/^    filename = 'sigma\/sigma3D_beta{0}_rs{1}_lam{2}.txt'.format(beta0,rs,lam)$/;"	v
filename	polar_eqTime.py	/^    filename = Para.DataFolder+"_freq\/dMu_beta{0}_rs{1}_lam{2}".format(beta,rs,lam)$/;"	v
fill	src/utility/fmt/format-inl.h	/^struct fill {$/;"	s	namespace:internal
fill	src/utility/fmt/format.h	/^    char_type fill;$/;"	m	struct:basic_writer::padded_int_writer
fill	src/utility/fmt/format.h	/^  FMT_CONSTEXPR wchar_t fill() const { return fill_; }$/;"	f	struct:align_spec
fill_	src/utility/fmt/format.h	/^  wchar_t fill_;$/;"	m	struct:align_spec
find	diagram/unionfind.py	/^    def find(self, node):$/;"	m	class:UnionFind
find	src/utility/fmt/core.h	/^  basic_format_arg<Context> find(basic_string_view<char_type> name) const {$/;"	f	class:internal::arg_map
find	src/utility/fmt/format.h	/^FMT_CONSTEXPR bool find(Ptr first, Ptr last, T value, Ptr &out) {$/;"	f	namespace:internal
find	src/utility/fmt/format.h	/^inline bool find<false, char>($/;"	f	namespace:internal
fits_in_int	src/utility/fmt/printf.h	/^  static bool fits_in_int(T value) {$/;"	f	struct:internal::int_checker
fits_in_int	src/utility/fmt/printf.h	/^  static bool fits_in_int(bool) { return true; }$/;"	f	struct:internal::int_checker
fits_in_int	src/utility/fmt/printf.h	/^  static bool fits_in_int(int) { return true; }$/;"	f	struct:internal::int_checker
fixQ	tool/plt_polar_lam.py	/^fixQ = [2.0, 3.0, 4.0, 4.5, 5.0]$/;"	v
fixed	src/utility/fmt/format-inl.h	/^  bool fixed;$/;"	m	struct:internal::gen_digits_params
flags	src/utility/fmt/format.h	/^  uint_least8_t flags;$/;"	m	struct:core_format_specs
float_spec_handler	src/utility/fmt/format.h	/^  explicit float_spec_handler(char t) : type(t), upper(false) {}$/;"	f	struct:float_spec_handler
float_spec_handler	src/utility/fmt/format.h	/^struct float_spec_handler {$/;"	s
float_type_checker	src/utility/fmt/format.h	/^  FMT_CONSTEXPR explicit float_type_checker(ErrorHandler eh)$/;"	f	class:internal::float_type_checker
float_type_checker	src/utility/fmt/format.h	/^class float_type_checker : private ErrorHandler {$/;"	c	namespace:internal
fmt	src/utility/fmt/format.h	3540;"	d
fname	send.py	/^    fname = "beta{0}_rs{1}_lam{2}".format(beta,rs,lam)$/;"	v
fname	tool/plt_lambda.py	/^fname = 'Data_Polar\/polar_beta{0:3.1f}_rs{1:3.1f}_o{2}.dat'.format(beta, rs, order)$/;"	v
fname	tool/plt_lambda.py	/^fname = 'polar0_beta{0:.1f}_rs{1:.1f}.txt'.format(beta,rs)$/;"	v
fname	tool/plt_polar_lam.py	/^    fname = ".\/Data_Polar\/polar_beta{0}_rs{1}_o1.dat".format(beta,rs)$/;"	v
for_each	src/utility/fmt/ranges.h	/^void for_each(Tuple &&tup, F &&f) {$/;"	f	namespace:internal
fork	forkE.py	/^    fork = []$/;"	v
forkSigma	forkE.py	/^    forkSigma=[]$/;"	v
forkSigma	forkE.py	/^    forkSigma=np.zeros(MAXBIN+1)$/;"	v
format	src/utility/fmt/core.h	/^    void format(Context &ctx) const { custom_.format(custom_.value, ctx); }$/;"	f	class:basic_format_arg::handle
format	src/utility/fmt/core.h	/^  void (*format)(const void *arg, Context &ctx);$/;"	m	struct:internal::custom_value
format	src/utility/fmt/locale.h	/^inline std::basic_string<FMT_CHAR(S)> format($/;"	f
format	src/utility/fmt/printf.h	/^void basic_printf_context<OutputIt, Char, AF>::format() {$/;"	f	class:basic_printf_context
format	src/utility/fmt/ranges.h	/^  typename FormatContext::iterator format($/;"	f	struct:formatter
format_arg	src/utility/fmt/core.h	/^  typedef basic_format_arg<Context> format_arg;$/;"	t	class:internal::context_base
format_arg	src/utility/fmt/core.h	/^  typedef typename base::format_arg format_arg;$/;"	t	class:basic_format_context
format_arg	src/utility/fmt/printf.h	/^  typedef typename base::format_arg format_arg;$/;"	t	class:basic_printf_context
format_arg_store	src/utility/fmt/core.h	/^class format_arg_store {$/;"	c
format_args_t	src/utility/fmt/format.h	/^struct format_args_t {$/;"	s
format_context	src/utility/fmt/core.h	/^typedef buffer_context<char>::type format_context;$/;"	t
format_context_t	src/utility/fmt/format.h	/^struct format_context_t { typedef basic_format_context<OutputIt, Char> type; };$/;"	s
format_custom_arg	src/utility/fmt/core.h	/^  static void format_custom_arg(const void *arg, Context &ctx) {$/;"	f	class:internal::value
format_decimal	src/utility/fmt/format.h	/^  char *format_decimal(unsigned long long value) {$/;"	f	class:format_int
format_decimal	src/utility/fmt/format.h	/^inline Char *format_decimal(Char *buffer, UInt value, int num_digits,$/;"	f	namespace:internal
format_decimal	src/utility/fmt/format.h	/^inline It format_decimal(It out, UInt value, int num_digits) {$/;"	f	namespace:internal
format_decimal	src/utility/fmt/format.h	/^inline Iterator format_decimal($/;"	f	namespace:internal
format_decimal	src/utility/fmt/format.h	/^inline void format_decimal(char *&buffer, T value) {$/;"	f
format_each	src/utility/fmt/ranges.h	/^  struct format_each {$/;"	s	struct:formatter
format_error	src/utility/fmt/format.h	/^  explicit format_error(const char *message)$/;"	f	class:format_error
format_error	src/utility/fmt/format.h	/^  explicit format_error(const std::string &message)$/;"	f	class:format_error
format_error	src/utility/fmt/format.h	/^class format_error : public std::runtime_error {$/;"	c
format_float	src/utility/fmt/format-inl.h	/^int char_traits<char>::format_float($/;"	f	class:internal::char_traits
format_float	src/utility/fmt/format-inl.h	/^int char_traits<wchar_t>::format_float($/;"	f	class:internal::char_traits
format_handler	src/utility/fmt/format.h	/^  format_handler(range r, basic_string_view<Char> str,$/;"	f	struct:format_handler
format_handler	src/utility/fmt/format.h	/^struct format_handler : internal::error_handler {$/;"	s
format_int	src/utility/fmt/format.h	/^  explicit format_int(int value) { format_signed(value); }$/;"	f	class:format_int
format_int	src/utility/fmt/format.h	/^  explicit format_int(long long value) { format_signed(value); }$/;"	f	class:format_int
format_int	src/utility/fmt/format.h	/^  explicit format_int(long value) { format_signed(value); }$/;"	f	class:format_int
format_int	src/utility/fmt/format.h	/^  explicit format_int(unsigned long long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	src/utility/fmt/format.h	/^  explicit format_int(unsigned long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	src/utility/fmt/format.h	/^  explicit format_int(unsigned value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	src/utility/fmt/format.h	/^class format_int {$/;"	c
format_localized	src/utility/fmt/chrono.h	/^  void format_localized(const tm &time, const char *format) {$/;"	f	struct:internal::chrono_formatter
format_parse_context	src/utility/fmt/core.h	/^typedef basic_parse_context<char> format_parse_context;$/;"	t
format_signed	src/utility/fmt/format.h	/^  void format_signed(long long value) {$/;"	f	class:format_int
format_specs	src/utility/fmt/format.h	/^  typedef basic_format_specs<char_type> format_specs;$/;"	t	class:basic_writer
format_specs	src/utility/fmt/format.h	/^  typedef basic_format_specs<char_type> format_specs;$/;"	t	class:internal::arg_formatter_base
format_specs	src/utility/fmt/format.h	/^  typedef typename base::format_specs format_specs;$/;"	t	class:arg_formatter
format_specs	src/utility/fmt/format.h	/^typedef basic_format_specs<char> format_specs;$/;"	t
format_specs	src/utility/fmt/printf.h	/^  typedef basic_format_specs<Char> format_specs;$/;"	t	class:internal::printf_width_handler
format_specs	src/utility/fmt/printf.h	/^  typedef basic_format_specs<char_type> format_specs;$/;"	t	class:basic_printf_context
format_specs	src/utility/fmt/printf.h	/^  typedef typename base::format_specs format_specs;$/;"	t	class:printf_arg_formatter
format_str	src/utility/fmt/chrono.h	/^  mutable basic_string_view<Char> format_str;$/;"	m	struct:formatter
format_str_	src/utility/fmt/core.h	/^  basic_string_view<Char> format_str_;$/;"	m	class:basic_parse_context
format_str_quoted	src/utility/fmt/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const Arg&, $/;"	f	namespace:internal
format_str_quoted	src/utility/fmt/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char) {$/;"	f	namespace:internal
format_str_quoted	src/utility/fmt/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char*) {$/;"	f	namespace:internal
format_str_quoted	src/utility/fmt/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t) {$/;"	f	namespace:internal
format_str_quoted	src/utility/fmt/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t*) {$/;"	f	namespace:internal
format_string_checker	src/utility/fmt/format.h	/^  explicit FMT_CONSTEXPR format_string_checker($/;"	f	class:internal::format_string_checker
format_string_checker	src/utility/fmt/format.h	/^class format_string_checker {$/;"	c	namespace:internal
format_to	src/utility/fmt/format.h	/^    format_to(OutputIt out, const S &format_str, const Args &... args) {$/;"	f
format_to	src/utility/fmt/format.h	/^inline typename buffer_context<Char>::type::iterator format_to($/;"	f
format_to	src/utility/fmt/locale.h	/^    format_to(OutputIt out, const std::locale &loc, const S &format_str,$/;"	f
format_to_n	src/utility/fmt/format.h	/^    format_to_n(OutputIt out, std::size_t n, const S &format_str,$/;"	f
format_to_n_args	src/utility/fmt/format.h	/^struct format_to_n_args {$/;"	s
format_to_n_context	src/utility/fmt/format.h	/^struct format_to_n_context :$/;"	s
format_to_n_result	src/utility/fmt/format.h	/^struct format_to_n_result {$/;"	s
format_type	src/utility/fmt/format.h	/^struct format_type :$/;"	s	namespace:internal
format_uint	src/utility/fmt/format.h	/^inline Char *format_uint(Char *buffer, UInt value, int num_digits,$/;"	f	namespace:internal
format_uint	src/utility/fmt/format.h	/^inline It format_uint(It out, UInt value, int num_digits,$/;"	f	namespace:internal
format_value	src/utility/fmt/ostream.h	/^void format_value(basic_buffer<Char> &buffer, const T &value) {$/;"	f	namespace:internal
formatbuf	src/utility/fmt/ostream.h	/^  formatbuf(basic_buffer<Char> &buffer) : buffer_(buffer) {}$/;"	f	class:internal::formatbuf
formatbuf	src/utility/fmt/ostream.h	/^class formatbuf : public std::basic_streambuf<Char> {$/;"	c	namespace:internal
formatted_size	src/utility/fmt/format.h	/^inline std::size_t formatted_size(string_view format_str,$/;"	f
formatter	diagram/logger.py	/^formatter = logging.Formatter(fmt="[calc][%(asctime)s][%(levelname)s]:\\n%(message)s",$/;"	v
formatter	src/utility/fmt/chrono.h	/^  formatter() : spec() {}$/;"	f	struct:formatter
formatter	src/utility/fmt/chrono.h	/^struct formatter<std::chrono::duration<Rep, Period>, Char> {$/;"	s
formatter	src/utility/fmt/core.h	/^struct formatter {$/;"	s
formatter	src/utility/fmt/format.h	/^    arg_formatter_base &formatter;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler
formatter	src/utility/fmt/format.h	/^    arg_formatter_base &formatter;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler
formatter	src/utility/fmt/format.h	/^struct formatter<$/;"	s
formatter	src/utility/fmt/format.h	/^struct formatter<arg_join<It, Char>, Char>:$/;"	s
formatter	src/utility/fmt/ostream.h	/^struct formatter<T, Char,$/;"	s
formatter	src/utility/fmt/ranges.h	/^struct formatter<RangeT, Char,$/;"	s
formatter	src/utility/fmt/ranges.h	/^struct formatter<TupleT, Char, $/;"	s
formatter	src/utility/fmt/time.h	/^struct formatter<std::tm, Char> {$/;"	s
formatter_type	src/utility/fmt/core.h	/^  struct formatter_type { typedef formatter<T, char_type> type; };$/;"	s	class:basic_format_context
formatter_type	src/utility/fmt/printf.h	/^  struct formatter_type { typedef printf_formatter<T> type; };$/;"	s	class:basic_printf_context
formatting	src/utility/fmt/ranges.h	/^    formatting_tuple<Char>& formatting;$/;"	m	struct:formatter::format_each
formatting	src/utility/fmt/ranges.h	/^  formatting_range<Char> formatting;$/;"	m	struct:formatter
formatting	src/utility/fmt/ranges.h	/^  formatting_tuple<Char> formatting;$/;"	m	struct:formatter
formatting_base	src/utility/fmt/ranges.h	/^struct formatting_base {$/;"	s
formatting_range	src/utility/fmt/ranges.h	/^  formatting_range() : prefix('{'), delimiter(','), postfix('}') {}$/;"	f	struct:formatting_range
formatting_range	src/utility/fmt/ranges.h	/^struct formatting_range : formatting_base<Char> {$/;"	s
formatting_tuple	src/utility/fmt/ranges.h	/^  formatting_tuple() : prefix('('), delimiter(','), postfix(')') {}$/;"	f	struct:formatting_tuple
formatting_tuple	src/utility/fmt/ranges.h	/^struct formatting_tuple : formatting_base<Char> {$/;"	s
fp	src/utility/fmt/format-inl.h	/^  explicit fp(Double d) {$/;"	f	class:internal::fp
fp	src/utility/fmt/format-inl.h	/^  fp(): f(0), e(0) {}$/;"	f	class:internal::fp
fp	src/utility/fmt/format-inl.h	/^  fp(uint64_t f_val, int e_val): f(f_val), e(e_val) {}$/;"	f	class:internal::fp
fp	src/utility/fmt/format-inl.h	/^class fp {$/;"	c	namespace:internal
fprintf	src/utility/fmt/printf.h	/^    fprintf(std::FILE *f, const S &format, const Args & ... args) {$/;"	f
fprintf	src/utility/fmt/printf.h	/^    fprintf(std::basic_ostream<FMT_CHAR(S)> &os,$/;"	f
fputil	src/utility/fmt/format.h	/^typedef std::numeric_limits<internal::dummy_int> fputil;$/;"	t	namespace:internal
freeE	forkE.py	/^def freeE(k):$/;"	f
free_energy	diagram/free_energy.py	/^class free_energy:$/;"	c
freelocale	src/utility/fmt/posix.h	/^  static void freelocale(locale_t locale) {$/;"	f	class:Locale
friend_circles	diagram/unionfind.py	/^def friend_circles(friends):$/;"	f
friends	diagram/unionfind.py	/^    friends = ["YNNNN", "NYNNN", "NNYNN", "NNNYN", "NNNNY"]$/;"	v
function	src/utility/fmt/format.h	/^struct function {$/;"	s	namespace:internal
gen_digits_params	src/utility/fmt/format-inl.h	/^struct gen_digits_params {$/;"	s	namespace:internal
get	src/utility/fmt/format-inl.h	/^Locale locale_ref::get() const {$/;"	f	class:internal::locale_ref
get	src/utility/fmt/posix.h	/^  Type get() const { return locale_; }$/;"	f	class:Locale
getInstance	src/utility/logger.cpp	/^Logger& Logger::getInstance()$/;"	f	class:Logger
getListOfFiles	IO.py	/^def getListOfFiles(dirName):$/;"	f
get_allocator	src/utility/fmt/format.h	/^  Allocator get_allocator() const { return *this; }$/;"	f	class:basic_memory_buffer
get_arg	src/utility/fmt/core.h	/^  format_arg get_arg(unsigned arg_id) { return this->do_get_arg(arg_id); }$/;"	f	class:basic_format_context
get_arg	src/utility/fmt/core.h	/^  format_arg get_arg(unsigned arg_id) {$/;"	f	class:internal::context_base
get_arg	src/utility/fmt/format.h	/^  FMT_CONSTEXPR basic_format_arg<Context> get_arg(Id arg_id) {$/;"	f	class:internal::specs_handler
get_arg	src/utility/fmt/format.h	/^  FMT_CONSTEXPR basic_format_arg<Context> get_arg(auto_id) {$/;"	f	class:internal::specs_handler
get_arg	src/utility/fmt/format.h	/^  basic_format_context<Range, Char>::get_arg($/;"	f	class:basic_format_context
get_arg	src/utility/fmt/printf.h	/^  basic_printf_context<OutputIt, Char, AF>::get_arg($/;"	f	class:basic_printf_context
get_cached_power	src/utility/fmt/format-inl.h	/^FMT_FUNC fp get_cached_power(int min_exponent, int &pow10_exponent) {$/;"	f	namespace:internal
get_container	src/utility/fmt/core.h	/^inline Container &get_container(std::back_insert_iterator<Container> it) {$/;"	f	namespace:internal
get_indexes	src/utility/fmt/ranges.h	/^get_indexes(T const &) { return {}; }$/;"	f	namespace:internal
get_n_circles	diagram/unionfind.py	/^    def get_n_circles(self):$/;"	m	class:UnionFind
get_prefix	src/utility/fmt/format.h	/^    string_view get_prefix() const { return string_view(prefix, prefix_size); }$/;"	f	struct:basic_writer::int_writer
get_type	src/utility/fmt/core.h	/^struct get_type {$/;"	s	namespace:internal
get_types	src/utility/fmt/core.h	/^FMT_CONSTEXPR11 unsigned long long get_types() { return 0; }$/;"	f	namespace:internal
get_types	src/utility/fmt/core.h	/^FMT_CONSTEXPR11 unsigned long long get_types() {$/;"	f	namespace:internal
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::atto>() { return "as"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::centi>() { return "cs"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::deca>() { return "das"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::deci>() { return "ds"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::exa>() { return "Es"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::femto>() { return "fs"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::giga>() { return "Gs"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::hecto>() { return "hs"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::kilo>() { return "ks"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::mega>() { return "Ms"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::micro>() { return "µs"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::milli>() { return "ms"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::nano>() { return "ns"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::peta>() { return "Ps"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::pico>() { return "ps"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::ratio<1>>() { return "s"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::ratio<3600>>() {$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::ratio<60>>() {$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::tera>() { return "Ts"; }$/;"	f
get_units	src/utility/fmt/chrono.h	/^template <typename Period> FMT_CONSTEXPR const char *get_units() {$/;"	f
gmtime	src/utility/fmt/time.h	/^inline std::tm gmtime(std::time_t time) {$/;"	f
gmtime_r	src/utility/fmt/time.h	/^inline null<> gmtime_r(...) { return null<>(); }$/;"	f	namespace:internal
gmtime_s	src/utility/fmt/time.h	/^inline null<> gmtime_s(...) { return null<>(); }$/;"	f	namespace:internal
green	color.py	/^green = _wrap_with('32')$/;"	v
green	diagram/color.py	/^green = _wrap_with('32')$/;"	v
green	src/diagram.h	/^struct green {$/;"	s	namespace:diag
green	src/utility/fmt/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
grisu2_format	src/utility/fmt/format-inl.h	/^    grisu2_format(Double value, buffer &buf, core_format_specs specs) {$/;"	f	namespace:internal
grisu2_format	src/utility/fmt/format.h	/^  grisu2_format(Double, buffer &, core_format_specs) { return false; }$/;"	f	namespace:internal
grisu2_gen_digits	src/utility/fmt/format-inl.h	/^FMT_FUNC bool grisu2_gen_digits($/;"	f	namespace:internal
grisu2_prettify	src/utility/fmt/format-inl.h	/^FMT_FUNC void grisu2_prettify(const gen_digits_params &params,$/;"	f	namespace:internal
grisu2_round	src/utility/fmt/format-inl.h	/^FMT_FUNC bool grisu2_round($/;"	f	namespace:internal
group	src/diagram.h	/^struct group {$/;"	s	namespace:diag
grow	src/utility/fmt/format.h	/^void basic_memory_buffer<T, SIZE, Allocator>::grow(std::size_t size) {$/;"	f	class:basic_memory_buffer
handle	src/utility/fmt/core.h	/^    explicit handle(internal::custom_value<Context> custom): custom_(custom) {}$/;"	f	class:basic_format_arg::handle
handle	src/utility/fmt/core.h	/^  class handle {$/;"	c	class:basic_format_arg
handle_char_specs	src/utility/fmt/format.h	/^FMT_CONSTEXPR void handle_char_specs($/;"	f	namespace:internal
handle_cstring_type_spec	src/utility/fmt/format.h	/^FMT_CONSTEXPR void handle_cstring_type_spec(Char spec, Handler &&handler) {$/;"	f	namespace:internal
handle_dynamic_spec	src/utility/fmt/format.h	/^void handle_dynamic_spec($/;"	f	namespace:internal
handle_float_type_spec	src/utility/fmt/format.h	/^FMT_CONSTEXPR void handle_float_type_spec(char spec, Handler &&handler) {$/;"	f	namespace:internal
handle_int_type_spec	src/utility/fmt/format.h	/^FMT_CONSTEXPR void handle_int_type_spec(char spec, Handler &&handler) {$/;"	f	namespace:internal
handle_specs	src/utility/fmt/format.h	/^  void handle_specs(Context &ctx) {$/;"	f	class:dynamic_formatter
handler	diagram/logger.py	/^    def handler(self, signal, frame):$/;"	m	class:DelayedInterrupt
handler	src/utility/fmt/format.h	/^  Handler &handler;$/;"	m	struct:internal::id_adapter
handler	src/utility/fmt/format.h	/^  SpecHandler &handler;$/;"	m	struct:internal::precision_adapter
handler	src/utility/fmt/format.h	/^  SpecHandler &handler;$/;"	m	struct:internal::width_adapter
handler_	src/utility/fmt/format.h	/^  ErrorHandler &handler_;$/;"	m	class:internal::precision_checker
handler_	src/utility/fmt/format.h	/^  ErrorHandler &handler_;$/;"	m	class:internal::width_checker
has	src/utility/fmt/format.h	/^  FMT_CONSTEXPR bool has(unsigned f) const { return (flags & f) != 0; }$/;"	f	struct:core_format_specs
hex_writer	src/utility/fmt/format.h	/^    struct hex_writer {$/;"	s	struct:basic_writer::int_writer
homedir	send.py	/^        homedir = homedir + title$/;"	v
homedir	send.py	/^    homedir = os.getcwd() +"\/"+fname$/;"	v
homedir	send.py	/^    homedir = os.getcwd() +"\/"+fname+"_o{0}".format(order)$/;"	v
hour	src/utility/fmt/chrono.h	/^  int hour() const { return to_int((s.count() \/ 3600) % 24); }$/;"	f	struct:internal::chrono_formatter
hour12	src/utility/fmt/chrono.h	/^  int hour12() const {$/;"	f	struct:internal::chrono_formatter
i	src/utility/fmt/ranges.h	/^    std::size_t& i;$/;"	m	struct:formatter::format_each
i	tool/plt_lambda.py	/^        i = i+1$/;"	v
i	tool/plt_lambda.py	/^    i=0$/;"	v
iabs	src/utility/utility.cpp	/^int iabs(int x) { return ((x >= 0.0) ? x : -x); }$/;"	f
id_adapter	src/utility/fmt/format.h	/^struct id_adapter {$/;"	s	namespace:internal
implicit_bit	src/utility/fmt/format-inl.h	/^  static FMT_CONSTEXPR_DECL const uint64_t implicit_bit =$/;"	m	class:internal::fp
index	src/utility/fmt/format.h	/^    unsigned index;$/;"	m	union:internal::arg_ref::__anon8
inf_or_nan_writer	src/utility/fmt/format.h	/^  struct inf_or_nan_writer {$/;"	s	class:basic_writer
init	src/utility/fmt/core.h	/^  FMT_CONSTEXPR init(const T &v) : val(v) {}$/;"	f	struct:internal::init
init	src/utility/fmt/core.h	/^struct init {$/;"	s	namespace:internal
init	src/utility/fmt/format-inl.h	/^FMT_FUNC void system_error::init($/;"	f	class:system_error
init	src/utility/fmt/format-inl.h	/^FMT_FUNC void windows_error::init($/;"	f	class:windows_error
init	src/utility/fmt/format.h	/^void arg_map<Context>::init(const basic_format_args<Context> &args) {$/;"	f	class:internal::arg_map
initialTime_	src/utility/logger.h	/^    struct timeval initialTime_;$/;"	m	class:Logger	typeref:struct:Logger::timeval
initialized	src/utility/sput.h	/^    char initialized;$/;"	m	struct:sput
inline_buffer_size	src/utility/fmt/format.h	/^enum { inline_buffer_size = 500 };$/;"	e	enum:__anon3
inlist	polar_eqTime.py	/^inlist = open(".\/paras","r")$/;"	v
inlist	polar_lam.py	/^inlist = open(".\/paras", 'r')$/;"	v
inlist	polar_lam_order.py	/^inlist = open(".\/paras", 'r')$/;"	v
inlist	send.py	/^inlist = open(".\/inlist","r")$/;"	v
inlist	tool/plt_polar_diag.py	/^inlist = open(".\/paras", 'r')$/;"	v
inlist	tool/plt_polar_lam.py	/^inlist = open(".\/paras", 'r')$/;"	v
inner	color.py	/^    def inner(text, bold=False):$/;"	f	function:_wrap_with
inner	diagram/color.py	/^    def inner(text, bold=False):$/;"	f	function:_wrap_with
insert	src/utility/fmt/format-inl.h	/^  void insert(ptrdiff_t pos, char c) {$/;"	f	struct:internal::prettify_handler
insert	src/utility/fmt/format-inl.h	/^  void insert(ptrdiff_t pos, ptrdiff_t n, F f) {$/;"	f	struct:internal::prettify_handler
insert	src/utility/fmt/format-inl.h	/^  void insert(ptrdiff_t, char) { ++size; }$/;"	f	struct:internal::char_counter
insert	src/utility/fmt/format-inl.h	/^  void insert(ptrdiff_t, ptrdiff_t n, F) { size += n; }$/;"	f	struct:internal::char_counter
int_checker	src/utility/fmt/printf.h	/^struct int_checker {$/;"	s	namespace:internal
int_checker	src/utility/fmt/printf.h	/^struct int_checker<true> {$/;"	s	namespace:internal
int_traits	src/utility/fmt/format.h	/^struct int_traits {$/;"	s	namespace:internal
int_type	src/utility/fmt/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
int_type	src/utility/fmt/ostream.h	/^  typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:internal::formatbuf
int_type_checker	src/utility/fmt/format.h	/^  FMT_CONSTEXPR explicit int_type_checker(ErrorHandler eh) : ErrorHandler(eh) {}$/;"	f	class:internal::int_type_checker
int_type_checker	src/utility/fmt/format.h	/^class int_type_checker : private ErrorHandler {$/;"	c	namespace:internal
int_value	src/utility/fmt/core.h	/^    int int_value;$/;"	m	union:internal::value::__anon1
int_writer	src/utility/fmt/format.h	/^    int_writer(basic_writer<Range> &w, Int value, const Spec &s)$/;"	f	struct:basic_writer::int_writer
int_writer	src/utility/fmt/format.h	/^  struct int_writer {$/;"	s	class:basic_writer
integral	forkE.py	/^            integral = integrate.quad(Sigma_integrand, 0, np.inf, args=(i,))$/;"	v
internal	src/utility/fmt/chrono.h	/^namespace internal{$/;"	n
internal	src/utility/fmt/core.h	/^namespace internal {$/;"	n
internal	src/utility/fmt/format-inl.h	/^namespace internal {$/;"	n
internal	src/utility/fmt/format.h	/^namespace internal {$/;"	n
internal	src/utility/fmt/locale.h	/^namespace internal {$/;"	n
internal	src/utility/fmt/ostream.h	/^namespace internal {$/;"	n
internal	src/utility/fmt/printf.h	/^namespace internal {$/;"	n
internal	src/utility/fmt/ranges.h	/^namespace internal {$/;"	n
internal	src/utility/fmt/time.h	/^namespace internal {$/;"	n
internal	src/utility/fmt/time.h	/^namespace internal{$/;"	n
irn	src/utility/rng.h	/^    inline int irn(int from, int thru)$/;"	f	class:RandomFactory
is_arithmetic	src/utility/fmt/core.h	/^  bool is_arithmetic() const { return internal::is_arithmetic(type_); }$/;"	f	class:basic_format_arg
is_arithmetic	src/utility/fmt/core.h	/^FMT_CONSTEXPR bool is_arithmetic(type t) {$/;"	f	namespace:internal
is_compile_string	src/utility/fmt/core.h	/^struct is_compile_string : std::is_base_of<compile_string, S> {};$/;"	s
is_connected	diagram/unionfind.py	/^    def is_connected(self, node1, node2):$/;"	m	class:UnionFind
is_constructible	src/utility/fmt/core.h	/^struct is_constructible: std::false_type {};$/;"	s
is_integer	src/utility/fmt/format.h	/^struct is_integer {$/;"	s	namespace:internal
is_integral	src/utility/fmt/core.h	/^  bool is_integral() const { return internal::is_integral(type_); }$/;"	f	class:basic_format_arg
is_integral	src/utility/fmt/core.h	/^FMT_CONSTEXPR bool is_integral(type t) {$/;"	f	namespace:internal
is_like_std_string	src/utility/fmt/ranges.h	/^class is_like_std_string {$/;"	c	namespace:internal
is_like_std_string	src/utility/fmt/ranges.h	/^struct is_like_std_string<fmt::basic_string_view<Char>> : std::true_type {};$/;"	s	namespace:internal
is_name_start	src/utility/fmt/format.h	/^FMT_CONSTEXPR bool is_name_start(Char c) {$/;"	f	namespace:internal
is_negative	src/utility/fmt/format.h	/^    !std::numeric_limits<T>::is_signed, bool>::type is_negative(T) {$/;"	f	namespace:internal
is_negative	src/utility/fmt/format.h	/^    std::numeric_limits<T>::is_signed, bool>::type is_negative(T value) {$/;"	f	namespace:internal
is_output_iterator	src/utility/fmt/format.h	/^class is_output_iterator {$/;"	c	namespace:internal
is_range	src/utility/fmt/ranges.h	/^struct is_range {$/;"	s
is_range_	src/utility/fmt/ranges.h	/^struct is_range_ : std::false_type {};$/;"	s	namespace:internal
is_range_	src/utility/fmt/ranges.h	/^struct is_range_<T, typename std::conditional<$/;"	s	namespace:internal
is_streamable	src/utility/fmt/ostream.h	/^class is_streamable {$/;"	c	namespace:internal
is_string	src/utility/fmt/core.h	/^struct is_string : std::integral_constant<bool, !std::is_same<$/;"	s	namespace:internal
is_tuple_like	src/utility/fmt/ranges.h	/^struct is_tuple_like {$/;"	s
is_tuple_like_	src/utility/fmt/ranges.h	/^class is_tuple_like_ {$/;"	c	namespace:internal
is_zero_int	src/utility/fmt/printf.h	/^class is_zero_int: public function<bool> {$/;"	c	namespace:internal
isinf	src/utility/fmt/format.h	/^inline dummy_int isinf(...) { return dummy_int(); }$/;"	f	namespace:internal
isinfinity	src/utility/fmt/format.h	/^  static bool isinfinity(T x) {$/;"	f	class:std::numeric_limits
isnan	src/utility/fmt/format.h	/^inline dummy_int isnan(...) { return dummy_int(); }$/;"	f	namespace:internal
isnotanumber	src/utility/fmt/format.h	/^  static bool isnotanumber(T x) {$/;"	f	class:std::numeric_limits
it_	src/utility/fmt/format.h	/^  OutputIt it_;$/;"	m	class:output_range
it_category	src/utility/fmt/format.h	/^struct it_category : std::false_type {};$/;"	s	namespace:internal
it_category	src/utility/fmt/format.h	/^struct it_category<T*> { typedef std::random_access_iterator_tag type; };$/;"	s	namespace:internal
it_category	src/utility/fmt/format.h	/^struct it_category<T, typename void_<typename T::iterator_category>::type> {$/;"	s	namespace:internal
iterNum	forkE.py	/^    iterNum = 10$/;"	v
iterNum	forkE.py	/^    iterNum = 7$/;"	v
iterator	src/utility/fmt/core.h	/^  typedef OutputIt iterator;$/;"	t	class:internal::context_base
iterator	src/utility/fmt/core.h	/^  typedef const Char *iterator;$/;"	t	class:basic_string_view
iterator	src/utility/fmt/core.h	/^  typedef typename basic_string_view<Char>::iterator iterator;$/;"	t	class:basic_parse_context
iterator	src/utility/fmt/format.h	/^  typedef OutputIt iterator;$/;"	t	class:output_range
iterator	src/utility/fmt/format.h	/^  typedef decltype(internal::declval<Range>().begin()) iterator;$/;"	t	class:basic_writer
iterator	src/utility/fmt/format.h	/^  typedef decltype(internal::declval<Range>().begin()) iterator;$/;"	t	class:internal::arg_formatter_base
iterator	src/utility/fmt/format.h	/^  typedef typename base::iterator iterator;$/;"	t	class:arg_formatter
iterator	src/utility/fmt/printf.h	/^  typedef decltype(internal::declval<Range>().begin()) iterator;$/;"	t	class:printf_arg_formatter
iterator	src/utility/fmt/printf.h	/^  typedef internal::null_terminating_iterator<char_type> iterator;$/;"	t	class:basic_printf_context
iterator_category	src/utility/fmt/format.h	/^  typedef std::output_iterator_tag iterator_category;$/;"	t	class:internal::counting_iterator
iterator_category	src/utility/fmt/format.h	/^  typedef std::output_iterator_tag iterator_category;$/;"	t	class:internal::truncating_iterator_base
iterator_category	src/utility/fmt/printf.h	/^  typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:internal::null_terminating_iterator
j	forkE.py	/^            j = j + 1$/;"	v
j	forkE.py	/^        j = 0$/;"	v
jobfile	send.py	/^        jobfile = "_job"+str(pid)+".sh"$/;"	v
jobfilepath	send.py	/^    jobfilepath = homedir+"\/jobfile"$/;"	v
join	src/utility/fmt/format.h	/^arg_join<It, char> join(It begin, It end, string_view sep) {$/;"	f
join	src/utility/fmt/format.h	/^arg_join<It, wchar_t> join(It begin, It end, wstring_view sep) {$/;"	f
k	tool/fock.py	/^k=np.linspace(0.001, 20, 1000)$/;"	v
kF	forkE.py	/^    kF = (9*pi\/4.)**(1.\/3.) \/rs$/;"	v
kind	src/utility/fmt/format.h	/^  Kind kind;$/;"	m	struct:internal::arg_ref
km	forkE.py	/^    km=np.linspace(0, kmax, num=MAXBIN+1)$/;"	v
kmax	forkE.py	/^    kmax = 12*kF$/;"	v
kmax	forkE.py	/^    kmax = 24*kF$/;"	v
kmax_G	tool/plt_polar_lam.py	/^kmax_G = {0.125: 6.2, 0.25: 4.4, 0.5: 3.1, 1.0: 2.5, 2.0:2.3, 4.0:2, 8.0:2, 16.0:2}   #<1: 2.2\/sqrt(beta); >2: 2$/;"	v
l	forkE.py	/^    l = np.sqrt(Mass2 + lam)$/;"	v
l2	forkE.py	/^    l2 = Mass2 + lam$/;"	v
label	tool/plt_polar_diag.py	/^                label="({0},{1},{2}) Diag{3}".format(key[0],key[1],key[2],key[3]))$/;"	v
lam	forkE.py	/^    lam = float(lam)$/;"	v
lam	polar_eqTime.py	/^        lam  = float(para[4])$/;"	v
lam	polar_lam.py	/^    lam  = float(para[4])$/;"	v
lam	polar_lam_order.py	/^    lam  = float(para[4])$/;"	v
lam	send.py	/^    lam  = float(para[4])$/;"	v
lam	tool/fock.py	/^lam=0.1$/;"	v
lam	tool/plt_polar_diag.py	/^    lam  = float(para[4])$/;"	v
lam	tool/plt_polar_lam.py	/^    lam  = float(para[4])$/;"	v
last_integer_type	src/utility/fmt/core.h	/^  last_integer_type = char_type,$/;"	e	enum:internal::type
last_numeric_type	src/utility/fmt/core.h	/^  double_type, long_double_type, last_numeric_type = long_double_type,$/;"	e	enum:internal::type
lg	src/utility/fmt/format.h	/^inline char *lg(uint32_t n, Handler h) {$/;"	f	namespace:internal
limit_	src/utility/fmt/format.h	/^  std::size_t limit_;$/;"	m	class:internal::truncating_iterator_base
line	src/utility/sput.h	/^        unsigned long line;$/;"	m	struct:sput::sput_check
list_polar	polar_lam.py	/^list_polar = []$/;"	v
list_polar	polar_lam.py	/^list_polar = np.array(list_polar)$/;"	v
list_polar	polar_lam_order.py	/^list_polar = []$/;"	v
list_polar	polar_lam_order.py	/^list_polar = np.array(list_polar)$/;"	v
literals	src/utility/fmt/format.h	/^inline namespace literals {$/;"	n
loc_	src/utility/fmt/core.h	/^  locale_ref loc_;$/;"	m	class:internal::context_base
locale	src/utility/fmt/core.h	/^  locale_ref locale() { return loc_; }$/;"	f	class:internal::context_base
locale_	src/utility/fmt/core.h	/^  const void *locale_;  \/\/ A type-erased pointer to std::locale.$/;"	m	class:internal::locale_ref
locale_	src/utility/fmt/format.h	/^  internal::locale_ref locale_;$/;"	m	class:basic_writer
locale_	src/utility/fmt/posix.h	/^  locale_t locale_;$/;"	m	class:Locale
locale_ref	src/utility/fmt/core.h	/^  locale_ref() : locale_(FMT_NULL) {}$/;"	f	class:internal::locale_ref
locale_ref	src/utility/fmt/core.h	/^class locale_ref {$/;"	c	namespace:internal
locale_ref	src/utility/fmt/format-inl.h	/^locale_ref::locale_ref(const Locale &loc) : locale_(&loc) {$/;"	f	class:internal::locale_ref
locale_t	src/utility/fmt/posix.h	/^  typedef _locale_t locale_t;$/;"	t	class:Locale
localtime	src/utility/fmt/time.h	/^inline std::tm localtime(std::time_t time) {$/;"	f
localtime_s	src/utility/fmt/time.h	/^inline null<> localtime_s(...) { return null<>(); }$/;"	f	namespace:internal
lock	src/utility/logger.cpp	/^inline void Logger::lock()$/;"	f	class:Logger
lock	src/utility/logger.cpp	/^void Logger::lock()$/;"	f	class:Logger
lock_	src/utility/logger.cpp	/^pthread_mutex_t Logger::lock_ = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:Logger	file:
lock_	src/utility/logger.h	/^    static pthread_mutex_t lock_;$/;"	m	class:Logger
log	diagram/logger.py	/^log = logging.getLogger()$/;"	v
logFile_	src/utility/logger.h	/^    std::string logFile_;$/;"	m	class:Logger
loggerConf	src/utility/logger.h	/^    typedef loggerConf_ loggerConf;$/;"	t	class:Logger
loggerConf_	src/utility/logger.h	/^    enum loggerConf_ { L_nofile_ = 1 << 0,$/;"	g	class:Logger
loggerName_	src/utility/logger.h	/^    std::string loggerName_;$/;"	m	class:Logger
long_double_type	src/utility/fmt/core.h	/^  double_type, long_double_type, last_numeric_type = long_double_type,$/;"	e	enum:internal::type
long_double_value	src/utility/fmt/core.h	/^    long double long_double_value;$/;"	m	union:internal::value::__anon1
long_long_type	src/utility/fmt/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
long_long_value	src/utility/fmt/core.h	/^    long long long_long_value;$/;"	m	union:internal::value::__anon1
long_type	src/utility/fmt/core.h	/^        long_type;$/;"	t	namespace:internal
loop	src/diagram.h	/^    loop; \/\/ array to store the loop basis for a propagator or interaction line$/;"	t	namespace:diag
m_	src/utility/logger.cpp	/^Logger* Logger::m_ = 0;$/;"	m	class:Logger	file:
m_	src/utility/logger.h	/^    static Logger* m_;$/;"	m	class:Logger
magenta	color.py	/^magenta = _wrap_with('35')$/;"	v
magenta	diagram/color.py	/^magenta = _wrap_with('35')$/;"	v
magenta	src/utility/fmt/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
main	src/main.cpp	/^int main(int argc, const char *argv[]) {$/;"	f
make_arg	src/utility/fmt/core.h	/^    make_arg(const T &value) {$/;"	f	namespace:internal
make_arg	src/utility/fmt/core.h	/^FMT_CONSTEXPR basic_format_arg<Context> make_arg(const T &value) {$/;"	f	namespace:internal
make_arg_ref	src/utility/fmt/chrono.h	/^    FMT_CONSTEXPR arg_ref_type make_arg_ref(Id arg_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	src/utility/fmt/chrono.h	/^    FMT_CONSTEXPR arg_ref_type make_arg_ref(internal::auto_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	src/utility/fmt/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
make_arg_ref	src/utility/fmt/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(auto_id) {$/;"	f	class:internal::dynamic_specs_handler
make_checked	src/utility/fmt/format.h	/^inline stdext::checked_array_iterator<T*> make_checked(T *p, std::size_t size) {$/;"	f	namespace:internal
make_format_to_n_args	src/utility/fmt/format.h	/^    make_format_to_n_args(const Args &... args) {$/;"	f
make_printf_args	src/utility/fmt/printf.h	/^  make_printf_args(const Args &... args) { return {args...}; }$/;"	f
make_unsigned_or_bool	src/utility/fmt/printf.h	/^struct make_unsigned_or_bool : std::make_unsigned<T> {};$/;"	s	namespace:internal
make_unsigned_or_bool	src/utility/fmt/printf.h	/^struct make_unsigned_or_bool<bool> {$/;"	s	namespace:internal
make_value	src/utility/fmt/core.h	/^    make_value(const S &val) {$/;"	f	namespace:internal
make_value	src/utility/fmt/core.h	/^    make_value(const T *) {$/;"	f	namespace:internal
make_value	src/utility/fmt/core.h	/^    make_value(const named_arg<T, typename C::char_type> &val) {$/;"	f	namespace:internal
make_value	src/utility/fmt/core.h	/^  init<C, int, char_type>>::type make_value(Char val) { return val; }$/;"	f	namespace:internal
make_value	src/utility/fmt/core.h	/^  init<C, int, char_type>>::type make_value(char val) { return val; }$/;"	f	namespace:internal
make_value	src/utility/fmt/core.h	/^  make_value(const T &val) { return basic_string_view<Char>(val); }$/;"	f	namespace:internal
make_value	src/utility/fmt/core.h	/^  make_value(const T &val) { return static_cast<int>(val); }$/;"	f	namespace:internal
make_value	src/utility/fmt/core.h	/^  make_value(const T &val) { return val; }$/;"	f	namespace:internal
make_wprintf_args	src/utility/fmt/printf.h	/^  make_wprintf_args(const Args &... args) { return {args...}; }$/;"	f
map_	src/utility/fmt/core.h	/^  entry *map_;$/;"	m	class:internal::arg_map
map_	src/utility/fmt/core.h	/^  internal::arg_map<basic_format_context> map_;$/;"	m	class:basic_format_context
mappedkey	polar_eqTime.py	/^        mappedkey = (key[0]+key[1], key[2])$/;"	v
mappedkey	polar_lam.py	/^        mappedkey = (key[0]+key[1], key[2])$/;"	v
mappedkey	polar_lam_order.py	/^        mappedkey = (key[0]+key[1], key[2])$/;"	v
mappedkey	tool/plt_polar_diag.py	/^        mappedkey = (key[0]+key[1], key[2])$/;"	v
mappedkey	tool/plt_polar_lam.py	/^        mappedkey = (key[0]+key[1], key[2])$/;"	v
markov	src/markov.cpp	/^markov::markov() : Var(Weight.Var), Groups(Weight.Groups) {$/;"	f	class:markov
markov	src/markov.h	/^class markov {$/;"	c	namespace:mc
markov_H	src/markov.h	2;"	d
mass	forkE.py	/^    mass = 0.5$/;"	v
max_packed_args	src/utility/fmt/core.h	/^enum { max_packed_args = 15 };$/;"	e	enum:internal::__anon2
mc	src/markov.h	/^namespace mc {$/;"	n
memory_buffer	src/utility/fmt/format.h	/^typedef basic_memory_buffer<char> memory_buffer;$/;"	t
memory_usage	diagram/logger.py	/^def memory_usage():$/;"	f
minute	src/utility/fmt/chrono.h	/^  int minute() const { return to_int((s.count() \/ 60) % 60); }$/;"	f	struct:internal::chrono_formatter
momentum	src/global.h	/^typedef Vec<double, D> momentum;$/;"	t
monostate	src/utility/fmt/core.h	/^struct monostate {};$/;"	s
move	src/utility/fmt/format.h	/^  void move(basic_memory_buffer &other) {$/;"	f	class:basic_memory_buffer
ms	src/utility/fmt/chrono.h	/^  std::chrono::milliseconds ms;$/;"	m	struct:internal::chrono_formatter
mu	forkE.py	/^        mu = optimize.fsolve(ferm_density, mu0)$/;"	v
mu	forkE.py	/^    mu = shift0*EF$/;"	v
mu	polar_lam.py	/^    mu = np.loadtxt(Para.DataFolder+"\/dMu_beta{0}_rs{1}_lam{2}".format(beta,rs,lam))$/;"	v
mu	polar_lam_order.py	/^        mu = np.loadtxt(Para.DataFolder+"\/dMu_beta{0}_rs{1}_lam{2}".format(beta,rs,lam))$/;"	v
mu	tool/plt_polar_diag.py	/^    mu = np.loadtxt(Para.DataFolder+"\/dMu_beta{0}_rs{1}_lam{2}".format(beta,rs,lam))$/;"	v
mu	tool/plt_polar_lam.py	/^        mu = np.loadtxt(Para.DataFolder+"\/dMu_beta{0}_rs{1}_lam{2}".format(beta,rs,lam))$/;"	v
mu0	forkE.py	/^        mu0 = mu        $/;"	v
mu0	forkE.py	/^        mu0 = mu$/;"	v
mu_iter	forkE.py	/^    mu_iter = []$/;"	v
n	src/utility/fmt/format-inl.h	/^  size_t n;$/;"	m	struct:internal::fill
n	src/utility/fmt/format.h	/^    size_t n;$/;"	m	struct:basic_writer::double_writer
n_bose	forkE.py	/^def n_bose(x,beta):$/;"	f
name	src/utility/fmt/core.h	/^    basic_string_view<char_type> name;$/;"	m	struct:internal::arg_map::entry
name	src/utility/fmt/format.h	/^    string_value<Char> name;  \/\/ This is not string_view because of gcc 4.4.$/;"	m	union:internal::arg_ref::__anon8
name	src/utility/sput.h	/^        const char *name;$/;"	m	struct:sput::sput_check
name	src/utility/sput.h	/^        const char *name;$/;"	m	struct:sput::sput_suite
name	src/utility/sput.h	/^        const char *name;$/;"	m	struct:sput::sput_test
named_arg_type	src/utility/fmt/core.h	/^  none_type, named_arg_type,$/;"	e	enum:internal::type
needs_conversion	src/utility/fmt/format.h	/^struct needs_conversion: std::integral_constant<bool,$/;"	s	namespace:internal
newlocale	src/utility/fmt/posix.h	/^  static locale_t newlocale(int category_mask, const char *locale, locale_t) {$/;"	f	class:Locale
next_arg	src/utility/fmt/core.h	/^  format_arg next_arg() {$/;"	f	class:basic_format_context
next_arg_id	src/utility/fmt/format.h	/^FMT_CONSTEXPR unsigned basic_parse_context<Char, ErrorHandler>::next_arg_id() {$/;"	f	class:basic_parse_context
next_arg_id_	src/utility/fmt/core.h	/^  int next_arg_id_;$/;"	m	class:basic_parse_context
no_formatter_error	src/utility/fmt/core.h	/^struct no_formatter_error : std::false_type {};$/;"	s	namespace:internal
no_thousands_sep	src/utility/fmt/format.h	/^struct no_thousands_sep {$/;"	s	namespace:internal
nok	src/utility/sput.h	/^        unsigned long nok;$/;"	m	struct:sput::sput_overall
nok	src/utility/sput.h	/^        unsigned long nok;$/;"	m	struct:sput::sput_suite
none_type	src/utility/fmt/core.h	/^  none_type, named_arg_type,$/;"	e	enum:internal::type
norm	src/utility/vector.h	/^  double norm() const {$/;"	f	class:Vec
normalize	src/utility/fmt/format-inl.h	/^  void normalize() {$/;"	f	class:internal::fp
nr	src/utility/sput.h	/^        unsigned long nr;$/;"	m	struct:sput::sput_suite
nr	src/utility/sput.h	/^        unsigned long nr;$/;"	m	struct:sput::sput_test
null	src/utility/fmt/format.h	/^struct null {};$/;"	s	namespace:internal
null_handler	src/utility/fmt/format.h	/^  struct null_handler: internal::error_handler {$/;"	s	class:dynamic_formatter
null_terminating_iterator	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR explicit null_terminating_iterator(const Range &r)$/;"	f	class:internal::null_terminating_iterator
null_terminating_iterator	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator(const Char *ptr, const Char *end)$/;"	f	class:internal::null_terminating_iterator
null_terminating_iterator	src/utility/fmt/printf.h	/^  null_terminating_iterator() : ptr_(0), end_(0) {}$/;"	f	class:internal::null_terminating_iterator
null_terminating_iterator	src/utility/fmt/printf.h	/^class null_terminating_iterator {$/;"	c	namespace:internal
nullspace	diagram/nullspace.py	/^def nullspace(A, atol=1e-13, rtol=0):$/;"	f
num_digits	src/utility/fmt/format-inl.h	/^  int num_digits;$/;"	m	struct:internal::gen_digits_params
num_digits	src/utility/fmt/format.h	/^      int num_digits;$/;"	m	struct:basic_writer::int_writer::bin_writer
num_digits	src/utility/fmt/format.h	/^      int num_digits;$/;"	m	struct:basic_writer::int_writer::dec_writer
num_digits	src/utility/fmt/format.h	/^      int num_digits;$/;"	m	struct:basic_writer::int_writer::hex_writer
num_writer	src/utility/fmt/format.h	/^    struct num_writer {$/;"	s	struct:basic_writer::int_writer
numeric_limits	src/utility/fmt/format.h	/^class numeric_limits<fmt::internal::dummy_int> :$/;"	c	namespace:std
numeric_system	src/utility/fmt/chrono.h	/^enum class numeric_system {$/;"	c	namespace:internal
obstype	src/global.h	/^enum obstype { FREQ, EQUALTIME };$/;"	g
ok	src/utility/sput.h	/^        unsigned long ok;$/;"	m	struct:sput::sput_overall
ok	src/utility/sput.h	/^        unsigned long ok;$/;"	m	struct:sput::sput_suite
omin	tool/plt_polar_lam.py	/^    omin = 1$/;"	v
on	src/utility/fmt/format.h	/^  template <unsigned N> char *on(uint32_t u) {$/;"	f	class:internal::decimal_formatter
on	src/utility/fmt/format.h	/^  template <unsigned N> char *on(uint32_t u) {$/;"	f	class:internal::decimal_formatter_null
onExitScope_	src/utility/scopeguard.h	/^    std::function<void()> onExitScope_;$/;"	m	class:ScopeGuard
on_12_hour	src/utility/fmt/chrono.h	/^  void on_12_hour(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_12_hour	src/utility/fmt/chrono.h	/^  void on_12_hour(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_12_hour_time	src/utility/fmt/chrono.h	/^  void on_12_hour_time() { format_localized(time(), "%r"); }$/;"	f	struct:internal::chrono_formatter
on_12_hour_time	src/utility/fmt/chrono.h	/^  void on_12_hour_time() {}$/;"	f	struct:internal::chrono_format_checker
on_24_hour	src/utility/fmt/chrono.h	/^  void on_24_hour(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_24_hour	src/utility/fmt/chrono.h	/^  void on_24_hour(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_24_hour_time	src/utility/fmt/chrono.h	/^  void on_24_hour_time() {$/;"	f	struct:internal::chrono_formatter
on_24_hour_time	src/utility/fmt/chrono.h	/^  void on_24_hour_time() {}$/;"	f	struct:internal::chrono_format_checker
on_abbr_month	src/utility/fmt/chrono.h	/^  void on_abbr_month() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_abbr_month	src/utility/fmt/chrono.h	/^  void on_abbr_month() {}$/;"	f	struct:internal::chrono_formatter
on_abbr_weekday	src/utility/fmt/chrono.h	/^  void on_abbr_weekday() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_abbr_weekday	src/utility/fmt/chrono.h	/^  void on_abbr_weekday() {}$/;"	f	struct:internal::chrono_formatter
on_align	src/utility/fmt/chrono.h	/^    void on_align(alignment align) { f.spec.align_ = align; }$/;"	f	struct:formatter::spec_handler
on_align	src/utility/fmt/format.h	/^    void on_align(alignment) {}$/;"	f	struct:dynamic_formatter::null_handler
on_align	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_align(alignment align) { specs_.align_ = align; }$/;"	f	class:internal::specs_setter
on_align	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_align(alignment align) {$/;"	f	class:internal::specs_checker
on_am_pm	src/utility/fmt/chrono.h	/^  void on_am_pm() { format_localized(time(), "%p"); }$/;"	f	struct:internal::chrono_formatter
on_am_pm	src/utility/fmt/chrono.h	/^  void on_am_pm() {}$/;"	f	struct:internal::chrono_format_checker
on_arg_id	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_arg_id() {$/;"	f	class:internal::format_string_checker
on_arg_id	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_arg_id(basic_string_view<Char>) {}$/;"	f	class:internal::format_string_checker
on_arg_id	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_arg_id(unsigned id) {$/;"	f	class:internal::format_string_checker
on_arg_id	src/utility/fmt/format.h	/^  void on_arg_id() { arg = context.next_arg(); }$/;"	f	struct:format_handler
on_arg_id	src/utility/fmt/format.h	/^  void on_arg_id(basic_string_view<Char> id) {$/;"	f	struct:format_handler
on_arg_id	src/utility/fmt/format.h	/^  void on_arg_id(unsigned id) {$/;"	f	struct:format_handler
on_bin	src/utility/fmt/format.h	/^    void on_bin() {$/;"	f	struct:basic_writer::int_writer
on_bin	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_bin() {}$/;"	f	class:internal::int_type_checker
on_char	src/utility/fmt/format.h	/^    void on_char() { formatter.write_char(value); }$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
on_char	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_char() {}$/;"	f	class:internal::char_specs_checker
on_datetime	src/utility/fmt/chrono.h	/^  void on_datetime(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_datetime	src/utility/fmt/chrono.h	/^  void on_datetime(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dec	src/utility/fmt/format.h	/^    void on_dec() {$/;"	f	struct:basic_writer::int_writer
on_dec	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_dec() {}$/;"	f	class:internal::int_type_checker
on_dec0_weekday	src/utility/fmt/chrono.h	/^  void on_dec0_weekday(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_dec0_weekday	src/utility/fmt/chrono.h	/^  void on_dec0_weekday(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dec1_weekday	src/utility/fmt/chrono.h	/^  void on_dec1_weekday(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_dec1_weekday	src/utility/fmt/chrono.h	/^  void on_dec1_weekday(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dynamic_precision	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
on_dynamic_precision	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::specs_handler
on_dynamic_width	src/utility/fmt/chrono.h	/^    void on_dynamic_width(Id arg_id) {$/;"	f	struct:formatter::spec_handler
on_dynamic_width	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
on_dynamic_width	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::specs_handler
on_error	src/utility/fmt/chrono.h	/^    void on_error(const char *msg) { throw format_error(msg); }$/;"	f	struct:formatter::spec_handler
on_error	src/utility/fmt/core.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	class:basic_parse_context
on_error	src/utility/fmt/core.h	/^  void on_error(const char *message) { parse_context_.on_error(message); }$/;"	f	class:internal::context_base
on_error	src/utility/fmt/format-inl.h	/^FMT_FUNC void internal::error_handler::on_error(const char *message) {$/;"	f	class:internal::error_handler
on_error	src/utility/fmt/format.h	/^    void on_error() {$/;"	f	struct:basic_writer::int_writer
on_error	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_error() {$/;"	f	class:internal::float_type_checker
on_error	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_error() {$/;"	f	class:internal::int_type_checker
on_error	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) { handler.on_error(message); }$/;"	f	struct:internal::precision_adapter
on_error	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	class:internal::dynamic_specs_handler
on_error	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	class:internal::format_string_checker
on_error	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	struct:internal::id_adapter
on_error	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	struct:internal::width_adapter
on_error	src/utility/fmt/format.h	/^  void on_error() {$/;"	f	struct:float_spec_handler
on_error	src/utility/fmt/format.h	/^  void on_error(const char *message) {$/;"	f	class:internal::specs_handler
on_exp	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_exp() {}$/;"	f	class:internal::float_type_checker
on_exp	src/utility/fmt/format.h	/^  void on_exp() {$/;"	f	struct:float_spec_handler
on_fill	src/utility/fmt/chrono.h	/^    void on_fill(Char fill) { f.spec.fill_ = fill; }$/;"	f	struct:formatter::spec_handler
on_fill	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_fill(Char fill) { specs_.fill_ = fill; }$/;"	f	class:internal::specs_setter
on_fixed	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_fixed() {}$/;"	f	class:internal::float_type_checker
on_fixed	src/utility/fmt/format.h	/^  void on_fixed() {$/;"	f	struct:float_spec_handler
on_format_specs	src/utility/fmt/format.h	/^  FMT_CONSTEXPR const Char *on_format_specs(const Char *begin, const Char *) {$/;"	f	class:internal::format_string_checker
on_format_specs	src/utility/fmt/format.h	/^  const Char *on_format_specs(const Char *begin, const Char *end) {$/;"	f	struct:format_handler
on_full_month	src/utility/fmt/chrono.h	/^  void on_full_month() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_full_month	src/utility/fmt/chrono.h	/^  void on_full_month() {}$/;"	f	struct:internal::chrono_formatter
on_full_weekday	src/utility/fmt/chrono.h	/^  void on_full_weekday() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_full_weekday	src/utility/fmt/chrono.h	/^  void on_full_weekday() {}$/;"	f	struct:internal::chrono_formatter
on_general	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_general() {}$/;"	f	class:internal::float_type_checker
on_general	src/utility/fmt/format.h	/^  void on_general() {$/;"	f	struct:float_spec_handler
on_hash	src/utility/fmt/format.h	/^    void on_hash() {}$/;"	f	struct:dynamic_formatter::null_handler
on_hash	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_hash() { specs_.flags |= HASH_FLAG; }$/;"	f	class:internal::specs_setter
on_hash	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_hash() {$/;"	f	class:internal::specs_checker
on_hex	src/utility/fmt/format.h	/^    void on_hex() {$/;"	f	struct:basic_writer::int_writer
on_hex	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_hex() {}$/;"	f	class:internal::float_type_checker
on_hex	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_hex() {}$/;"	f	class:internal::int_type_checker
on_hex	src/utility/fmt/format.h	/^  void on_hex() {$/;"	f	struct:float_spec_handler
on_int	src/utility/fmt/format.h	/^    void on_int() {$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
on_int	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_int() {$/;"	f	class:internal::char_specs_checker
on_iso_date	src/utility/fmt/chrono.h	/^  void on_iso_date() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_iso_date	src/utility/fmt/chrono.h	/^  void on_iso_date() {}$/;"	f	struct:internal::chrono_formatter
on_iso_time	src/utility/fmt/chrono.h	/^  void on_iso_time() {$/;"	f	struct:internal::chrono_formatter
on_iso_time	src/utility/fmt/chrono.h	/^  void on_iso_time() {}$/;"	f	struct:internal::chrono_format_checker
on_loc_date	src/utility/fmt/chrono.h	/^  void on_loc_date(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_loc_date	src/utility/fmt/chrono.h	/^  void on_loc_date(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_loc_time	src/utility/fmt/chrono.h	/^  void on_loc_time(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_loc_time	src/utility/fmt/chrono.h	/^  void on_loc_time(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_minus	src/utility/fmt/format.h	/^    void on_minus() {}$/;"	f	struct:dynamic_formatter::null_handler
on_minus	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_minus() { specs_.flags |= MINUS_FLAG; }$/;"	f	class:internal::specs_setter
on_minus	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_minus() {$/;"	f	class:internal::specs_checker
on_minute	src/utility/fmt/chrono.h	/^  void on_minute(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_minute	src/utility/fmt/chrono.h	/^  void on_minute(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_num	src/utility/fmt/format.h	/^    void on_num() {$/;"	f	struct:basic_writer::int_writer
on_num	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_num() {}$/;"	f	class:internal::int_type_checker
on_oct	src/utility/fmt/format.h	/^    void on_oct() {$/;"	f	struct:basic_writer::int_writer
on_oct	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_oct() {}$/;"	f	class:internal::int_type_checker
on_plus	src/utility/fmt/format.h	/^    void on_plus() {}$/;"	f	struct:dynamic_formatter::null_handler
on_plus	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_plus() { specs_.flags |= SIGN_FLAG | PLUS_FLAG; }$/;"	f	class:internal::specs_setter
on_plus	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_plus() {$/;"	f	class:internal::specs_checker
on_pointer	src/utility/fmt/format.h	/^    void on_pointer() { formatter.write_pointer(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
on_pointer	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_pointer() {}$/;"	f	class:internal::cstring_type_checker
on_precision	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_precision(unsigned precision) {$/;"	f	class:internal::specs_setter
on_replacement_field	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_replacement_field(const Char *) {}$/;"	f	class:internal::format_string_checker
on_replacement_field	src/utility/fmt/format.h	/^  void on_replacement_field(const Char *p) {$/;"	f	struct:format_handler
on_second	src/utility/fmt/chrono.h	/^  void on_second(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_second	src/utility/fmt/chrono.h	/^  void on_second(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_space	src/utility/fmt/format.h	/^    void on_space() {}$/;"	f	struct:dynamic_formatter::null_handler
on_space	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_space() { specs_.flags |= SIGN_FLAG; }$/;"	f	class:internal::specs_setter
on_space	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_space() {$/;"	f	class:internal::specs_checker
on_string	src/utility/fmt/format.h	/^    void on_string() { formatter.write(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
on_string	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_string() {}$/;"	f	class:internal::cstring_type_checker
on_text	src/utility/fmt/chrono.h	/^  void on_text(const Char *, const Char *) {}$/;"	f	struct:internal::chrono_format_checker
on_text	src/utility/fmt/chrono.h	/^  void on_text(const char_type *begin, const char_type *end) {$/;"	f	struct:internal::chrono_formatter
on_text	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_text(const Char *, const Char *) {}$/;"	f	class:internal::format_string_checker
on_text	src/utility/fmt/format.h	/^  void on_text(const Char *begin, const Char *end) {$/;"	f	struct:format_handler
on_type	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_type(Char type) {$/;"	f	class:internal::specs_setter
on_tz_name	src/utility/fmt/chrono.h	/^  void on_tz_name() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_tz_name	src/utility/fmt/chrono.h	/^  void on_tz_name() {}$/;"	f	struct:internal::chrono_formatter
on_us_date	src/utility/fmt/chrono.h	/^  void on_us_date() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_us_date	src/utility/fmt/chrono.h	/^  void on_us_date() {}$/;"	f	struct:internal::chrono_formatter
on_utc_offset	src/utility/fmt/chrono.h	/^  void on_utc_offset() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_utc_offset	src/utility/fmt/chrono.h	/^  void on_utc_offset() {}$/;"	f	struct:internal::chrono_formatter
on_width	src/utility/fmt/chrono.h	/^    void on_width(unsigned width) { f.spec.width_ = width; }$/;"	f	struct:formatter::spec_handler
on_width	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_width(unsigned width) { specs_.width_ = width; }$/;"	f	class:internal::specs_setter
on_zero	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_checker
on_zero	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_setter
operator !=	src/utility/fmt/core.h	/^  friend bool operator!=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator !=	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR bool operator!=(null_terminating_iterator other) const {$/;"	f	class:internal::null_terminating_iterator
operator &	src/utility/logger.h	/^inline Logger::loggerConf operator&(Logger::loggerConf __a, Logger::loggerConf __b)$/;"	f
operator ()	src/utility/fmt/format-inl.h	/^  void operator()(char *buf) const {$/;"	f	struct:internal::fill
operator ()	src/utility/fmt/format.h	/^      !is_integer<T>::value, unsigned long long>::type operator()(T) {$/;"	f	class:internal::precision_checker
operator ()	src/utility/fmt/format.h	/^      !is_integer<T>::value, unsigned long long>::type operator()(T) {$/;"	f	class:internal::width_checker
operator ()	src/utility/fmt/format.h	/^      is_integer<T>::value, unsigned long long>::type operator()(T value) {$/;"	f	class:internal::precision_checker
operator ()	src/utility/fmt/format.h	/^      is_integer<T>::value, unsigned long long>::type operator()(T value) {$/;"	f	class:internal::width_checker
operator ()	src/utility/fmt/format.h	/^      operator()(T value) {$/;"	f	class:internal::arg_formatter_base
operator ()	src/utility/fmt/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::bin_writer
operator ()	src/utility/fmt/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::dec_writer
operator ()	src/utility/fmt/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::hex_writer
operator ()	src/utility/fmt/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::num_writer
operator ()	src/utility/fmt/format.h	/^    iterator>::type operator()(T value) {$/;"	f	class:internal::arg_formatter_base
operator ()	src/utility/fmt/format.h	/^    void operator()(It &&it) const { *it++ = value; }$/;"	f	struct:internal::arg_formatter_base::char_writer
operator ()	src/utility/fmt/format.h	/^    void operator()(It &&it) const {$/;"	f	struct:basic_writer::inf_or_nan_writer
operator ()	src/utility/fmt/format.h	/^    void operator()(It &&it) const {$/;"	f	struct:basic_writer::padded_int_writer
operator ()	src/utility/fmt/format.h	/^    void operator()(It &&it) const {$/;"	f	struct:basic_writer::str_writer
operator ()	src/utility/fmt/format.h	/^    void operator()(It &&it) {$/;"	f	struct:basic_writer::double_writer
operator ()	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_arg_id(); }$/;"	f	struct:internal::id_adapter
operator ()	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_precision(auto_id()); }$/;"	f	struct:internal::precision_adapter
operator ()	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_width(auto_id()); }$/;"	f	struct:internal::width_adapter
operator ()	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::id_adapter
operator ()	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::precision_adapter
operator ()	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::width_adapter
operator ()	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void operator()(unsigned id) { handler.on_arg_id(id); }$/;"	f	struct:internal::id_adapter
operator ()	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void operator()(unsigned id) { handler.on_dynamic_width(id); }$/;"	f	struct:internal::width_adapter
operator ()	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void operator()(unsigned id) {$/;"	f	struct:internal::precision_adapter
operator ()	src/utility/fmt/format.h	/^  bool operator()(T) const { return false; }$/;"	f	class:internal::custom_formatter
operator ()	src/utility/fmt/format.h	/^  bool operator()(typename basic_format_arg<Context>::handle h) const {$/;"	f	class:internal::custom_formatter
operator ()	src/utility/fmt/format.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:internal::arg_formatter_base
operator ()	src/utility/fmt/format.h	/^  iterator operator()(const char_type *value) {$/;"	f	class:internal::arg_formatter_base
operator ()	src/utility/fmt/format.h	/^  iterator operator()(const void *value) {$/;"	f	class:internal::arg_formatter_base
operator ()	src/utility/fmt/format.h	/^  iterator operator()(monostate) {$/;"	f	class:internal::arg_formatter_base
operator ()	src/utility/fmt/format.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:arg_formatter
operator ()	src/utility/fmt/format.h	/^  std::basic_string<Char> operator()(const Args &... args) const {$/;"	f	class:internal::udl_formatter
operator ()	src/utility/fmt/format.h	/^  void operator()(Char *&buffer) {$/;"	f	class:internal::add_thousands_sep
operator ()	src/utility/fmt/format.h	/^  void operator()(Char *) {}$/;"	f	struct:internal::no_thousands_sep
operator ()	src/utility/fmt/printf.h	/^      operator()(T value) { return value == 0; }$/;"	f	class:internal::is_zero_int
operator ()	src/utility/fmt/printf.h	/^      operator()(T value) {$/;"	f	class:internal::char_converter
operator ()	src/utility/fmt/printf.h	/^      operator()(T value) {$/;"	f	class:internal::printf_precision_handler
operator ()	src/utility/fmt/printf.h	/^      operator()(T value) {$/;"	f	class:internal::printf_width_handler
operator ()	src/utility/fmt/printf.h	/^      operator()(T value) {$/;"	f	class:printf_arg_formatter
operator ()	src/utility/fmt/printf.h	/^      operator()(T) { return false; }$/;"	f	class:internal::is_zero_int
operator ()	src/utility/fmt/printf.h	/^      operator()(T) {$/;"	f	class:internal::printf_width_handler
operator ()	src/utility/fmt/printf.h	/^      operator()(U value) {$/;"	f	class:internal::arg_converter
operator ()	src/utility/fmt/printf.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:printf_arg_formatter
operator ()	src/utility/fmt/printf.h	/^  iterator operator()(const char *value) {$/;"	f	class:printf_arg_formatter
operator ()	src/utility/fmt/printf.h	/^  iterator operator()(const void *value) {$/;"	f	class:printf_arg_formatter
operator ()	src/utility/fmt/printf.h	/^  iterator operator()(const wchar_t *value) {$/;"	f	class:printf_arg_formatter
operator ()	src/utility/fmt/printf.h	/^  iterator operator()(monostate value) {$/;"	f	class:printf_arg_formatter
operator ()	src/utility/fmt/printf.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:printf_arg_formatter
operator ()	src/utility/fmt/printf.h	/^  typename std::enable_if<!std::is_integral<T>::value, int>::type operator()(T) {$/;"	f	class:internal::printf_precision_handler
operator ()	src/utility/fmt/printf.h	/^  typename std::enable_if<!std::is_integral<T>::value>::type operator()(T) {$/;"	f	class:internal::char_converter
operator ()	src/utility/fmt/printf.h	/^  typename std::enable_if<!std::is_integral<U>::value>::type operator()(U) {$/;"	f	class:internal::arg_converter
operator ()	src/utility/fmt/printf.h	/^  void operator()(bool value) {$/;"	f	class:internal::arg_converter
operator ()	src/utility/fmt/ranges.h	/^    void operator()(const T& v) {$/;"	f	struct:formatter::format_each
operator *	src/utility/fmt/format-inl.h	/^FMT_FUNC fp operator*(fp x, fp y) {$/;"	f	namespace:internal
operator *	src/utility/fmt/format.h	/^  T &operator*() const { return blackhole_; }$/;"	f	class:internal::counting_iterator
operator *	src/utility/fmt/format.h	/^  truncating_iterator& operator*() { return *this; }$/;"	f	class:internal::truncating_iterator
operator *	src/utility/fmt/format.h	/^  value_type& operator*() const {$/;"	f	class:internal::truncating_iterator
operator *	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR Char operator*() const {$/;"	f	class:internal::null_terminating_iterator
operator *	src/utility/vector.h	/^  Vec operator*(const double &i) const {$/;"	f	class:Vec
operator *	src/utility/vector.h	/^  Vec operator*(int i) const {$/;"	f	class:Vec
operator +	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator+(difference_type n) {$/;"	f	class:internal::null_terminating_iterator
operator +	src/utility/vector.h	/^  Vec operator+(const Vec &v2) const {$/;"	f	class:Vec
operator ++	src/utility/fmt/format.h	/^  counting_iterator operator++(int) {$/;"	f	class:internal::counting_iterator
operator ++	src/utility/fmt/format.h	/^  counting_iterator& operator++() {$/;"	f	class:internal::counting_iterator
operator ++	src/utility/fmt/format.h	/^  truncating_iterator operator++(int) {$/;"	f	class:internal::truncating_iterator
operator ++	src/utility/fmt/format.h	/^  truncating_iterator& operator++() { return *this; }$/;"	f	class:internal::truncating_iterator
operator ++	src/utility/fmt/format.h	/^  truncating_iterator& operator++() {$/;"	f	class:internal::truncating_iterator
operator ++	src/utility/fmt/format.h	/^  truncating_iterator& operator++(int) { return *this; }$/;"	f	class:internal::truncating_iterator
operator ++	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator++() {$/;"	f	class:internal::null_terminating_iterator
operator ++	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator++(int) {$/;"	f	class:internal::null_terminating_iterator
operator +=	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator+=(difference_type n) {$/;"	f	class:internal::null_terminating_iterator
operator +=	src/utility/vector.h	/^  Vec &operator+=(const Vec &v2) {$/;"	f	class:Vec
operator -	src/utility/fmt/format-inl.h	/^inline fp operator-(fp x, fp y) {$/;"	f	namespace:internal
operator -	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR difference_type operator-($/;"	f	class:internal::null_terminating_iterator
operator -	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator-(difference_type n) {$/;"	f	class:internal::null_terminating_iterator
operator -	src/utility/vector.h	/^  Vec operator-(const Vec &v2) const {$/;"	f	class:Vec
operator --	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator--() {$/;"	f	class:internal::null_terminating_iterator
operator -=	src/utility/vector.h	/^  Vec &operator-=(const Vec &v2) {$/;"	f	class:Vec
operator <	src/utility/fmt/core.h	/^  friend bool operator<(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator <<	src/utility/rng.cpp	/^std::ostream& operator<<(std::ostream& os, RandomFactory& r)$/;"	f
operator <<	src/utility/timer.cpp	/^std::ostream& operator<<(std::ostream& os, timer& t)$/;"	f
operator <=	src/utility/fmt/core.h	/^  friend bool operator<=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator =	src/utility/fmt/format.h	/^  FMT_CONSTEXPR arg_ref &operator=(unsigned idx) {$/;"	f	struct:internal::arg_ref
operator =	src/utility/fmt/format.h	/^  basic_memory_buffer &operator=(basic_memory_buffer &&other) {$/;"	f	class:basic_memory_buffer
operator =	src/utility/fmt/format.h	/^  named_arg<T, Char> operator=(T &&value) const {$/;"	f	struct:internal::udl_arg
operator =	src/utility/fmt/format.h	/^  truncating_iterator& operator=(value_type val) {$/;"	f	class:internal::truncating_iterator
operator =	src/utility/fmt/posix.h	/^  buffered_file& operator=(buffered_file &&other) {$/;"	f	class:buffered_file
operator =	src/utility/fmt/posix.h	/^  file& operator=(file &&other) {$/;"	f	class:file
operator =	src/utility/fmt/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator &operator=(const Char *ptr) {$/;"	f	class:internal::null_terminating_iterator
operator ==	src/utility/fmt/core.h	/^  friend bool operator==(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >	src/utility/fmt/core.h	/^  friend bool operator>(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >=	src/utility/fmt/core.h	/^  friend bool operator>=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >=	src/utility/fmt/printf.h	/^  bool operator>=(null_terminating_iterator other) const {$/;"	f	class:internal::null_terminating_iterator
operator >>	src/utility/rng.cpp	/^std::istream& operator>>(std::istream& is, RandomFactory& r)$/;"	f
operator []	src/utility/fmt/core.h	/^  T &operator[](std::size_t index) { return ptr_[index]; }$/;"	f	class:internal::basic_buffer
operator []	src/utility/fmt/core.h	/^  const T &operator[](std::size_t index) const { return ptr_[index]; }$/;"	f	class:internal::basic_buffer
operator []	src/utility/vector.h	/^  T &operator[](int index) { return _Array[index]; }$/;"	f	class:Vec
operator []	src/utility/vector.h	/^  const T &operator[](int index) const { return _Array[index]; }$/;"	f	class:Vec
operator int	src/utility/fmt/format.h	/^  operator int() const { return 0; }$/;"	f	struct:internal::dummy_int
operator string_view	src/utility/fmt/format.h	/^  operator string_view() const { return string_view(&buffer_[0], size()); }$/;"	f	class:internal::utf16_to_utf8
operator value<Context>	src/utility/fmt/core.h	/^  FMT_CONSTEXPR operator value<Context>() const { return value<Context>(val); }$/;"	f	struct:internal::init
operator wstring_view	src/utility/fmt/format.h	/^  operator wstring_view() const { return wstring_view(&buffer_[0], size()); }$/;"	f	class:internal::utf8_to_utf16
operator |	src/utility/logger.h	/^inline Logger::loggerConf operator|(Logger::loggerConf __a, Logger::loggerConf __b)$/;"	f
order	send.py	/^    order= int(para[0])$/;"	v
order	tool/plt_lambda.py	/^    order = int(para[0])$/;"	v
out	src/utility/fmt/chrono.h	/^  OutputIt out;$/;"	m	struct:internal::chrono_formatter
out	src/utility/fmt/core.h	/^  iterator out() { return out_; }$/;"	f	class:internal::context_base
out	src/utility/fmt/format.h	/^  OutputIt out;$/;"	m	struct:format_to_n_result
out	src/utility/fmt/format.h	/^  iterator out() const { return out_; }$/;"	f	class:basic_writer
out	src/utility/fmt/format.h	/^  iterator out() { return writer_.out(); }$/;"	f	class:internal::arg_formatter_base
out	src/utility/fmt/ranges.h	/^    typename std::add_lvalue_reference<decltype(std::declval<FormatContext>().out())>::type out;$/;"	m	struct:formatter::format_each
out	src/utility/sput.h	/^    FILE *out;$/;"	m	struct:sput
out_	src/utility/fmt/core.h	/^  iterator out_;$/;"	m	class:internal::context_base
out_	src/utility/fmt/format.h	/^  OutputIt out_;$/;"	m	class:internal::truncating_iterator_base
out_	src/utility/fmt/format.h	/^  iterator out_;  \/\/ Output iterator.$/;"	m	class:basic_writer
out_	src/utility/logger.h	/^    std::ofstream out_;$/;"	m	class:Logger
outfile	send.py	/^        outfile = "_out"+str(pid)$/;"	v
outfilepath	send.py	/^    outfilepath = homedir+"\/outfile"$/;"	v
output_range	src/utility/fmt/format.h	/^  explicit output_range(OutputIt it): it_(it) {}$/;"	f	class:output_range
output_range	src/utility/fmt/format.h	/^class output_range {$/;"	c
overall	src/utility/sput.h	/^    } overall;$/;"	m	struct:sput	typeref:struct:sput::sput_overall
padded_int_writer	src/utility/fmt/format.h	/^  struct padded_int_writer {$/;"	s	class:basic_writer
padding	src/utility/fmt/format.h	/^    std::size_t padding;$/;"	m	struct:basic_writer::padded_int_writer
para	polar_eqTime.py	/^        para = file.readline().split(" ")$/;"	v
para	polar_eqTime.py	/^    para = eachline.split()$/;"	v
para	polar_lam.py	/^    para = eachline.split()$/;"	v
para	polar_lam_order.py	/^    para = eachline.split()$/;"	v
para	send.py	/^    para = eachline.split()$/;"	v
para	tool/plt_lambda.py	/^    para = file.readline().split(" ")$/;"	v
para	tool/plt_polar_diag.py	/^    para = eachline.split()$/;"	v
para	tool/plt_polar_lam.py	/^    para = eachline.split()$/;"	v
param	IO.py	/^class param:$/;"	c
parameter	src/global.h	/^struct parameter {$/;"	s
parameters	polar_eqTime.py	/^        parameters = ' '.join(para[:-2])$/;"	v
parameters	send.py	/^        parameters = ' '.join(para[:-2])$/;"	v
parentdir	diagram/logger.py	/^parentdir = os.path.dirname(currentdir)$/;"	v
parse	src/utility/fmt/format.h	/^  FMT_CONSTEXPR typename ParseContext::iterator parse(ParseContext &ctx) {$/;"	f	struct:formatter
parse_align	src/utility/fmt/format.h	/^FMT_CONSTEXPR const Char *parse_align($/;"	f	namespace:internal
parse_arg_id	src/utility/fmt/format.h	/^FMT_CONSTEXPR const Char *parse_arg_id($/;"	f	namespace:internal
parse_chrono_format	src/utility/fmt/chrono.h	/^FMT_CONSTEXPR const Char *parse_chrono_format($/;"	f	namespace:internal
parse_context	src/utility/fmt/core.h	/^  basic_parse_context<char_type> &parse_context() { return parse_context_; }$/;"	f	class:internal::context_base
parse_context	src/utility/fmt/core.h	/^typedef basic_parse_context<char> parse_context;$/;"	t
parse_context_	src/utility/fmt/core.h	/^  basic_parse_context<Char> parse_context_;$/;"	m	class:internal::context_base
parse_context_type	src/utility/fmt/format.h	/^  typedef basic_parse_context<Char, ErrorHandler> parse_context_type;$/;"	t	class:internal::format_string_checker
parse_flags	src/utility/fmt/printf.h	/^void basic_printf_context<OutputIt, Char, AF>::parse_flags($/;"	f	class:basic_printf_context
parse_format_specs	src/utility/fmt/format.h	/^    parse_format_specs(ParseContext &ctx) {$/;"	f	namespace:internal
parse_format_specs	src/utility/fmt/format.h	/^FMT_CONSTEXPR const Char *parse_format_specs($/;"	f	namespace:internal
parse_format_string	src/utility/fmt/format.h	/^FMT_CONSTEXPR void parse_format_string($/;"	f	namespace:internal
parse_func	src/utility/fmt/format.h	/^  typedef const Char *(*parse_func)(parse_context_type &);$/;"	t	class:internal::format_string_checker
parse_funcs_	src/utility/fmt/format.h	/^  parse_func parse_funcs_[NUM_ARGS > 0 ? NUM_ARGS : 1];$/;"	m	class:internal::format_string_checker
parse_header	src/utility/fmt/printf.h	/^unsigned basic_printf_context<OutputIt, Char, AF>::parse_header($/;"	f	class:basic_printf_context
parse_nonnegative_int	src/utility/fmt/format.h	/^FMT_CONSTEXPR unsigned parse_nonnegative_int($/;"	f	namespace:internal
parse_nonnegative_int	src/utility/fmt/printf.h	/^FMT_CONSTEXPR unsigned parse_nonnegative_int(Iterator &it, ErrorHandler &&eh) {$/;"	f	namespace:internal
parse_width	src/utility/fmt/format.h	/^FMT_CONSTEXPR const Char *parse_width($/;"	f	namespace:internal
pi	forkE.py	/^    pi=np.pi$/;"	v
plt_type	tool/plt_polar_diag.py	/^plt_type = 0  #0: (optimzed) G(q) order 5,  1: G(q) with different lambda$/;"	v
plt_type	tool/plt_polar_lam.py	/^plt_type = 0     #0: (optimzed) G(q) order 5,  1: G(q) with fixQ$/;"	v
pltindex	tool/plt_polar_lam.py	/^pltindex = {0.125:0, 0.25:1, 0.5:2, 1.0:3, 2.0:4, 4.0:5, 8.0:6, 16.0:7}$/;"	v
pointer	src/utility/fmt/core.h	/^    const void *pointer;$/;"	m	union:internal::value::__anon1
pointer	src/utility/fmt/format.h	/^  typedef T* pointer;$/;"	t	class:internal::counting_iterator
pointer	src/utility/fmt/format.h	/^  typedef void pointer;$/;"	t	class:internal::truncating_iterator_base
pointer	src/utility/fmt/printf.h	/^  typedef const Char* pointer;$/;"	t	class:internal::null_terminating_iterator
pointer_from	src/utility/fmt/printf.h	/^FMT_CONSTEXPR const Char *pointer_from(null_terminating_iterator<Char> it) {$/;"	f	namespace:internal
pointer_from	src/utility/fmt/printf.h	/^FMT_CONSTEXPR const T *pointer_from(const T *p) { return p; }$/;"	f	namespace:internal
pointer_type	src/utility/fmt/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
points	tool/plt_polar_diag.py	/^points = ['o','^','s','v','p','<','h','>']$/;"	v
points	tool/plt_polar_lam.py	/^points = ['o','^','s','v','p','<','h','>']$/;"	v
polar	diagram/polar.py	/^class polar():$/;"	c
polar	src/markov.h	/^typedef array<double, ExtMomBinSize> polar;$/;"	t	namespace:mc
polar0	polar_lam_order.py	/^polar0 = []$/;"	v
polar0	polar_lam_order.py	/^polar0 = np.array(polar0)$/;"	v
polar1	tool/plt_polar_lam.py	/^                polar1 = np.loadtxt(file)$/;"	v
polar_diag	polar_lam_order.py	/^polar_diag = []$/;"	v
polar_diag	polar_lam_order.py	/^polar_diag = np.array(polar_diag)$/;"	v
polarization	tool/plt_lambda.py	/^    polarization = {1:[], 2:[], 3:[], 4:[], 5:[], -1:[]}$/;"	v
pool	src/diagram.h	/^struct pool {$/;"	s	namespace:diag
postfix	src/utility/fmt/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_range
postfix	src/utility/fmt/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_tuple
pp	forkE.py	/^        pp = l\/kF*(np.arctan((k+kF)\/l)-np.arctan((k-kF)\/l))$/;"	v
pp	forkE.py	/^        pp = lam\/kF*(np.arctan((k+kF)\/lam)-np.arctan((k-kF)\/lam))$/;"	v
precision	src/utility/fmt/format.h	/^  int precision;$/;"	m	struct:core_format_specs
precision_adapter	src/utility/fmt/format.h	/^  explicit FMT_CONSTEXPR precision_adapter(SpecHandler &h) : handler(h) {}$/;"	f	struct:internal::precision_adapter
precision_adapter	src/utility/fmt/format.h	/^struct precision_adapter {$/;"	s	namespace:internal
precision_checker	src/utility/fmt/format.h	/^  explicit FMT_CONSTEXPR precision_checker(ErrorHandler &eh) : handler_(eh) {}$/;"	f	class:internal::precision_checker
precision_checker	src/utility/fmt/format.h	/^class precision_checker: public function<unsigned long long> {$/;"	c	namespace:internal
precision_ref	src/utility/fmt/format.h	/^  arg_ref<Char> precision_ref;$/;"	m	struct:internal::dynamic_format_specs
prefix	src/utility/fmt/format.h	/^    char prefix[4];$/;"	m	struct:basic_writer::int_writer
prefix	src/utility/fmt/format.h	/^    string_view prefix;$/;"	m	struct:basic_writer::padded_int_writer
prefix	src/utility/fmt/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_range
prefix	src/utility/fmt/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_tuple
prefix_size	src/utility/fmt/format.h	/^    unsigned prefix_size;$/;"	m	struct:basic_writer::int_writer
prettify_handler	src/utility/fmt/format-inl.h	/^  explicit prettify_handler(buffer &b, ptrdiff_t n)$/;"	f	struct:internal::prettify_handler
prettify_handler	src/utility/fmt/format-inl.h	/^struct prettify_handler {$/;"	s	namespace:internal
print	src/utility/fmt/ostream.h	/^print(std::basic_ostream<FMT_CHAR(S)> &os, const S &format_str,$/;"	f
print	src/utility/fmt/posix.h	/^  inline void print(string_view format_str, const Args & ... args) {$/;"	f	class:buffered_file
print	src/utility/logger.cpp	/^void Logger::print(const unsigned int verbosityLevel,$/;"	f	class:Logger
print_colored	src/utility/fmt/color.h	/^inline void print_colored(color c, string_view format_str,$/;"	f
print_colored	src/utility/fmt/color.h	/^inline void print_colored(color c, wstring_view format_str,$/;"	f
printf	src/utility/fmt/printf.h	/^    printf(const S &format_str, const Args & ... args) {$/;"	f
printf	src/utility/fmt/printf.h	/^void printf(basic_buffer<Char> &buf, basic_string_view<Char> format,$/;"	f	namespace:internal
printf_arg_formatter	src/utility/fmt/printf.h	/^  printf_arg_formatter(internal::basic_buffer<char_type> &buffer,$/;"	f	class:printf_arg_formatter
printf_arg_formatter	src/utility/fmt/printf.h	/^class printf_arg_formatter:$/;"	c
printf_args	src/utility/fmt/printf.h	/^typedef basic_format_args<printf_context> printf_args;$/;"	t
printf_context	src/utility/fmt/printf.h	/^typedef basic_printf_context_t<internal::buffer>::type printf_context;$/;"	t
printf_formatter	src/utility/fmt/printf.h	/^struct printf_formatter {$/;"	s
printf_precision_handler	src/utility/fmt/printf.h	/^class printf_precision_handler: public function<int> {$/;"	c	namespace:internal
printf_width_handler	src/utility/fmt/printf.h	/^  explicit printf_width_handler(format_specs &spec) : spec_(spec) {}$/;"	f	class:internal::printf_width_handler
printf_width_handler	src/utility/fmt/printf.h	/^class printf_width_handler: public function<unsigned> {$/;"	c	namespace:internal
process_specs	src/utility/fmt/format-inl.h	/^FMT_FUNC gen_digits_params process_specs(const core_format_specs &specs,$/;"	f	namespace:internal
ptr	src/utility/fmt/format.h	/^inline const void *ptr(const T *p) { return p; }$/;"	f
ptr_	src/utility/fmt/core.h	/^  T *ptr_;$/;"	m	class:internal::basic_buffer
ptr_	src/utility/fmt/printf.h	/^  const Char *ptr_;$/;"	m	class:internal::null_terminating_iterator
push_back	src/utility/fmt/core.h	/^  void push_back(const T &value) {$/;"	f	class:internal::basic_buffer
push_back	src/utility/fmt/core.h	/^  void push_back(value<Context> val) {$/;"	f	class:internal::arg_map
q	tool/plt_lambda.py	/^    q = (index*(ExtMomMax-ExtMomMin)\/ExtMomBin+ExtMomMin) *Para.kF$/;"	v
qindex	tool/plt_lambda.py	/^qindex = range(ExtMomBin)$/;"	v
qmax	tool/plt_polar_lam.py	/^    qmax = float(para[5])$/;"	v
qq	forkE.py	/^    qq = 1 - pp - (l**2+kF**2-k**2)\/(4*k*kF)*np.log((l**2+(k-kF)**2)\/(l**2+(k+kF)**2))$/;"	v
qq	forkE.py	/^    qq = 1 - pp - (lam**2+kF**2-k**2)\/(4*k*kF)*np.log((lam**2+(k-kF)**2)\/(lam**2+(k+kF)**2))$/;"	v
range	src/utility/fmt/format.h	/^  typedef Range range;$/;"	t	class:arg_formatter
range	src/utility/fmt/format.h	/^  typedef typename ArgFormatter::range range;$/;"	t	struct:format_handler
range_length_limit	src/utility/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const std::size_t range_length_limit =$/;"	m	struct:formatting_range
rank	diagram/nullspace.py	/^def rank(A, atol=1e-13, rtol=0):$/;"	f
red	color.py	/^red = _wrap_with('31')$/;"	v
red	diagram/color.py	/^red = _wrap_with('31')$/;"	v
red	src/utility/fmt/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
reference	src/utility/fmt/format.h	/^  typedef T& reference;$/;"	t	class:internal::counting_iterator
reference	src/utility/fmt/format.h	/^  typedef void reference;$/;"	t	class:internal::truncating_iterator_base
reference	src/utility/fmt/printf.h	/^  typedef const Char& reference;$/;"	t	class:internal::null_terminating_iterator
remove_prefix	src/utility/fmt/core.h	/^  FMT_CONSTEXPR void remove_prefix(size_t n) {$/;"	f	class:basic_string_view
remove_trailing	src/utility/fmt/format-inl.h	/^  void remove_trailing(char c) {$/;"	f	struct:internal::prettify_handler
remove_trailing	src/utility/fmt/format-inl.h	/^  void remove_trailing(char) {}$/;"	f	struct:internal::char_counter
report_no_date	src/utility/fmt/chrono.h	/^  void report_no_date() { throw format_error("no date"); }$/;"	f	struct:internal::chrono_format_checker
require_numeric_argument	src/utility/fmt/format.h	/^  FMT_CONSTEXPR void require_numeric_argument() {$/;"	f	class:internal::specs_checker
reserve	src/utility/fmt/core.h	/^  void reserve(std::size_t new_capacity) {$/;"	f	class:internal::basic_buffer
reserve	src/utility/fmt/format.h	/^    reserve(std::back_insert_iterator<Container> &it, std::size_t n) {$/;"	f	namespace:internal
reserve	src/utility/fmt/format.h	/^  auto reserve(std::size_t n) -> decltype(internal::reserve(out_, n)) {$/;"	f	class:basic_writer
reserve	src/utility/fmt/format.h	/^inline Iterator &reserve(Iterator &it, std::size_t) { return it; }$/;"	f	namespace:internal
resize	src/utility/fmt/core.h	/^  void resize(std::size_t new_size) {$/;"	f	class:internal::basic_buffer
restart	src/utility/timer.cpp	/^void timer::restart(const char* msg)$/;"	f	class:timer
result	src/utility/fmt/core.h	/^  typedef decltype(to_string_view(declval<S>())) result;$/;"	t	struct:internal::char_t
result	src/utility/fmt/format.h	/^  struct result { typedef Result type; };$/;"	s	struct:internal::function
result	src/utility/fmt/format.h	/^  typedef typename std::remove_reference<type>::type result;$/;"	t	class:internal::is_output_iterator
result	src/utility/fmt/ostream.h	/^  typedef decltype(test<T>(0)) result;$/;"	m	class:internal::is_streamable
result_of	src/utility/fmt/core.h	/^struct result_of<F(Args...)> {$/;"	s	namespace:internal
rootdir	send.py	/^rootdir = os.getcwd()$/;"	v
rs	forkE.py	/^    rs = float(rs)$/;"	v
rs	polar_eqTime.py	/^        rs   = float(para[2])$/;"	v
rs	polar_lam.py	/^    rs   = float(para[2])$/;"	v
rs	polar_lam_order.py	/^    rs   = float(para[2])$/;"	v
rs	send.py	/^    rs   = float(para[2])$/;"	v
rs	tool/plt_lambda.py	/^    rs   = float(para[2])$/;"	v
rs	tool/plt_polar_diag.py	/^    rs   = float(para[2])$/;"	v
rs	tool/plt_polar_lam.py	/^    rs   = float(para[2])$/;"	v
running	src/utility/timer.h	/^    bool running;$/;"	m	class:timer
s	src/utility/fmt/chrono.h	/^  std::chrono::seconds s;$/;"	m	struct:internal::chrono_formatter
s	src/utility/fmt/format.h	/^    const Char *s;$/;"	m	struct:basic_writer::str_writer
screenVerbosityLevel_	src/utility/logger.h	/^    unsigned int screenVerbosityLevel_;$/;"	m	class:Logger
screen_off	src/utility/logger.h	/^    static const loggerConf screen_off = L_screen_;$/;"	m	class:Logger
screen_on	src/utility/logger.h	/^    static const loggerConf screen_on = L_noscreen_;$/;"	m	class:Logger
second	src/utility/fmt/chrono.h	/^  int second() const { return to_int(s.count() % 60); }$/;"	f	struct:internal::chrono_formatter
self	src/utility/fmt/format.h	/^      int_writer &self;$/;"	m	struct:basic_writer::int_writer::hex_writer
selfenergy	src/global.h	/^enum selfenergy { BARE, FOCK, DRESSED }; \/\/ self energy type$/;"	g
sentinel	src/utility/fmt/format.h	/^  typedef void sentinel;$/;"	t	class:output_range
sep	src/utility/fmt/format.h	/^      char_type sep;$/;"	m	struct:basic_writer::int_writer::num_writer
sep	src/utility/fmt/format.h	/^  basic_string_view<Char> sep;$/;"	m	struct:arg_join
sep_	src/utility/fmt/format.h	/^  basic_string_view<Char> sep_;$/;"	m	class:internal::add_thousands_sep
set_dynamic_spec	src/utility/fmt/format.h	/^FMT_CONSTEXPR void set_dynamic_spec($/;"	f	namespace:internal
shift	tool/fock.py	/^shift=Sigma_x(EF, EF, lam)$/;"	v
shift0	forkE.py	/^    shift0 = shift0_value(beta0)$/;"	v
shift0_value	forkE.py	/^def shift0_value(x):$/;"	f
sigma	forkE.py	/^        sigma = interpolate.PchipInterpolator(km, forkSigma)$/;"	v
sigma_order	forkE.py	/^    sigma_order={}$/;"	v
sign	src/utility/fmt/format.h	/^    char sign;$/;"	m	struct:basic_writer::double_writer
sign	src/utility/fmt/format.h	/^    char sign;$/;"	m	struct:basic_writer::inf_or_nan_writer
significand_size	src/utility/fmt/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int significand_size =$/;"	m	class:internal::fp
significand_type	src/utility/fmt/format-inl.h	/^  typedef uint64_t significand_type;$/;"	t	class:internal::fp
size	forkE.py	/^    size = 16$/;"	v
size	polar_eqTime.py	/^size = 12$/;"	v
size	src/utility/fmt/core.h	/^  FMT_CONSTEXPR size_t size() const { return size_; }$/;"	f	class:basic_string_view
size	src/utility/fmt/core.h	/^  std::size_t size;$/;"	m	struct:internal::string_value
size	src/utility/fmt/format-inl.h	/^  ptrdiff_t size;$/;"	m	struct:internal::char_counter
size	src/utility/fmt/format-inl.h	/^  ptrdiff_t size;$/;"	m	struct:internal::prettify_handler
size	src/utility/fmt/format.h	/^      int size;$/;"	m	struct:basic_writer::int_writer::num_writer
size	src/utility/fmt/format.h	/^    size_t size() const { return 1; }$/;"	f	struct:internal::arg_formatter_base::char_writer
size	src/utility/fmt/format.h	/^    size_t size() const { return buffer.size() + (sign ? 1 : 0); }$/;"	f	struct:basic_writer::double_writer
size	src/utility/fmt/format.h	/^    size_t size() const { return size_; }$/;"	f	struct:basic_writer::padded_int_writer
size	src/utility/fmt/format.h	/^    size_t size() const { return size_; }$/;"	f	struct:basic_writer::str_writer
size	src/utility/fmt/format.h	/^    size_t size() const {$/;"	f	struct:basic_writer::inf_or_nan_writer
size	src/utility/fmt/format.h	/^  enum { size = 0 };$/;"	e	enum:internal::no_thousands_sep::__anon4
size	src/utility/fmt/format.h	/^  enum { size = 1 };$/;"	e	enum:internal::add_thousands_sep::__anon5
size	src/utility/fmt/format.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf16_to_utf8
size	src/utility/fmt/format.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf8_to_utf16
size	src/utility/fmt/format.h	/^  std::size_t size() const {$/;"	f	class:format_int
size	src/utility/fmt/format.h	/^  std::size_t size;$/;"	m	struct:format_to_n_result
size	src/utility/vector.h	/^  uint size() const { return D; }$/;"	f	class:Vec
size	tool/plt_lambda.py	/^size = 11$/;"	v
size	tool/plt_polar_diag.py	/^size = 12$/;"	v
size	tool/plt_polar_lam.py	/^size = 12$/;"	v
size_	src/utility/fmt/core.h	/^    : data_(s), size_(count) {}$/;"	f	class:basic_string_view
size_	src/utility/fmt/core.h	/^  : data_(s.data()), size_(s.size()) {}$/;"	f	class:basic_string_view
size_	src/utility/fmt/core.h	/^  size_t size_;$/;"	m	class:basic_string_view
size_	src/utility/fmt/core.h	/^  std::size_t size_;$/;"	m	class:internal::basic_buffer
size_	src/utility/fmt/core.h	/^  unsigned size_;$/;"	m	class:internal::arg_map
size_	src/utility/fmt/format.h	/^    size_t size_;$/;"	m	struct:basic_writer::padded_int_writer
size_	src/utility/fmt/format.h	/^    size_t size_;$/;"	m	struct:basic_writer::str_writer
spec	src/utility/fmt/chrono.h	/^  align_spec spec;$/;"	m	struct:formatter
spec	src/utility/fmt/format.h	/^    const Spec &spec;$/;"	m	struct:basic_writer::int_writer
spec	src/utility/fmt/format.h	/^  format_specs *spec() { return specs_; }$/;"	f	class:internal::arg_formatter_base
spec_	src/utility/fmt/printf.h	/^  format_specs &spec_;$/;"	m	class:internal::printf_width_handler
spec_handler	src/utility/fmt/chrono.h	/^  struct spec_handler {$/;"	s	struct:formatter
specs_	src/utility/fmt/format.h	/^  basic_format_specs<Char> &specs_;$/;"	m	class:internal::specs_setter
specs_	src/utility/fmt/format.h	/^  dynamic_format_specs<char_type> &specs_;$/;"	m	class:internal::dynamic_specs_handler
specs_	src/utility/fmt/format.h	/^  format_specs *specs_;$/;"	m	class:internal::arg_formatter_base
specs_	src/utility/fmt/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	class:dynamic_formatter
specs_	src/utility/fmt/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	struct:formatter
specs_checker	src/utility/fmt/format.h	/^  FMT_CONSTEXPR specs_checker(const Handler& handler, internal::type arg_type)$/;"	f	class:internal::specs_checker
specs_checker	src/utility/fmt/format.h	/^  FMT_CONSTEXPR specs_checker(const specs_checker &other)$/;"	f	class:internal::specs_checker
specs_checker	src/utility/fmt/format.h	/^class specs_checker : public Handler {$/;"	c	namespace:internal
specs_handler	src/utility/fmt/format.h	/^  FMT_CONSTEXPR specs_handler($/;"	f	class:internal::specs_handler
specs_handler	src/utility/fmt/format.h	/^class specs_handler: public specs_setter<typename Context::char_type> {$/;"	c	namespace:internal
specs_setter	src/utility/fmt/format.h	/^  FMT_CONSTEXPR specs_setter(const specs_setter &other): specs_(other.specs_) {}$/;"	f	class:internal::specs_setter
specs_setter	src/utility/fmt/format.h	/^  explicit FMT_CONSTEXPR specs_setter(basic_format_specs<Char> &specs):$/;"	f	class:internal::specs_setter
specs_setter	src/utility/fmt/format.h	/^class specs_setter {$/;"	c	namespace:internal
spin	src/global.h	/^enum spin { DOWN, UP };$/;"	g
sprintf	src/utility/fmt/printf.h	/^    sprintf(const S &format, const Args & ... args) {$/;"	f
sprintf_format	src/utility/fmt/format-inl.h	/^void sprintf_format(Double value, internal::buffer &buf,$/;"	f	namespace:internal
sput	src/utility/sput.h	/^static struct sput {$/;"	s
sput_check	src/utility/sput.h	/^    struct sput_check {$/;"	s	struct:sput
sput_enter_suite	src/utility/sput.h	179;"	d
sput_fail_if	src/utility/sput.h	207;"	d
sput_fail_unless	src/utility/sput.h	226;"	d
sput_finish_testing	src/utility/sput.h	190;"	d
sput_get_return_value	src/utility/sput.h	176;"	d
sput_leave_suite	src/utility/sput.h	163;"	d
sput_overall	src/utility/sput.h	/^    struct sput_overall {$/;"	s	struct:sput
sput_run_test	src/utility/sput.h	245;"	d
sput_set_output_stream	src/utility/sput.h	202;"	d
sput_start_testing	src/utility/sput.h	155;"	d
sput_suite	src/utility/sput.h	/^    struct sput_suite {$/;"	s	struct:sput
sput_test	src/utility/sput.h	/^    struct sput_test {$/;"	s	struct:sput
sput_time	src/utility/sput.h	/^    struct sput_time {$/;"	s	struct:sput
squaredNorm	src/utility/vector.h	/^  double squaredNorm() const {$/;"	f	class:Vec
sstring	src/utility/fmt/core.h	/^    string_value<signed char> sstring;$/;"	m	union:internal::value::__anon1
standard	src/utility/fmt/chrono.h	/^  standard,$/;"	m	class:internal::numeric_system
start	src/utility/sput.h	/^        time_t start;$/;"	m	struct:sput::sput_time
start	src/utility/timer.cpp	/^void timer::start(const char* msg)$/;"	f	class:timer
start_clock	src/utility/timer.h	/^    clock_t start_clock;$/;"	m	class:timer
start_time	src/utility/timer.h	/^    time_t start_time;$/;"	m	class:timer
std	src/utility/fmt/format.h	/^namespace std {$/;"	n
stop	src/utility/timer.cpp	/^void timer::stop(const char* msg)$/;"	f	class:timer
store_	src/utility/fmt/format.h	/^  T store_[SIZE];$/;"	m	class:basic_memory_buffer
str	src/utility/fmt/format.h	/^    const char *str;$/;"	m	struct:basic_writer::inf_or_nan_writer
str	src/utility/fmt/format.h	/^  const Char *str;$/;"	m	struct:internal::udl_arg
str	src/utility/fmt/format.h	/^  std::string str() const { return std::string(&buffer_[0], size()); }$/;"	f	class:internal::utf16_to_utf8
str	src/utility/fmt/format.h	/^  std::string str() const { return std::string(str_, size()); }$/;"	f	class:format_int
str	src/utility/fmt/format.h	/^  std::wstring str() const { return std::wstring(&buffer_[0], size()); }$/;"	f	class:internal::utf8_to_utf16
str_	src/utility/fmt/format.h	/^  char *str_;$/;"	m	class:format_int
str_writer	src/utility/fmt/format.h	/^  struct str_writer {$/;"	s	class:basic_writer
strerror_r	src/utility/fmt/format-inl.h	/^inline fmt::internal::null<> strerror_r(int, char *, ...) {$/;"	f
strerror_s	src/utility/fmt/format-inl.h	/^inline fmt::internal::null<> strerror_s(char *, std::size_t, ...) {$/;"	f
strftime	src/utility/fmt/time.h	/^inline std::size_t strftime(char *str, std::size_t count, const char *format,$/;"	f	namespace:internal
strftime	src/utility/fmt/time.h	/^inline std::size_t strftime(wchar_t *str, std::size_t count,$/;"	f	namespace:internal
string	src/utility/fmt/core.h	/^    string_value<char_type> string;$/;"	m	union:internal::value::__anon1
string_type	src/utility/fmt/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
string_value	src/utility/fmt/core.h	/^struct string_value {$/;"	s	namespace:internal
string_view	src/utility/fmt/core.h	/^typedef basic_string_view<char> string_view;$/;"	t
strtod	src/utility/fmt/posix.h	/^  double strtod(const char *&str) const {$/;"	f	class:Locale
strtod_l	src/utility/fmt/posix.h	/^  static double strtod_l(const char *nptr, char **endptr, _locale_t locale) {$/;"	f	class:Locale
suite	src/utility/sput.h	/^    } suite;$/;"	m	struct:sput	typeref:struct:sput::sput_suite
suites	src/utility/sput.h	/^        unsigned long suites;$/;"	m	struct:sput::sput_overall
system_error	src/utility/fmt/format.h	/^  system_error() : std::runtime_error("") {}$/;"	f	class:system_error
system_error	src/utility/fmt/format.h	/^  system_error(int error_code, string_view message, const Args &... args)$/;"	f	class:system_error
system_error	src/utility/fmt/format.h	/^class system_error : public std::runtime_error {$/;"	c
tau	src/diagram.h	/^typedef std::array<int, 2> tau; \/\/ array to store the tau basis (In and Out)$/;"	t	namespace:diag
test	src/utility/sput.h	/^    } test;$/;"	m	struct:sput	typeref:struct:sput::sput_test
test_stream	src/utility/fmt/ostream.h	/^struct test_stream : std::basic_ostream<Char> {$/;"	s	namespace:internal
thousands_sep	src/utility/fmt/format.h	/^inline Char thousands_sep(locale_ref loc) {$/;"	f	namespace:internal
thousands_sep	src/utility/fmt/format.h	/^inline wchar_t thousands_sep(locale_ref loc) {$/;"	f	namespace:internal
thousands_sep_impl	src/utility/fmt/format-inl.h	/^FMT_FUNC Char thousands_sep_impl(locale_ref loc) {$/;"	f	namespace:internal
time	src/utility/fmt/chrono.h	/^  std::tm time() const {$/;"	f	struct:internal::chrono_formatter
time	src/utility/sput.h	/^    } time;$/;"	m	struct:sput	typeref:struct:sput::sput_time
timer	src/utility/timer.h	/^    timer()$/;"	f	class:timer
timer	src/utility/timer.h	/^class timer {$/;"	c
title	send.py	/^        title="_eqTime"$/;"	v
title	send.py	/^        title="_freq"$/;"	v
tm_format	src/utility/fmt/time.h	/^  basic_memory_buffer<Char> tm_format;$/;"	m	struct:formatter
to_char8_t	src/utility/fmt/format.h	/^inline char8_t to_char8_t(char c) { return static_cast<char8_t>(c); }$/;"	f	namespace:internal
to_int	src/utility/fmt/chrono.h	/^inline int to_int(Int value) {$/;"	f	namespace:internal
to_string	src/utility/fmt/format.h	/^std::basic_string<Char> to_string(const basic_memory_buffer<Char, SIZE> &buf) {$/;"	f
to_string	src/utility/fmt/format.h	/^std::string to_string(const T &value) {$/;"	f
to_string_view	src/utility/fmt/core.h	/^  to_string_view(FMT_STRING_VIEW<Char> s) { return s; }$/;"	f
to_string_view	src/utility/fmt/core.h	/^  to_string_view(basic_string_view<Char> s) { return s; }$/;"	f
to_string_view	src/utility/fmt/core.h	/^  to_string_view(const S &s) { return s; }$/;"	f
to_string_view	src/utility/fmt/core.h	/^  to_string_view(const std::basic_string<Char> &s) { return s; }$/;"	f
to_string_view	src/utility/fmt/core.h	/^inline basic_string_view<Char> to_string_view(const Char *s) { return s; }$/;"	f
to_unsigned	src/utility/fmt/core.h	/^FMT_CONSTEXPR typename std::make_unsigned<Int>::type to_unsigned(Int value) {$/;"	f	namespace:internal
to_wstring	src/utility/fmt/format.h	/^std::wstring to_wstring(const T &value) {$/;"	f
trailing_zeros	src/utility/fmt/format-inl.h	/^  bool trailing_zeros;$/;"	m	struct:internal::gen_digits_params
traits	src/utility/fmt/format.h	/^  typedef std::iterator_traits<OutputIt> traits;$/;"	t	class:internal::truncating_iterator
traits_type	src/utility/fmt/ostream.h	/^  typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:internal::formatbuf
truncating_iterator	src/utility/fmt/format.h	/^  truncating_iterator(OutputIt out, std::size_t limit)$/;"	f	class:internal::truncating_iterator
truncating_iterator	src/utility/fmt/format.h	/^class truncating_iterator<OutputIt, std::false_type>:$/;"	c	namespace:internal
truncating_iterator	src/utility/fmt/format.h	/^class truncating_iterator<OutputIt, std::true_type>:$/;"	c	namespace:internal
truncating_iterator_base	src/utility/fmt/format.h	/^  truncating_iterator_base(OutputIt out, std::size_t limit)$/;"	f	class:internal::truncating_iterator_base
truncating_iterator_base	src/utility/fmt/format.h	/^class truncating_iterator_base {$/;"	c	namespace:internal
type	src/global.h	/^enum type { RG, POLAR };$/;"	g
type	src/utility/fmt/core.h	/^    std::back_insert_iterator<internal::basic_buffer<Char>>, Char> type;$/;"	t	struct:buffer_context
type	src/utility/fmt/core.h	/^    typename std::remove_reference<F>::type(Args...)>::type type;$/;"	t	struct:internal::result_of
type	src/utility/fmt/core.h	/^  internal::type type() const { return type_; }$/;"	f	class:basic_format_arg
type	src/utility/fmt/core.h	/^  struct formatter_type { typedef formatter<T, char_type> type; };$/;"	t	struct:basic_format_context::formatter_type
type	src/utility/fmt/core.h	/^  typedef typename result::char_type type;$/;"	t	struct:internal::char_t
type	src/utility/fmt/core.h	/^enum type {$/;"	g	namespace:internal
type	src/utility/fmt/format.h	/^    typename format_context_t<OutputIt, Char>::type> type;$/;"	t	struct:format_args_t
type	src/utility/fmt/format.h	/^    typename format_to_n_context<OutputIt, Char>::type> type;$/;"	t	struct:format_to_n_args
type	src/utility/fmt/format.h	/^  char type;$/;"	m	struct:core_format_specs
type	src/utility/fmt/format.h	/^  char type;$/;"	m	struct:float_spec_handler
type	src/utility/fmt/format.h	/^  struct result { typedef Result type; };$/;"	t	struct:internal::function::result
type	src/utility/fmt/format.h	/^  typedef decltype(test<It>(typename it_category<It>::type{})) type;$/;"	t	class:internal::is_output_iterator
type	src/utility/fmt/format.h	/^  typedef typename T::iterator_category type;$/;"	t	struct:internal::it_category
type	src/utility/fmt/format.h	/^struct checked { typedef stdext::checked_array_iterator<T*> type; };$/;"	t	struct:internal::checked
type	src/utility/fmt/format.h	/^struct format_context_t { typedef basic_format_context<OutputIt, Char> type; };$/;"	t	struct:format_context_t
type	src/utility/fmt/format.h	/^struct it_category<T*> { typedef std::random_access_iterator_tag type; };$/;"	t	struct:internal::it_category
type	src/utility/fmt/format.h	/^struct void_ { typedef void type; };$/;"	t	struct:internal::void_
type	src/utility/fmt/printf.h	/^    std::back_insert_iterator<Buffer>, typename Buffer::value_type> type;$/;"	t	struct:basic_printf_context_t
type	src/utility/fmt/printf.h	/^  struct formatter_type { typedef printf_formatter<T> type; };$/;"	t	struct:basic_printf_context::formatter_type
type	src/utility/fmt/printf.h	/^  typedef bool type;$/;"	t	struct:internal::make_unsigned_or_bool
type	src/utility/sput.h	/^        const char *type;$/;"	m	struct:sput::sput_check
type_	src/utility/fmt/core.h	/^  internal::type type_;$/;"	m	class:basic_format_arg
type_	src/utility/fmt/format.h	/^  char type_;$/;"	m	class:internal::char_specs_checker
type_	src/utility/fmt/printf.h	/^  typename Context::char_type type_;$/;"	m	class:internal::arg_converter
type_tag	src/utility/fmt/core.h	/^  static const type type_tag = TYPE;$/;"	m	struct:internal::init
u8string_view	src/utility/fmt/format.h	/^  u8string_view(const char *s):$/;"	f	class:u8string_view
u8string_view	src/utility/fmt/format.h	/^class u8string_view : public basic_string_view<char8_t> {$/;"	c
udl_arg	src/utility/fmt/format.h	/^struct udl_arg {$/;"	s	namespace:internal
udl_formatter	src/utility/fmt/format.h	/^class udl_formatter {$/;"	c	namespace:internal
uint_type	src/utility/fmt/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
uint_value	src/utility/fmt/core.h	/^    unsigned uint_value;$/;"	m	union:internal::value::__anon1
ulong_long_type	src/utility/fmt/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
ulong_long_value	src/utility/fmt/core.h	/^    unsigned long long ulong_long_value;$/;"	m	union:internal::value::__anon1
ulong_type	src/utility/fmt/core.h	/^                         unsigned, unsigned long long>::type ulong_type;$/;"	t	namespace:internal
union	diagram/unionfind.py	/^    def union(self, node1, node2):$/;"	m	class:UnionFind
unlock	src/utility/logger.cpp	/^inline void Logger::unlock()$/;"	f	class:Logger
unlock	src/utility/logger.cpp	/^void Logger::unlock()$/;"	f	class:Logger
unsigned_type	src/utility/fmt/format.h	/^    typedef typename internal::int_traits<Int>::main_type unsigned_type;$/;"	t	struct:basic_writer::int_writer
upper	src/utility/fmt/format-inl.h	/^  bool upper;$/;"	m	struct:internal::gen_digits_params
upper	src/utility/fmt/format.h	/^  bool upper;$/;"	m	struct:float_spec_handler
urn	src/utility/rng.h	/^    inline double urn()$/;"	f	class:RandomFactory
ustring	src/utility/fmt/core.h	/^    string_value<unsigned char> ustring;$/;"	m	union:internal::value::__anon1
utf16_to_utf8	src/utility/fmt/format-inl.h	/^FMT_FUNC internal::utf16_to_utf8::utf16_to_utf8(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8
utf16_to_utf8	src/utility/fmt/format.h	/^  utf16_to_utf8() {}$/;"	f	class:internal::utf16_to_utf8
utf16_to_utf8	src/utility/fmt/format.h	/^class utf16_to_utf8 {$/;"	c	namespace:internal
utf8_to_utf16	src/utility/fmt/format-inl.h	/^FMT_FUNC internal::utf8_to_utf16::utf8_to_utf16(string_view s) {$/;"	f	class:internal::utf8_to_utf16
utf8_to_utf16	src/utility/fmt/format.h	/^class utf8_to_utf16 {$/;"	c	namespace:internal
v_q	forkE.py	/^def v_q(q, lam):$/;"	f
val	src/utility/fmt/core.h	/^  T val;$/;"	m	struct:internal::init
value	src/utility/fmt/core.h	/^  FMT_CONSTEXPR value(int val = 0) : int_value(val) {}$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  const Char *value;$/;"	m	struct:internal::string_value
value	src/utility/fmt/core.h	/^  const void *value;$/;"	m	struct:internal::custom_value
value	src/utility/fmt/core.h	/^  explicit value(const T &val) {$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  static const type value = value_type::type_tag;$/;"	m	struct:internal::get_type
value	src/utility/fmt/core.h	/^  value(basic_string_view<char_type> val) {$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  value(const char_type *val) { string.value = val; }$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  value(const signed char *val) {$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  value(const unsigned char *val) {$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  value(const void *val) { pointer = val; }$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  value(double val) { double_value = val; }$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  value(long double val) { long_double_value = val; }$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  value(long long val) { long_long_value = val; }$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  value(unsigned long long val) { ulong_long_value = val; }$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^  value(unsigned val) { uint_value = val; }$/;"	f	class:internal::value
value	src/utility/fmt/core.h	/^class value {$/;"	c	namespace:internal
value	src/utility/fmt/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler
value	src/utility/fmt/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_writer
value	src/utility/fmt/format.h	/^    const char_type *value;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler
value	src/utility/fmt/format.h	/^    value = std::is_integral<T>::value && !std::is_same<T, bool>::value &&$/;"	e	enum:internal::is_integer::__anon7
value	src/utility/fmt/format.h	/^  static const bool value = !std::is_const<result>::value;$/;"	m	class:internal::is_output_iterator
value	src/utility/fmt/ostream.h	/^  static const bool value = result::value;$/;"	m	class:internal::is_streamable
value	src/utility/fmt/ostream.h	/^  static const bool value =$/;"	m	struct:convert_to_int
value	src/utility/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_like_std_string
value	src/utility/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_tuple_like_
value	src/utility/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_range
value	src/utility/fmt/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_tuple_like
value_	src/utility/fmt/core.h	/^  internal::value<Context> value_;$/;"	m	class:basic_format_arg
value_	src/utility/fmt/posix.h	/^  explicit error_code(int value = 0) FMT_NOEXCEPT : value_(value) {}$/;"	f	class:error_code
value_	src/utility/fmt/posix.h	/^  int value_;$/;"	m	class:error_code
value_type	src/utility/fmt/core.h	/^        declval<typename std::decay<T>::type&>())) value_type;$/;"	t	struct:internal::get_type
value_type	src/utility/fmt/core.h	/^  typedef T value_type;$/;"	t	class:internal::basic_buffer
value_type	src/utility/fmt/format.h	/^  typedef T value_type;$/;"	t	class:basic_memory_buffer
value_type	src/utility/fmt/format.h	/^  typedef T value_type;$/;"	t	class:internal::counting_iterator
value_type	src/utility/fmt/format.h	/^  typedef T value_type;$/;"	t	class:output_range
value_type	src/utility/fmt/format.h	/^  typedef typename Container::value_type value_type;$/;"	t	class:back_insert_range
value_type	src/utility/fmt/format.h	/^  typedef typename OutputIt::container_type::value_type value_type;$/;"	t	class:internal::truncating_iterator
value_type	src/utility/fmt/format.h	/^  typedef typename traits::value_type value_type;$/;"	t	class:internal::truncating_iterator
value_type	src/utility/fmt/printf.h	/^  typedef Char value_type;$/;"	t	class:internal::null_terminating_iterator
variable	src/weight.h	/^struct variable {$/;"	s	namespace:diag
verfunc	src/vertex.cpp	/^verfunc::verfunc() {$/;"	f	class:verfunc
verfunc	src/vertex.h	/^class verfunc {$/;"	c	namespace:diag
vertex4	src/diagram.h	/^struct vertex4 {$/;"	s	namespace:diag
vertex_H	src/vertex.h	2;"	d
vformat	src/utility/fmt/format.h	/^inline std::basic_string<Char> internal::vformat($/;"	f	class:internal
vformat	src/utility/fmt/locale.h	/^inline std::basic_string<Char> vformat($/;"	f
vformat	src/utility/fmt/locale.h	/^std::basic_string<Char> vformat($/;"	f	namespace:internal
vformat_to	src/utility/fmt/format.h	/^    vformat_to(OutputIt out, const String &format_str,$/;"	f
vformat_to	src/utility/fmt/format.h	/^inline typename buffer_context<Char>::type::iterator vformat_to($/;"	f
vformat_to	src/utility/fmt/format.h	/^typename Context::iterator vformat_to($/;"	f
vformat_to	src/utility/fmt/format.h	/^typename buffer_context<Char>::type::iterator internal::vformat_to($/;"	f	class:internal
vformat_to	src/utility/fmt/locale.h	/^    vformat_to(OutputIt out, const std::locale &loc, const String &format_str,$/;"	f
vformat_to	src/utility/fmt/locale.h	/^typename buffer_context<Char>::type::iterator vformat_to($/;"	f	namespace:internal
vformat_to_n	src/utility/fmt/format.h	/^    format_to_n_result<OutputIt>>::type vformat_to_n($/;"	f
vfprintf	src/utility/fmt/printf.h	/^inline int vfprintf(std::FILE *f, const S &format,$/;"	f
vfprintf	src/utility/fmt/printf.h	/^inline int vfprintf(std::basic_ostream<Char> &os,$/;"	f
visit	src/utility/fmt/core.h	/^    visit(Visitor &&vis, const basic_format_arg<Context> &arg) {$/;"	f
visit_format_arg	src/utility/fmt/core.h	/^    visit_format_arg(Visitor &&vis, const basic_format_arg<Context> &arg) {$/;"	f
void_	src/utility/fmt/format.h	/^struct void_ { typedef void type; };$/;"	s	namespace:internal
vprint	src/utility/fmt/format-inl.h	/^FMT_FUNC void vprint(std::FILE *f, string_view format_str, format_args args) {$/;"	f
vprint	src/utility/fmt/format-inl.h	/^FMT_FUNC void vprint(std::FILE *f, wstring_view format_str, wformat_args args) {$/;"	f
vprint	src/utility/fmt/format-inl.h	/^FMT_FUNC void vprint(string_view format_str, format_args args) {$/;"	f
vprint	src/utility/fmt/format-inl.h	/^FMT_FUNC void vprint(wstring_view format_str, wformat_args args) {$/;"	f
vprint	src/utility/fmt/ostream.h	/^inline void vprint(std::basic_ostream<Char> &os,$/;"	f
vprint	src/utility/fmt/posix.h	/^  void vprint(string_view format_str, format_args args) {$/;"	f	class:buffered_file
vprint_colored	src/utility/fmt/color.h	/^inline void vprint_colored(color c, string_view format, format_args args) {$/;"	f
vprint_colored	src/utility/fmt/color.h	/^inline void vprint_colored(color c, wstring_view format, wformat_args args) {$/;"	f
vprintf	src/utility/fmt/printf.h	/^inline int vprintf(const S &format,$/;"	f
vsprintf	src/utility/fmt/printf.h	/^vsprintf(const S &format,$/;"	f
wbuffer	src/utility/fmt/core.h	/^typedef basic_buffer<wchar_t> wbuffer;$/;"	t	namespace:internal
wcstring_view	src/utility/fmt/posix.h	/^typedef basic_cstring_view<wchar_t> wcstring_view;$/;"	t
weight	src/weight.h	/^class weight {$/;"	c	namespace:diag
weight_H	src/weight.h	2;"	d
wformat_context	src/utility/fmt/core.h	/^typedef buffer_context<wchar_t>::type wformat_context;$/;"	t
wformat_parse_context	src/utility/fmt/core.h	/^typedef basic_parse_context<wchar_t> wformat_parse_context;$/;"	t
white	color.py	/^white = _wrap_with('37')$/;"	v
white	diagram/color.py	/^white = _wrap_with('37')$/;"	v
white	src/utility/fmt/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
width	src/utility/fmt/format.h	/^    size_t width() const { return 1; }$/;"	f	struct:internal::arg_formatter_base::char_writer
width	src/utility/fmt/format.h	/^    size_t width() const { return size(); }$/;"	f	struct:basic_writer::double_writer
width	src/utility/fmt/format.h	/^    size_t width() const { return size(); }$/;"	f	struct:basic_writer::inf_or_nan_writer
width	src/utility/fmt/format.h	/^    size_t width() const { return size_; }$/;"	f	struct:basic_writer::padded_int_writer
width	src/utility/fmt/format.h	/^    size_t width() const {$/;"	f	struct:basic_writer::str_writer
width	src/utility/fmt/format.h	/^  FMT_CONSTEXPR unsigned width() const { return width_; }$/;"	f	struct:align_spec
width_	src/utility/fmt/format.h	/^  unsigned width_;$/;"	m	struct:align_spec
width_adapter	src/utility/fmt/format.h	/^  explicit FMT_CONSTEXPR width_adapter(SpecHandler &h) : handler(h) {}$/;"	f	struct:internal::width_adapter
width_adapter	src/utility/fmt/format.h	/^struct width_adapter {$/;"	s	namespace:internal
width_checker	src/utility/fmt/format.h	/^  explicit FMT_CONSTEXPR width_checker(ErrorHandler &eh) : handler_(eh) {}$/;"	f	class:internal::width_checker
width_checker	src/utility/fmt/format.h	/^class width_checker: public function<unsigned long long> {$/;"	c	namespace:internal
width_ref	src/utility/fmt/chrono.h	/^  internal::arg_ref<Char> width_ref;$/;"	m	struct:formatter
width_ref	src/utility/fmt/format.h	/^  arg_ref<Char> width_ref;$/;"	m	struct:internal::dynamic_format_specs
windows_error	src/utility/fmt/format.h	/^  windows_error(int error_code, string_view message, const Args &... args) {$/;"	f	class:windows_error
windows_error	src/utility/fmt/format.h	/^class windows_error : public system_error {$/;"	c
wmemory_buffer	src/utility/fmt/format.h	/^typedef basic_memory_buffer<wchar_t> wmemory_buffer;$/;"	t
workspace	diagram/logger.py	/^workspace = parentdir$/;"	v
wparse_context	src/utility/fmt/core.h	/^typedef basic_parse_context<wchar_t> wparse_context;$/;"	t
wprintf_args	src/utility/fmt/printf.h	/^typedef basic_format_args<wprintf_context> wprintf_args;$/;"	t
wprintf_context	src/utility/fmt/printf.h	/^typedef basic_printf_context_t<internal::wbuffer>::type wprintf_context;$/;"	t
write	src/utility/fmt/chrono.h	/^  void write(int value, int width) {$/;"	f	struct:internal::chrono_formatter
write	src/utility/fmt/format.h	/^      write(T value, FormatSpec spec, FormatSpecs... specs) {$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^      write(const T *p) {$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(basic_string_view<Char> s,$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(bool value) {$/;"	f	class:internal::arg_formatter_base
write	src/utility/fmt/format.h	/^  void write(char value) {$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(const Char *s, std::size_t size, const align_spec &spec) {$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(const char_type *value) {$/;"	f	class:internal::arg_formatter_base
write	src/utility/fmt/format.h	/^  void write(double value) {$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(int value) { write_decimal(value); }$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(long double value) {$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(long long value) { write_decimal(value); }$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(long value) { write_decimal(value); }$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(string_view value) {$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(unsigned long long value) { write_decimal(value); }$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(unsigned long value) { write_decimal(value); }$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(unsigned value) { write_decimal(value); }$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(wchar_t value) {$/;"	f	class:basic_writer
write	src/utility/fmt/format.h	/^  void write(wstring_view value) {$/;"	f	class:basic_writer
write	src/utility/fmt/ostream.h	/^void write(std::basic_ostream<Char> &os, basic_buffer<Char> &buf) {$/;"	f	namespace:internal
write_char	src/utility/fmt/format.h	/^  void write_char(char_type value) {$/;"	f	class:internal::arg_formatter_base
write_decimal	src/utility/fmt/format.h	/^  void write_decimal(Int value) {$/;"	f	class:basic_writer
write_double	src/utility/fmt/format.h	/^void basic_writer<Range>::write_double(T value, const format_specs &spec) {$/;"	f	class:basic_writer
write_exponent	src/utility/fmt/format-inl.h	/^FMT_FUNC void write_exponent(int exp, Handler &&h) {$/;"	f	namespace:internal
write_int	src/utility/fmt/format.h	/^  void write_int(T value, const Spec &spec) {$/;"	f	class:basic_writer
write_int	src/utility/fmt/format.h	/^  void write_int(int num_digits, string_view prefix,$/;"	f	class:basic_writer
write_null_pointer	src/utility/fmt/printf.h	/^  void write_null_pointer(char) {$/;"	f	class:printf_arg_formatter
write_null_pointer	src/utility/fmt/printf.h	/^  void write_null_pointer(wchar_t) {$/;"	f	class:printf_arg_formatter
write_padded	src/utility/fmt/format.h	/^  void write_padded(const align_spec &spec, F &&f) {$/;"	f	class:basic_writer
write_pair	src/utility/fmt/format.h	/^  void write_pair(unsigned N, uint32_t index) {$/;"	f	class:internal::decimal_formatter
write_pointer	src/utility/fmt/format.h	/^  void write_pointer(const void *p) {$/;"	f	class:internal::arg_formatter_base
writer	src/utility/fmt/format.h	/^    basic_writer<Range> &writer;$/;"	m	struct:basic_writer::int_writer
writer	src/utility/fmt/format.h	/^  writer_type &writer() { return writer_; }$/;"	f	class:internal::arg_formatter_base
writer	src/utility/fmt/format.h	/^typedef basic_writer<back_insert_range<internal::buffer>> writer;$/;"	t
writer_	src/utility/fmt/format.h	/^  writer_type writer_;$/;"	m	class:internal::arg_formatter_base
writer_type	src/utility/fmt/format.h	/^  typedef basic_writer<Range> writer_type;$/;"	t	class:internal::arg_formatter_base
wstring_view	src/utility/fmt/core.h	/^typedef basic_string_view<wchar_t> wstring_view;$/;"	t
wwriter	src/utility/fmt/format.h	/^typedef basic_writer<back_insert_range<internal::wbuffer>> wwriter;$/;"	t
x	tool/plt_lambda.py	/^        x = [0.45,3.05]$/;"	v
y	polar_eqTime.py	/^        y = EsDataDict[key]$/;"	v
y	polar_eqTime.py	/^        y = EsData[key]$/;"	v
y	polar_lam.py	/^        y = EsDataDict[key]$/;"	v
y	polar_lam.py	/^        y = EsData[key]$/;"	v
y	polar_lam_order.py	/^        y = EsDataDict[key]$/;"	v
y	polar_lam_order.py	/^        y = EsData[key]$/;"	v
y	tool/plt_lambda.py	/^        y= [-polarization[-1][0][1],-polarization[-1][0][1]]$/;"	v
y	tool/plt_polar_diag.py	/^        y = EsDataDict[key]$/;"	v
y	tool/plt_polar_diag.py	/^        y = EsData[key]$/;"	v
y	tool/plt_polar_diag.py	/^        y = PolarDict[key]$/;"	v
y	tool/plt_polar_lam.py	/^        y = EsDataDict[key]$/;"	v
y	tool/plt_polar_lam.py	/^        y = EsData[key]$/;"	v
yellow	color.py	/^yellow = _wrap_with('33')$/;"	v
yellow	diagram/color.py	/^yellow = _wrap_with('33')$/;"	v
yellow	src/utility/fmt/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
~InterruptHandler	src/utility/abort.cpp	/^InterruptHandler::~InterruptHandler()$/;"	f	class:InterruptHandler
~Locale	src/utility/fmt/posix.h	/^  ~Locale() { freelocale(locale_); }$/;"	f	class:Locale
~Logger	src/utility/logger.cpp	/^Logger::~Logger()$/;"	f	class:Logger
~ScopeGuard	src/utility/scopeguard.h	/^    ~ScopeGuard()$/;"	f	class:ScopeGuard
~arg_map	src/utility/fmt/core.h	/^  ~arg_map() { delete [] map_; }$/;"	f	class:internal::arg_map
~basic_buffer	src/utility/fmt/core.h	/^  virtual ~basic_buffer() {}$/;"	f	class:internal::basic_buffer
~basic_memory_buffer	src/utility/fmt/format.h	/^  ~basic_memory_buffer() { deallocate(); }$/;"	f	class:basic_memory_buffer
~prettify_handler	src/utility/fmt/format-inl.h	/^  ~prettify_handler() {$/;"	f	struct:internal::prettify_handler
